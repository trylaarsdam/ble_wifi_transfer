
c:/Users/Nerdom/Desktop/ble/target/ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004448  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  0001850c  2**0
                  CONTENTS
  3 .data         00000080  2003e2ac  000d8460  0000e2ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000004c4  2003e32c  2003e32c  0001e32c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d84e0  000d84e0  000184e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d8508  000d8508  00018508  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000c60f7  00000000  00000000  0001850c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000e9cd  00000000  00000000  000de603  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001b3ce  00000000  00000000  000ecfd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002388  00000000  00000000  0010839e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000041d0  00000000  00000000  0010a726  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00030fbe  00000000  00000000  0010e8f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002118b  00000000  00000000  0013f8b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00103ea5  00000000  00000000  00160a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c790  00000000  00000000  002648e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	b4 7d 0d 00                                         .}..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fd88 	bl	d7b42 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fda8 	bl	d7b8e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2ac 	.word	0x2003e2ac
   d4048:	000d8460 	.word	0x000d8460
   d404c:	2003e32c 	.word	0x2003e32c
   d4050:	2003e32c 	.word	0x2003e32c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fead 	bl	d6db8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8458 	.word	0x000d8458
   d4080:	000d841c 	.word	0x000d841c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b850 	b.w	d4128 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8af 	bl	d41ec <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 be5f 	b.w	d6d54 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bbf1 	b.w	d487c <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bbf7 	b.w	d488c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bbf5 	b.w	d488c <free>
	...

000d40a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f000 fb52 	bl	d4754 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d44f1 	.word	0x000d44f1

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3

000d40d2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:

uint8_t txBuf[UART_TX_BUF_SIZE];
size_t txLen = 0;


void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d40d2:	2300      	movs	r3, #0
   d40d4:	b2da      	uxtb	r2, r3
    char* ssid = "";
    char* passkey = "";
    bool wifiKeyState = false;

    if(wifiKeyState == false){
        for (uint8_t i = 0; i < len; i++) {
   d40d6:	4291      	cmp	r1, r2
   d40d8:	f103 0301 	add.w	r3, r3, #1
   d40dc:	d8fa      	bhi.n	d40d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2>
            passkey += (data[i]);
        }
        wifiKeyState = false;
        WiFi.setCredentials(ssid, passkey);
    }
}
   d40de:	4770      	bx	lr

000d40e0 <_ZN5spark17Serial1LogHandlerD1Ev>:
            StreamLogHandler(Serial1, level, filters) {
        Serial1.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~Serial1LogHandler() {
   d40e0:	4b0a      	ldr	r3, [pc, #40]	; (d410c <_ZN5spark17Serial1LogHandlerD1Ev+0x2c>)
   d40e2:	b510      	push	{r4, lr}
   d40e4:	4604      	mov	r4, r0
   d40e6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40e8:	f002 f908 	bl	d62fc <_ZN5spark10LogManager8instanceEv>
   d40ec:	4621      	mov	r1, r4
   d40ee:	f002 faf5 	bl	d66dc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial1.end();
   d40f2:	f002 ffdb 	bl	d70ac <_Z22__fetch_global_Serial1v>
   d40f6:	f002 ffd6 	bl	d70a6 <_ZN11USARTSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d40fa:	4620      	mov	r0, r4
   d40fc:	4b04      	ldr	r3, [pc, #16]	; (d4110 <_ZN5spark17Serial1LogHandlerD1Ev+0x30>)
   d40fe:	f840 3b04 	str.w	r3, [r0], #4
   d4102:	f002 f9f1 	bl	d64e8 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4106:	4620      	mov	r0, r4
   d4108:	bd10      	pop	{r4, pc}
   d410a:	bf00      	nop
   d410c:	000d7de8 	.word	0x000d7de8
   d4110:	000d7dd0 	.word	0x000d7dd0

000d4114 <_ZN5spark17Serial1LogHandlerD0Ev>:
            StreamLogHandler(Serial1, level, filters) {
        Serial1.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~Serial1LogHandler() {
   d4114:	b510      	push	{r4, lr}
   d4116:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial1.end();
    }
   d4118:	f7ff ffe2 	bl	d40e0 <_ZN5spark17Serial1LogHandlerD1Ev>
   d411c:	4620      	mov	r0, r4
   d411e:	2124      	movs	r1, #36	; 0x24
   d4120:	f003 fb98 	bl	d7854 <_ZdlPvj>
   d4124:	4620      	mov	r0, r4
   d4126:	bd10      	pop	{r4, pc}

000d4128 <setup>:

void setup() {
   d4128:	b510      	push	{r4, lr}
   d412a:	b092      	sub	sp, #72	; 0x48
    Serial.begin(115200);
   d412c:	f002 ff36 	bl	d6f9c <_Z16_fetch_usbserialv>
   d4130:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4134:	f002 ff22 	bl	d6f7c <_ZN9USBSerial5beginEl>

    LOG(TRACE, "Application started.");
   d4138:	2320      	movs	r3, #32
   d413a:	9309      	str	r3, [sp, #36]	; 0x24
   d413c:	4b23      	ldr	r3, [pc, #140]	; (d41cc <setup+0xa4>)
   d413e:	930b      	str	r3, [sp, #44]	; 0x2c
   d4140:	2337      	movs	r3, #55	; 0x37
   d4142:	930c      	str	r3, [sp, #48]	; 0x30
   d4144:	4b22      	ldr	r3, [pc, #136]	; (d41d0 <setup+0xa8>)
   d4146:	930d      	str	r3, [sp, #52]	; 0x34
   d4148:	2400      	movs	r4, #0
   d414a:	2307      	movs	r3, #7
   d414c:	940a      	str	r4, [sp, #40]	; 0x28
   d414e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d4152:	4b20      	ldr	r3, [pc, #128]	; (d41d4 <setup+0xac>)
   d4154:	4920      	ldr	r1, [pc, #128]	; (d41d8 <setup+0xb0>)
   d4156:	9300      	str	r3, [sp, #0]
   d4158:	aa09      	add	r2, sp, #36	; 0x24
   d415a:	4623      	mov	r3, r4
   d415c:	2001      	movs	r0, #1
   d415e:	f000 fb01 	bl	d4764 <log_message>

    BLE.addCharacteristic(txCharacteristic);
   d4162:	f001 f94d 	bl	d5400 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4166:	491d      	ldr	r1, [pc, #116]	; (d41dc <setup+0xb4>)
   d4168:	f001 fd56 	bl	d5c18 <_ZNK8particle14BleLocalDevice17addCharacteristicERNS_17BleCharacteristicE>
    BLE.addCharacteristic(rxCharacteristic);
   d416c:	f001 f948 	bl	d5400 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4170:	491b      	ldr	r1, [pc, #108]	; (d41e0 <setup+0xb8>)
   d4172:	f001 fd51 	bl	d5c18 <_ZNK8particle14BleLocalDevice17addCharacteristicERNS_17BleCharacteristicE>

    BleAdvertisingData data;
   d4176:	a809      	add	r0, sp, #36	; 0x24
   d4178:	f000 fe1d 	bl	d4db6 <_ZN8particle18BleAdvertisingDataC1Ev>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d417c:	4b19      	ldr	r3, [pc, #100]	; (d41e4 <setup+0xbc>)
   d417e:	a804      	add	r0, sp, #16
   d4180:	6819      	ldr	r1, [r3, #0]
   d4182:	f000 fd2e 	bl	d4be2 <_ZN8particle7BleUuidC1EPKc>
    ~BleUuid() = default;

    bool isValid() const;

    BleUuidType type() const {
        if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d4186:	f89d 3020 	ldrb.w	r3, [sp, #32]
   d418a:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
   d418e:	d005      	beq.n	d419c <setup+0x74>
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.full(), BLE_SIG_UUID_128BIT_LEN, force);
   d4190:	2310      	movs	r3, #16
   d4192:	9400      	str	r4, [sp, #0]
   d4194:	eb0d 0203 	add.w	r2, sp, r3
   d4198:	2107      	movs	r1, #7
   d419a:	e007      	b.n	d41ac <setup+0x84>

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d419c:	aa12      	add	r2, sp, #72	; 0x48
   d419e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   d41a2:	f822 1d3a 	strh.w	r1, [r2, #-58]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d41a6:	9300      	str	r3, [sp, #0]
   d41a8:	2103      	movs	r1, #3
   d41aa:	2302      	movs	r3, #2
   d41ac:	a809      	add	r0, sp, #36	; 0x24
   d41ae:	f000 fdbb 	bl	d4d28 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    data.appendServiceUUID(serviceUuid);
    data.appendLocalName("Todd");
   d41b2:	490d      	ldr	r1, [pc, #52]	; (d41e8 <setup+0xc0>)
   d41b4:	a809      	add	r0, sp, #36	; 0x24
   d41b6:	f000 fe18 	bl	d4dea <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    BLE.advertise(&data);
   d41ba:	f001 f921 	bl	d5400 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41be:	2200      	movs	r2, #0
   d41c0:	a909      	add	r1, sp, #36	; 0x24
   d41c2:	f000 ff29 	bl	d5018 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
}
   d41c6:	b012      	add	sp, #72	; 0x48
   d41c8:	bd10      	pop	{r4, pc}
   d41ca:	bf00      	nop
   d41cc:	000d7e05 	.word	0x000d7e05
   d41d0:	000d7df8 	.word	0x000d7df8
   d41d4:	000d7e31 	.word	0x000d7e31
   d41d8:	000d7e2d 	.word	0x000d7e2d
   d41dc:	2003e33c 	.word	0x2003e33c
   d41e0:	2003e358 	.word	0x2003e358
   d41e4:	2003e2b4 	.word	0x2003e2b4
   d41e8:	000d7e46 	.word	0x000d7e46

000d41ec <loop>:

void loop() {
   d41ec:	b570      	push	{r4, r5, r6, lr}
    if (BLE.connected()) {
   d41ee:	f001 f907 	bl	d5400 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41f2:	f000 ff2e 	bl	d5052 <_ZNK8particle14BleLocalDevice9connectedEv>
   d41f6:	b338      	cbz	r0, d4248 <loop+0x5c>
   d41f8:	4c14      	ldr	r4, [pc, #80]	; (d424c <loop+0x60>)
        while (Serial.available() && txLen < UART_TX_BUF_SIZE) {
            txBuf[txLen++] = Serial.read();
   d41fa:	4e15      	ldr	r6, [pc, #84]	; (d4250 <loop+0x64>)
    BLE.advertise(&data);
}

void loop() {
    if (BLE.connected()) {
        while (Serial.available() && txLen < UART_TX_BUF_SIZE) {
   d41fc:	f002 fece 	bl	d6f9c <_Z16_fetch_usbserialv>
   d4200:	6803      	ldr	r3, [r0, #0]
   d4202:	691b      	ldr	r3, [r3, #16]
   d4204:	4798      	blx	r3
   d4206:	b1a0      	cbz	r0, d4232 <loop+0x46>
   d4208:	6825      	ldr	r5, [r4, #0]
   d420a:	2d13      	cmp	r5, #19
   d420c:	d811      	bhi.n	d4232 <loop+0x46>
            txBuf[txLen++] = Serial.read();
   d420e:	1c6b      	adds	r3, r5, #1
   d4210:	6023      	str	r3, [r4, #0]
   d4212:	f002 fec3 	bl	d6f9c <_Z16_fetch_usbserialv>
   d4216:	6803      	ldr	r3, [r0, #0]
   d4218:	695b      	ldr	r3, [r3, #20]
   d421a:	4798      	blx	r3
   d421c:	5570      	strb	r0, [r6, r5]
            Serial.write(txBuf[txLen - 1]);
   d421e:	f002 febd 	bl	d6f9c <_Z16_fetch_usbserialv>
   d4222:	6823      	ldr	r3, [r4, #0]
   d4224:	6802      	ldr	r2, [r0, #0]
   d4226:	4433      	add	r3, r6
   d4228:	6892      	ldr	r2, [r2, #8]
   d422a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   d422e:	4790      	blx	r2
    BLE.advertise(&data);
}

void loop() {
    if (BLE.connected()) {
        while (Serial.available() && txLen < UART_TX_BUF_SIZE) {
   d4230:	e7e4      	b.n	d41fc <loop+0x10>
            txBuf[txLen++] = Serial.read();
            Serial.write(txBuf[txLen - 1]);
        }

        if (txLen > 0) {
   d4232:	4b06      	ldr	r3, [pc, #24]	; (d424c <loop+0x60>)
   d4234:	681a      	ldr	r2, [r3, #0]
   d4236:	b13a      	cbz	r2, d4248 <loop+0x5c>
            txCharacteristic.setValue(txBuf, txLen);
   d4238:	4905      	ldr	r1, [pc, #20]	; (d4250 <loop+0x64>)
   d423a:	4806      	ldr	r0, [pc, #24]	; (d4254 <loop+0x68>)
   d423c:	f000 fe22 	bl	d4e84 <_ZN8particle17BleCharacteristic8setValueEPKhj>
            txLen = 0;
   d4240:	4b02      	ldr	r3, [pc, #8]	; (d424c <loop+0x60>)
   d4242:	2200      	movs	r2, #0
   d4244:	601a      	str	r2, [r3, #0]
        }
    }
   d4246:	bd70      	pop	{r4, r5, r6, pc}
   d4248:	bd70      	pop	{r4, r5, r6, pc}
   d424a:	bf00      	nop
   d424c:	2003e330 	.word	0x2003e330
   d4250:	2003e344 	.word	0x2003e344
   d4254:	2003e33c 	.word	0x2003e33c

000d4258 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4258:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d425a:	6804      	ldr	r4, [r0, #0]
   d425c:	6843      	ldr	r3, [r0, #4]
   d425e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4260:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4262:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4266:	42a6      	cmp	r6, r4
   d4268:	d004      	beq.n	d4274 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d426a:	4620      	mov	r0, r4
   d426c:	f000 fb9c 	bl	d49a8 <_ZN6StringD1Ev>
   d4270:	3414      	adds	r4, #20
   d4272:	e7f8      	b.n	d4266 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4274:	6828      	ldr	r0, [r5, #0]
   d4276:	f000 fb09 	bl	d488c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d427a:	4628      	mov	r0, r5
   d427c:	bd70      	pop	{r4, r5, r6, pc}

000d427e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d427e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4282:	4606      	mov	r6, r0
   d4284:	460c      	mov	r4, r1
   d4286:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4288:	d916      	bls.n	d42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d428a:	4290      	cmp	r0, r2
   d428c:	d215      	bcs.n	d42ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d428e:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d4292:	1a6c      	subs	r4, r5, r1
   d4294:	f1a1 0714 	sub.w	r7, r1, #20
   d4298:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d429a:	42af      	cmp	r7, r5
   d429c:	d01c      	beq.n	d42d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d429e:	b12c      	cbz	r4, d42ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d42a0:	4629      	mov	r1, r5
   d42a2:	4620      	mov	r0, r4
   d42a4:	f000 fb70 	bl	d4988 <_ZN6StringC1EOS_>
   d42a8:	7c2b      	ldrb	r3, [r5, #16]
   d42aa:	7423      	strb	r3, [r4, #16]
   d42ac:	4628      	mov	r0, r5
   d42ae:	f000 fb7b 	bl	d49a8 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d42b2:	3d14      	subs	r5, #20
   d42b4:	3c14      	subs	r4, #20
   d42b6:	e7f0      	b.n	d429a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d42b8:	d00e      	beq.n	d42d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d42ba:	42ac      	cmp	r4, r5
   d42bc:	d00c      	beq.n	d42d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d42be:	b12e      	cbz	r6, d42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d42c0:	4621      	mov	r1, r4
   d42c2:	4630      	mov	r0, r6
   d42c4:	f000 fb60 	bl	d4988 <_ZN6StringC1EOS_>
   d42c8:	7c23      	ldrb	r3, [r4, #16]
   d42ca:	7433      	strb	r3, [r6, #16]
   d42cc:	4620      	mov	r0, r4
   d42ce:	f000 fb6b 	bl	d49a8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d42d2:	3414      	adds	r4, #20
   d42d4:	3614      	adds	r6, #20
   d42d6:	e7f0      	b.n	d42ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d42d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d42da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d42da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d42de:	2300      	movs	r3, #0
   d42e0:	6003      	str	r3, [r0, #0]
   d42e2:	6043      	str	r3, [r0, #4]
   d42e4:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d42e6:	684e      	ldr	r6, [r1, #4]
   d42e8:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d42ea:	4604      	mov	r4, r0
   d42ec:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d42ee:	dd24      	ble.n	d433a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d42f0:	f04f 0814 	mov.w	r8, #20
   d42f4:	fb08 f006 	mul.w	r0, r8, r6
   d42f8:	f000 fac0 	bl	d487c <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d42fc:	4605      	mov	r5, r0
   d42fe:	b1e0      	cbz	r0, d433a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d4300:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4304:	fb08 1202 	mla	r2, r8, r2, r1
   d4308:	f7ff ffb9 	bl	d427e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d430c:	6820      	ldr	r0, [r4, #0]
   d430e:	f000 fabd 	bl	d488c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4312:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4314:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4316:	683e      	ldr	r6, [r7, #0]
   d4318:	687b      	ldr	r3, [r7, #4]
   d431a:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d431e:	4546      	cmp	r6, r8
   d4320:	d009      	beq.n	d4336 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d4322:	b12d      	cbz	r5, d4330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d4324:	4631      	mov	r1, r6
   d4326:	4628      	mov	r0, r5
   d4328:	f000 fba7 	bl	d4a7a <_ZN6StringC1ERKS_>
   d432c:	7c33      	ldrb	r3, [r6, #16]
   d432e:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4330:	3614      	adds	r6, #20
   d4332:	3514      	adds	r5, #20
   d4334:	e7f3      	b.n	d431e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d4336:	687b      	ldr	r3, [r7, #4]
   d4338:	6063      	str	r3, [r4, #4]
    }
}
   d433a:	4620      	mov	r0, r4
   d433c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4340 <_GLOBAL__sub_I_SystemMode>:
   d4340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4344:	b095      	sub	sp, #84	; 0x54

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4346:	f000 f8bb 	bl	d44c0 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d434a:	4b45      	ldr	r3, [pc, #276]	; (d4460 <_GLOBAL__sub_I_SystemMode+0x120>)
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d434c:	4e45      	ldr	r6, [pc, #276]	; (d4464 <_GLOBAL__sub_I_SystemMode+0x124>)

const char* serviceUuid = "6E400001-B5A3-F393-E0A9-E50E24DCCA9E";
const char* rxUuid = "6E400002-B5A3-F393-E0A9-E50E24DCCA9E";
const char* txUuid = "6E400003-B5A3-F393-E0A9-E50E24DCCA9E";

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d434e:	f8df 9148 	ldr.w	r9, [pc, #328]	; d4498 <_GLOBAL__sub_I_SystemMode+0x158>
   d4352:	2400      	movs	r4, #0
   d4354:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4358:	809a      	strh	r2, [r3, #4]
   d435a:	701c      	strb	r4, [r3, #0]
   d435c:	805c      	strh	r4, [r3, #2]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d435e:	2003      	movs	r0, #3
   d4360:	f000 fa18 	bl	d4794 <set_system_mode>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4364:	9404      	str	r4, [sp, #16]
   d4366:	9405      	str	r4, [sp, #20]
   d4368:	9406      	str	r4, [sp, #24]
    explicit Serial1LogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            Serial1LogHandler(9600, level, filters) {
    }

    explicit Serial1LogHandler(int baud, LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial1, level, filters) {
   d436a:	f002 fe9f 	bl	d70ac <_Z22__fetch_global_Serial1v>
   d436e:	a904      	add	r1, sp, #16
   d4370:	4680      	mov	r8, r0
   d4372:	a807      	add	r0, sp, #28
   d4374:	f7ff ffb1 	bl	d42da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4378:	4637      	mov	r7, r6
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d437a:	a907      	add	r1, sp, #28
   d437c:	a80a      	add	r0, sp, #40	; 0x28
   d437e:	f7ff ffac 	bl	d42da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4382:	4b39      	ldr	r3, [pc, #228]	; (d4468 <_GLOBAL__sub_I_SystemMode+0x128>)
   d4384:	f847 3b04 	str.w	r3, [r7], #4
   d4388:	ad0f      	add	r5, sp, #60	; 0x3c
   d438a:	a90a      	add	r1, sp, #40	; 0x28
   d438c:	4628      	mov	r0, r5
   d438e:	f7ff ffa4 	bl	d42da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4392:	462a      	mov	r2, r5
   d4394:	2101      	movs	r1, #1
   d4396:	4638      	mov	r0, r7
   d4398:	f002 fb03 	bl	d69a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d439c:	4628      	mov	r0, r5
   d439e:	f7ff ff5b 	bl	d4258 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d43a2:	a80a      	add	r0, sp, #40	; 0x28
   d43a4:	f7ff ff58 	bl	d4258 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d43a8:	4b30      	ldr	r3, [pc, #192]	; (d446c <_GLOBAL__sub_I_SystemMode+0x12c>)
   d43aa:	6033      	str	r3, [r6, #0]
   d43ac:	f8c6 8020 	str.w	r8, [r6, #32]
   d43b0:	a807      	add	r0, sp, #28
   d43b2:	f7ff ff51 	bl	d4258 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d43b6:	4b2e      	ldr	r3, [pc, #184]	; (d4470 <_GLOBAL__sub_I_SystemMode+0x130>)
   d43b8:	6033      	str	r3, [r6, #0]
        Serial1.begin(baud);
   d43ba:	f002 fe77 	bl	d70ac <_Z22__fetch_global_Serial1v>
   d43be:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d43c2:	f002 fe6d 	bl	d70a0 <_ZN11USARTSerial5beginEm>

#define UART_TX_BUF_SIZE        20

SYSTEM_MODE(MANUAL);

Serial1LogHandler log(115200, LOG_LEVEL_ALL);
   d43c6:	4f2b      	ldr	r7, [pc, #172]	; (d4474 <_GLOBAL__sub_I_SystemMode+0x134>)
        LogManager::instance()->addHandler(this);
   d43c8:	f001 ff98 	bl	d62fc <_ZN5spark10LogManager8instanceEv>
   d43cc:	4631      	mov	r1, r6
   d43ce:	f002 fa7b 	bl	d68c8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
   d43d2:	a804      	add	r0, sp, #16
   d43d4:	f7ff ff40 	bl	d4258 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d43d8:	463a      	mov	r2, r7
   d43da:	4927      	ldr	r1, [pc, #156]	; (d4478 <_GLOBAL__sub_I_SystemMode+0x138>)
   d43dc:	4630      	mov	r0, r6
   d43de:	f003 fa2b 	bl	d7838 <__aeabi_atexit>

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d43e2:	4e26      	ldr	r6, [pc, #152]	; (d447c <_GLOBAL__sub_I_SystemMode+0x13c>)

const char* serviceUuid = "6E400001-B5A3-F393-E0A9-E50E24DCCA9E";
const char* rxUuid = "6E400002-B5A3-F393-E0A9-E50E24DCCA9E";
const char* txUuid = "6E400003-B5A3-F393-E0A9-E50E24DCCA9E";

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d43e4:	4b26      	ldr	r3, [pc, #152]	; (d4480 <_GLOBAL__sub_I_SystemMode+0x140>)
   d43e6:	f8d9 8000 	ldr.w	r8, [r9]
   d43ea:	6819      	ldr	r1, [r3, #0]
   d43ec:	6034      	str	r4, [r6, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d43ee:	6074      	str	r4, [r6, #4]
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }
    template<typename T>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T charUuid, T svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d43f0:	a80a      	add	r0, sp, #40	; 0x28
   d43f2:	f000 fbf6 	bl	d4be2 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d43f6:	4641      	mov	r1, r8
   d43f8:	4628      	mov	r0, r5
   d43fa:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d449c <_GLOBAL__sub_I_SystemMode+0x15c>
   d43fe:	f000 fbf0 	bl	d4be2 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4402:	ab0a      	add	r3, sp, #40	; 0x28
   d4404:	4630      	mov	r0, r6
   d4406:	9402      	str	r4, [sp, #8]
   d4408:	9401      	str	r4, [sp, #4]
   d440a:	9500      	str	r5, [sp, #0]
   d440c:	2210      	movs	r2, #16
   d440e:	491d      	ldr	r1, [pc, #116]	; (d4484 <_GLOBAL__sub_I_SystemMode+0x144>)
   d4410:	f001 fae0 	bl	d59d4 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
   d4414:	463a      	mov	r2, r7
   d4416:	4641      	mov	r1, r8
   d4418:	4630      	mov	r0, r6
   d441a:	f003 fa0d 	bl	d7838 <__aeabi_atexit>

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d441e:	4e1a      	ldr	r6, [pc, #104]	; (d4488 <_GLOBAL__sub_I_SystemMode+0x148>)
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, &rxCharacteristic);
   d4420:	4b1a      	ldr	r3, [pc, #104]	; (d448c <_GLOBAL__sub_I_SystemMode+0x14c>)
   d4422:	f8d9 9000 	ldr.w	r9, [r9]
   d4426:	6819      	ldr	r1, [r3, #0]
   d4428:	6034      	str	r4, [r6, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d442a:	6074      	str	r4, [r6, #4]
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }
    template<typename T>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T charUuid, T svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d442c:	a80a      	add	r0, sp, #40	; 0x28
   d442e:	f000 fbd8 	bl	d4be2 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d4432:	4649      	mov	r1, r9
   d4434:	4628      	mov	r0, r5
   d4436:	f000 fbd4 	bl	d4be2 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d443a:	4b15      	ldr	r3, [pc, #84]	; (d4490 <_GLOBAL__sub_I_SystemMode+0x150>)
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	4630      	mov	r0, r6
   d4440:	ab0a      	add	r3, sp, #40	; 0x28
   d4442:	9602      	str	r6, [sp, #8]
   d4444:	9500      	str	r5, [sp, #0]
   d4446:	2204      	movs	r2, #4
   d4448:	4912      	ldr	r1, [pc, #72]	; (d4494 <_GLOBAL__sub_I_SystemMode+0x154>)
   d444a:	f001 fac3 	bl	d59d4 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
   d444e:	463a      	mov	r2, r7
   d4450:	4641      	mov	r1, r8
   d4452:	4630      	mov	r0, r6
   d4454:	f003 f9f0 	bl	d7838 <__aeabi_atexit>
        if (txLen > 0) {
            txCharacteristic.setValue(txBuf, txLen);
            txLen = 0;
        }
    }
   d4458:	b015      	add	sp, #84	; 0x54
   d445a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d445e:	bf00      	nop
   d4460:	2003e334 	.word	0x2003e334
   d4464:	2003e360 	.word	0x2003e360
   d4468:	000d7dd0 	.word	0x000d7dd0
   d446c:	000d8130 	.word	0x000d8130
   d4470:	000d7de8 	.word	0x000d7de8
   d4474:	2003e32c 	.word	0x2003e32c
   d4478:	000d40e1 	.word	0x000d40e1
   d447c:	2003e33c 	.word	0x2003e33c
   d4480:	2003e2b0 	.word	0x2003e2b0
   d4484:	000d7e4b 	.word	0x000d7e4b
   d4488:	2003e358 	.word	0x2003e358
   d448c:	2003e2ac 	.word	0x2003e2ac
   d4490:	000d40d3 	.word	0x000d40d3
   d4494:	000d7e4e 	.word	0x000d7e4e
   d4498:	2003e2b4 	.word	0x2003e2b4
   d449c:	000d50c9 	.word	0x000d50c9

000d44a0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <netdb_freeaddrinfo+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	689b      	ldr	r3, [r3, #8]
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	00030268 	.word	0x00030268

000d44b0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <netdb_getaddrinfo+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	68db      	ldr	r3, [r3, #12]
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	00030268 	.word	0x00030268

000d44c0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <HAL_Pin_Map+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	681b      	ldr	r3, [r3, #0]
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	0003022c 	.word	0x0003022c

000d44d0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <HAL_SPI_Init+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	69db      	ldr	r3, [r3, #28]
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030230 	.word	0x00030230

000d44e0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <HAL_RNG_GetRandomNumber+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	685b      	ldr	r3, [r3, #4]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030218 	.word	0x00030218

000d44f0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <HAL_Delay_Microseconds+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	68db      	ldr	r3, [r3, #12]
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	00030218 	.word	0x00030218

000d4500 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	695b      	ldr	r3, [r3, #20]
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030218 	.word	0x00030218

000d4510 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <hal_ble_stack_init+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	689b      	ldr	r3, [r3, #8]
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030278 	.word	0x00030278

000d4520 <hal_ble_set_callback_on_events>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events, int(hal_ble_on_generic_evt_cb_t, void*, void*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <hal_ble_set_callback_on_events+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	695b      	ldr	r3, [r3, #20]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030278 	.word	0x00030278

000d4530 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <hal_ble_gap_set_advertising_data+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030278 	.word	0x00030278

000d4540 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <hal_ble_gap_set_scan_response_data+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	00030278 	.word	0x00030278

000d4550 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <hal_ble_gap_start_advertising+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030278 	.word	0x00030278

000d4560 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b03      	ldr	r3, [pc, #12]	; (d4570 <hal_ble_gatt_server_add_service+0x10>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d456a:	9301      	str	r3, [sp, #4]
   d456c:	bd08      	pop	{r3, pc}
   d456e:	0000      	.short	0x0000
   d4570:	00030278 	.word	0x00030278

000d4574 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b03      	ldr	r3, [pc, #12]	; (d4584 <hal_ble_gatt_server_add_characteristic+0x10>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d457e:	9301      	str	r3, [sp, #4]
   d4580:	bd08      	pop	{r3, pc}
   d4582:	0000      	.short	0x0000
   d4584:	00030278 	.word	0x00030278

000d4588 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b03      	ldr	r3, [pc, #12]	; (d4598 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d4592:	9301      	str	r3, [sp, #4]
   d4594:	bd08      	pop	{r3, pc}
   d4596:	0000      	.short	0x0000
   d4598:	00030278 	.word	0x00030278

000d459c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b03      	ldr	r3, [pc, #12]	; (d45ac <hal_ble_gatt_client_write_with_response+0x10>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d45a6:	9301      	str	r3, [sp, #4]
   d45a8:	bd08      	pop	{r3, pc}
   d45aa:	0000      	.short	0x0000
   d45ac:	00030278 	.word	0x00030278

000d45b0 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b03      	ldr	r3, [pc, #12]	; (d45c0 <hal_ble_gatt_client_write_without_response+0x10>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d45ba:	9301      	str	r3, [sp, #4]
   d45bc:	bd08      	pop	{r3, pc}
   d45be:	0000      	.short	0x0000
   d45c0:	00030278 	.word	0x00030278

000d45c4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <os_thread_is_current+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	689b      	ldr	r3, [r3, #8]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	00030248 	.word	0x00030248

000d45d4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <os_thread_join+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	691b      	ldr	r3, [r3, #16]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	00030248 	.word	0x00030248

000d45e4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <os_thread_cleanup+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	695b      	ldr	r3, [r3, #20]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030248 	.word	0x00030248

000d45f4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <os_mutex_create+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030248 	.word	0x00030248

000d4604 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <os_mutex_recursive_create+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030248 	.word	0x00030248

000d4614 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <os_mutex_recursive_lock+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030248 	.word	0x00030248

000d4624 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <os_mutex_recursive_unlock+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030248 	.word	0x00030248

000d4634 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <inet_inet_ntop+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	695b      	ldr	r3, [r3, #20]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030264 	.word	0x00030264

000d4644 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <HAL_USART_Init+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	681b      	ldr	r3, [r3, #0]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	0003023c 	.word	0x0003023c

000d4654 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <HAL_USART_End+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	689b      	ldr	r3, [r3, #8]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	0003023c 	.word	0x0003023c

000d4664 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <HAL_USART_Write_Data+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	68db      	ldr	r3, [r3, #12]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	0003023c 	.word	0x0003023c

000d4674 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <HAL_USART_Available_Data+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	691b      	ldr	r3, [r3, #16]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	0003023c 	.word	0x0003023c

000d4684 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <HAL_USART_Read_Data+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	695b      	ldr	r3, [r3, #20]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	0003023c 	.word	0x0003023c

000d4694 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <HAL_USART_Peek_Data+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	699b      	ldr	r3, [r3, #24]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	0003023c 	.word	0x0003023c

000d46a4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <HAL_USART_Flush_Data+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	69db      	ldr	r3, [r3, #28]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	0003023c 	.word	0x0003023c

000d46b4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <HAL_USART_Available_Data_For_Write+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	0003023c 	.word	0x0003023c

000d46c4 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <HAL_USART_BeginConfig+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	0003023c 	.word	0x0003023c

000d46d4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <HAL_USB_USART_Init+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	681b      	ldr	r3, [r3, #0]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003024c 	.word	0x0003024c

000d46e4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <HAL_USB_USART_Begin+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	685b      	ldr	r3, [r3, #4]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003024c 	.word	0x0003024c

000d46f4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <HAL_USB_USART_End+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	689b      	ldr	r3, [r3, #8]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003024c 	.word	0x0003024c

000d4704 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <HAL_USB_USART_Available_Data+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	691b      	ldr	r3, [r3, #16]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003024c 	.word	0x0003024c

000d4714 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	695b      	ldr	r3, [r3, #20]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	0003024c 	.word	0x0003024c

000d4724 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <HAL_USB_USART_Receive_Data+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	699b      	ldr	r3, [r3, #24]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	0003024c 	.word	0x0003024c

000d4734 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <HAL_USB_USART_Send_Data+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	69db      	ldr	r3, [r3, #28]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	0003024c 	.word	0x0003024c

000d4744 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <HAL_USB_USART_Flush_Data+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	6a1b      	ldr	r3, [r3, #32]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	0003024c 	.word	0x0003024c

000d4754 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <panic_+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030260 	.word	0x00030260

000d4764 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <log_message+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	00030260 	.word	0x00030260

000d4774 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <log_level_name+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	00030260 	.word	0x00030260

000d4784 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <log_set_callbacks+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	00030260 	.word	0x00030260

000d4794 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <set_system_mode+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	685b      	ldr	r3, [r3, #4]
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	00030220 	.word	0x00030220

000d47a4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b03      	ldr	r3, [pc, #12]	; (d47b4 <system_ctrl_set_app_request_handler+0x10>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d47ae:	9301      	str	r3, [sp, #4]
   d47b0:	bd08      	pop	{r3, pc}
   d47b2:	0000      	.short	0x0000
   d47b4:	00030220 	.word	0x00030220

000d47b8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b03      	ldr	r3, [pc, #12]	; (d47c8 <system_ctrl_set_result+0x10>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d47c2:	9301      	str	r3, [sp, #4]
   d47c4:	bd08      	pop	{r3, pc}
   d47c6:	0000      	.short	0x0000
   d47c8:	00030220 	.word	0x00030220

000d47cc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <network_connect+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	685b      	ldr	r3, [r3, #4]
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030240 	.word	0x00030240

000d47dc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <network_connecting+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	689b      	ldr	r3, [r3, #8]
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030240 	.word	0x00030240

000d47ec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <network_disconnect+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	68db      	ldr	r3, [r3, #12]
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030240 	.word	0x00030240

000d47fc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <network_ready+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	691b      	ldr	r3, [r3, #16]
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030240 	.word	0x00030240

000d480c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <network_on+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	695b      	ldr	r3, [r3, #20]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030240 	.word	0x00030240

000d481c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <network_off+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	699b      	ldr	r3, [r3, #24]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030240 	.word	0x00030240

000d482c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <network_listen+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	69db      	ldr	r3, [r3, #28]
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	00030240 	.word	0x00030240

000d483c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <network_listening+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	6a1b      	ldr	r3, [r3, #32]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	00030240 	.word	0x00030240

000d484c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <network_set_listen_timeout+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	00030240 	.word	0x00030240

000d485c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <network_get_listen_timeout+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	00030240 	.word	0x00030240

000d486c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	00030244 	.word	0x00030244

000d487c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <malloc+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	681b      	ldr	r3, [r3, #0]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	0003021c 	.word	0x0003021c

000d488c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <free+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	685b      	ldr	r3, [r3, #4]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	0003021c 	.word	0x0003021c

000d489c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <realloc+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	689b      	ldr	r3, [r3, #8]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	0003021c 	.word	0x0003021c

000d48ac <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <vsnprintf+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	0003021c 	.word	0x0003021c

000d48bc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48bc:	2200      	movs	r2, #0
   d48be:	4611      	mov	r1, r2
   d48c0:	6840      	ldr	r0, [r0, #4]
   d48c2:	f7ff bfbb 	b.w	d483c <network_listening>

000d48c6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d48c6:	2200      	movs	r2, #0
   d48c8:	4611      	mov	r1, r2
   d48ca:	6840      	ldr	r0, [r0, #4]
   d48cc:	f7ff bfc6 	b.w	d485c <network_get_listen_timeout>

000d48d0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48d0:	2200      	movs	r2, #0
   d48d2:	6840      	ldr	r0, [r0, #4]
   d48d4:	f7ff bfba 	b.w	d484c <network_set_listen_timeout>

000d48d8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48d8:	2200      	movs	r2, #0
   d48da:	f081 0101 	eor.w	r1, r1, #1
   d48de:	6840      	ldr	r0, [r0, #4]
   d48e0:	f7ff bfa4 	b.w	d482c <network_listen>

000d48e4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d48e4:	2300      	movs	r3, #0
   d48e6:	461a      	mov	r2, r3
   d48e8:	4619      	mov	r1, r3
   d48ea:	6840      	ldr	r0, [r0, #4]
   d48ec:	f7ff bf96 	b.w	d481c <network_off>

000d48f0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d48f0:	2300      	movs	r3, #0
   d48f2:	461a      	mov	r2, r3
   d48f4:	4619      	mov	r1, r3
   d48f6:	6840      	ldr	r0, [r0, #4]
   d48f8:	f7ff bf88 	b.w	d480c <network_on>

000d48fc <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d48fc:	2200      	movs	r2, #0
   d48fe:	4611      	mov	r1, r2
   d4900:	6840      	ldr	r0, [r0, #4]
   d4902:	f7ff bf7b 	b.w	d47fc <network_ready>

000d4906 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4906:	2200      	movs	r2, #0
   d4908:	4611      	mov	r1, r2
   d490a:	6840      	ldr	r0, [r0, #4]
   d490c:	f7ff bf66 	b.w	d47dc <network_connecting>

000d4910 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4910:	2200      	movs	r2, #0
   d4912:	2102      	movs	r1, #2
   d4914:	6840      	ldr	r0, [r0, #4]
   d4916:	f7ff bf69 	b.w	d47ec <network_disconnect>

000d491a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d491a:	2300      	movs	r3, #0
   d491c:	461a      	mov	r2, r3
   d491e:	6840      	ldr	r0, [r0, #4]
   d4920:	f7ff bf54 	b.w	d47cc <network_connect>

000d4924 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4924:	4b02      	ldr	r3, [pc, #8]	; (d4930 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4926:	2203      	movs	r2, #3
   d4928:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d492a:	4a02      	ldr	r2, [pc, #8]	; (d4934 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d492c:	601a      	str	r2, [r3, #0]
   d492e:	4770      	bx	lr
   d4930:	2003e384 	.word	0x2003e384
   d4934:	000d7ec8 	.word	0x000d7ec8

000d4938 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4938:	4770      	bx	lr

000d493a <_ZN8SPIClassD0Ev>:
   d493a:	b510      	push	{r4, lr}
   d493c:	2110      	movs	r1, #16
   d493e:	4604      	mov	r4, r0
   d4940:	f002 ff88 	bl	d7854 <_ZdlPvj>
   d4944:	4620      	mov	r0, r4
   d4946:	bd10      	pop	{r4, pc}

000d4948 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4948:	b570      	push	{r4, r5, r6, lr}
   d494a:	4b08      	ldr	r3, [pc, #32]	; (d496c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d494c:	6003      	str	r3, [r0, #0]
   d494e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4950:	2500      	movs	r5, #0
   d4952:	460e      	mov	r6, r1
   d4954:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4958:	f7ff fe4c 	bl	d45f4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d495c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d495e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4960:	f7ff fdb6 	bl	d44d0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4964:	60a5      	str	r5, [r4, #8]
}
   d4966:	4620      	mov	r0, r4
   d4968:	bd70      	pop	{r4, r5, r6, pc}
   d496a:	bf00      	nop
   d496c:	000d7efc 	.word	0x000d7efc

000d4970 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4970:	4b04      	ldr	r3, [pc, #16]	; (d4984 <_GLOBAL__sub_I_System+0x14>)
   d4972:	2000      	movs	r0, #0
   d4974:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4978:	7018      	strb	r0, [r3, #0]
   d497a:	8058      	strh	r0, [r3, #2]
   d497c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d497e:	f7ff bf09 	b.w	d4794 <set_system_mode>
   d4982:	bf00      	nop
   d4984:	2003e38c 	.word	0x2003e38c

000d4988 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4988:	2300      	movs	r3, #0
   d498a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d498c:	6043      	str	r3, [r0, #4]
	len = 0;
   d498e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4990:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d4992:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d4994:	680c      	ldr	r4, [r1, #0]
   d4996:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d4998:	684c      	ldr	r4, [r1, #4]
   d499a:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d499c:	688c      	ldr	r4, [r1, #8]
   d499e:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d49a0:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d49a2:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d49a4:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d49a6:	bd10      	pop	{r4, pc}

000d49a8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d49a8:	b510      	push	{r4, lr}
   d49aa:	4604      	mov	r4, r0
{
	free(buffer);
   d49ac:	6800      	ldr	r0, [r0, #0]
   d49ae:	f7ff ff6d 	bl	d488c <free>
}
   d49b2:	4620      	mov	r0, r4
   d49b4:	bd10      	pop	{r4, pc}

000d49b6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d49b6:	b510      	push	{r4, lr}
   d49b8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d49ba:	6800      	ldr	r0, [r0, #0]
   d49bc:	b108      	cbz	r0, d49c2 <_ZN6String10invalidateEv+0xc>
   d49be:	f7ff ff65 	bl	d488c <free>
	buffer = NULL;
   d49c2:	2300      	movs	r3, #0
   d49c4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d49c6:	60a3      	str	r3, [r4, #8]
   d49c8:	6063      	str	r3, [r4, #4]
   d49ca:	bd10      	pop	{r4, pc}

000d49cc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d49cc:	b538      	push	{r3, r4, r5, lr}
   d49ce:	4604      	mov	r4, r0
   d49d0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d49d2:	6800      	ldr	r0, [r0, #0]
   d49d4:	3101      	adds	r1, #1
   d49d6:	f7ff ff61 	bl	d489c <realloc>
	if (newbuffer) {
   d49da:	b110      	cbz	r0, d49e2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d49dc:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d49e0:	2001      	movs	r0, #1
	}
	return 0;
}
   d49e2:	bd38      	pop	{r3, r4, r5, pc}

000d49e4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d49e4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d49e6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d49e8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d49ea:	b113      	cbz	r3, d49f2 <_ZN6String7reserveEj+0xe>
   d49ec:	6843      	ldr	r3, [r0, #4]
   d49ee:	428b      	cmp	r3, r1
   d49f0:	d207      	bcs.n	d4a02 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d49f2:	4620      	mov	r0, r4
   d49f4:	f7ff ffea 	bl	d49cc <_ZN6String12changeBufferEj>
   d49f8:	b120      	cbz	r0, d4a04 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d49fa:	68a3      	ldr	r3, [r4, #8]
   d49fc:	b90b      	cbnz	r3, d4a02 <_ZN6String7reserveEj+0x1e>
   d49fe:	6822      	ldr	r2, [r4, #0]
   d4a00:	7013      	strb	r3, [r2, #0]
   d4a02:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4a04:	bd10      	pop	{r4, pc}

000d4a06 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4a06:	b570      	push	{r4, r5, r6, lr}
   d4a08:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4a0a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4a0c:	4604      	mov	r4, r0
   d4a0e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4a10:	f7ff ffe8 	bl	d49e4 <_ZN6String7reserveEj>
   d4a14:	b918      	cbnz	r0, d4a1e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4a16:	4620      	mov	r0, r4
   d4a18:	f7ff ffcd 	bl	d49b6 <_ZN6String10invalidateEv>
		return *this;
   d4a1c:	e009      	b.n	d4a32 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4a1e:	462a      	mov	r2, r5
   d4a20:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4a22:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4a24:	6820      	ldr	r0, [r4, #0]
   d4a26:	f003 f88c 	bl	d7b42 <memcpy>
	buffer[len] = 0;
   d4a2a:	6822      	ldr	r2, [r4, #0]
   d4a2c:	68a3      	ldr	r3, [r4, #8]
   d4a2e:	2100      	movs	r1, #0
   d4a30:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4a32:	4620      	mov	r0, r4
   d4a34:	bd70      	pop	{r4, r5, r6, pc}

000d4a36 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4a36:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4a38:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4a3a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4a3c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4a3e:	6043      	str	r3, [r0, #4]
	len = 0;
   d4a40:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4a42:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4a44:	460d      	mov	r5, r1
   d4a46:	b139      	cbz	r1, d4a58 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4a48:	4608      	mov	r0, r1
   d4a4a:	f003 f8f3 	bl	d7c34 <strlen>
   d4a4e:	4629      	mov	r1, r5
   d4a50:	4602      	mov	r2, r0
   d4a52:	4620      	mov	r0, r4
   d4a54:	f7ff ffd7 	bl	d4a06 <_ZN6String4copyEPKcj>
}
   d4a58:	4620      	mov	r0, r4
   d4a5a:	bd38      	pop	{r3, r4, r5, pc}

000d4a5c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4a5c:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d4a5e:	b510      	push	{r4, lr}
   d4a60:	460b      	mov	r3, r1
   d4a62:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4a64:	d007      	beq.n	d4a76 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4a66:	6809      	ldr	r1, [r1, #0]
   d4a68:	b119      	cbz	r1, d4a72 <_ZN6StringaSERKS_+0x16>
   d4a6a:	689a      	ldr	r2, [r3, #8]
   d4a6c:	f7ff ffcb 	bl	d4a06 <_ZN6String4copyEPKcj>
   d4a70:	e001      	b.n	d4a76 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d4a72:	f7ff ffa0 	bl	d49b6 <_ZN6String10invalidateEv>

	return *this;
}
   d4a76:	4620      	mov	r0, r4
   d4a78:	bd10      	pop	{r4, pc}

000d4a7a <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4a7a:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4a7c:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4a7e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4a80:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4a82:	6043      	str	r3, [r0, #4]
	len = 0;
   d4a84:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4a86:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d4a88:	f7ff ffe8 	bl	d4a5c <_ZN6StringaSERKS_>
}
   d4a8c:	4620      	mov	r0, r4
   d4a8e:	bd10      	pop	{r4, pc}

000d4a90 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4a90:	b538      	push	{r3, r4, r5, lr}
   d4a92:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4a94:	460c      	mov	r4, r1
   d4a96:	b141      	cbz	r1, d4aaa <_ZN6StringaSEPKc+0x1a>
   d4a98:	4608      	mov	r0, r1
   d4a9a:	f003 f8cb 	bl	d7c34 <strlen>
   d4a9e:	4621      	mov	r1, r4
   d4aa0:	4602      	mov	r2, r0
   d4aa2:	4628      	mov	r0, r5
   d4aa4:	f7ff ffaf 	bl	d4a06 <_ZN6String4copyEPKcj>
   d4aa8:	e001      	b.n	d4aae <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4aaa:	f7ff ff84 	bl	d49b6 <_ZN6String10invalidateEv>

	return *this;
}
   d4aae:	4628      	mov	r0, r5
   d4ab0:	bd38      	pop	{r3, r4, r5, pc}

000d4ab2 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4ab2:	4770      	bx	lr

000d4ab4 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4ab4:	2000      	movs	r0, #0
   d4ab6:	4770      	bx	lr

000d4ab8 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4ab8:	4770      	bx	lr

000d4aba <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4aba:	2000      	movs	r0, #0
   d4abc:	4770      	bx	lr

000d4abe <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4abe:	4770      	bx	lr

000d4ac0 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4ac0:	2000      	movs	r0, #0
   d4ac2:	4770      	bx	lr

000d4ac4 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4ac4:	b510      	push	{r4, lr}
   d4ac6:	2114      	movs	r1, #20
   d4ac8:	4604      	mov	r4, r0
   d4aca:	f002 fec3 	bl	d7854 <_ZdlPvj>
   d4ace:	4620      	mov	r0, r4
   d4ad0:	bd10      	pop	{r4, pc}

000d4ad2 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4ad2:	b510      	push	{r4, lr}
   d4ad4:	2114      	movs	r1, #20
   d4ad6:	4604      	mov	r4, r0
   d4ad8:	f002 febc 	bl	d7854 <_ZdlPvj>
   d4adc:	4620      	mov	r0, r4
   d4ade:	bd10      	pop	{r4, pc}

000d4ae0 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4ae0:	b510      	push	{r4, lr}
   d4ae2:	2114      	movs	r1, #20
   d4ae4:	4604      	mov	r4, r0
   d4ae6:	f002 feb5 	bl	d7854 <_ZdlPvj>
   d4aea:	4620      	mov	r0, r4
   d4aec:	bd10      	pop	{r4, pc}

000d4aee <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4aee:	f7ff bad4 	b.w	d409a <_ZdlPv>

000d4af2 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4af2:	f7ff bad2 	b.w	d409a <_ZdlPv>

000d4af6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4af6:	f7ff bad0 	b.w	d409a <_ZdlPv>

000d4afa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4afa:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4afc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4afe:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4b00:	689b      	ldr	r3, [r3, #8]
   d4b02:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4b04:	68a3      	ldr	r3, [r4, #8]
   d4b06:	3b01      	subs	r3, #1
   d4b08:	60a3      	str	r3, [r4, #8]
   d4b0a:	b92b      	cbnz	r3, d4b18 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105+0x1e>
            _M_destroy();
   d4b0c:	6823      	ldr	r3, [r4, #0]
   d4b0e:	4620      	mov	r0, r4
   d4b10:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4b16:	4718      	bx	r3
   d4b18:	bd10      	pop	{r4, pc}

000d4b1a <_ZNK8particle10BleAddresseqERKS0_>:
            return 0;
        }
        return addr[i];
    }

    bool operator==(const BleAddress& addr) const {
   d4b1a:	b508      	push	{r3, lr}
        if (this->addr_type == addr.addr_type && !memcmp(this->addr, addr.addr, BLE_SIG_ADDR_LEN)) {
   d4b1c:	7982      	ldrb	r2, [r0, #6]
   d4b1e:	798b      	ldrb	r3, [r1, #6]
   d4b20:	429a      	cmp	r2, r3
   d4b22:	d106      	bne.n	d4b32 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4b24:	2206      	movs	r2, #6
   d4b26:	f002 fffd 	bl	d7b24 <memcmp>
   d4b2a:	fab0 f080 	clz	r0, r0
   d4b2e:	0940      	lsrs	r0, r0, #5
   d4b30:	bd08      	pop	{r3, pc}
            return true;
        }
        return false;
   d4b32:	2000      	movs	r0, #0
    }
   d4b34:	bd08      	pop	{r3, pc}

000d4b36 <_ZN8particle7BleUuidC1Ev>:
static_assert(std::is_pod<BleCharacteristicHandles>::value, "BleCharacteristicHandles is not a POD struct");


class BleUuid {
public:
    BleUuid()
   d4b36:	b510      	push	{r4, lr}
            : uuid_() {
   d4b38:	2214      	movs	r2, #20
static_assert(std::is_pod<BleCharacteristicHandles>::value, "BleCharacteristicHandles is not a POD struct");


class BleUuid {
public:
    BleUuid()
   d4b3a:	4604      	mov	r4, r0
            : uuid_() {
   d4b3c:	2100      	movs	r1, #0
   d4b3e:	f003 f826 	bl	d7b8e <memset>
    }
   d4b42:	4620      	mov	r0, r4
   d4b44:	bd10      	pop	{r4, pc}
	...

000d4b48 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4b48:	b510      	push	{r4, lr}
            locked_(false) {
   d4b4a:	2300      	movs	r3, #0
   d4b4c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4b4e:	4b04      	ldr	r3, [pc, #16]	; (d4b60 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4b50:	4604      	mov	r4, r0
   d4b52:	6818      	ldr	r0, [r3, #0]
   d4b54:	f7ff fd5e 	bl	d4614 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d4b58:	2301      	movs	r3, #1
   d4b5a:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d4b5c:	4620      	mov	r0, r4
   d4b5e:	bd10      	pop	{r4, pc}
   d4b60:	2003e3bc 	.word	0x2003e3bc

000d4b64 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d4b64:	b510      	push	{r4, lr}
        if (locked_) {
   d4b66:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d4b68:	4604      	mov	r4, r0
        if (locked_) {
   d4b6a:	b11b      	cbz	r3, d4b74 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4b6c:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d4b6e:	6818      	ldr	r0, [r3, #0]
   d4b70:	f7ff fd58 	bl	d4624 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d4b74:	4620      	mov	r0, r4
   d4b76:	bd10      	pop	{r4, pc}
   d4b78:	2003e3bc 	.word	0x2003e3bc

000d4b7c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
 */
BleUuid::BleUuid(const BleUuid& uuid)
        : uuid_(uuid.uuid_) {
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
   d4b7c:	b570      	push	{r4, r5, r6, lr}
   d4b7e:	460c      	mov	r4, r1
   d4b80:	4605      	mov	r5, r0
   d4b82:	4616      	mov	r6, r2
        : BleUuid() {
   d4b84:	f7ff ffd7 	bl	d4b36 <_ZN8particle7BleUuidC1Ev>
    if (uuid128 == nullptr) {
   d4b88:	b92c      	cbnz	r4, d4b96 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1a>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4b8a:	2210      	movs	r2, #16
   d4b8c:	4621      	mov	r1, r4
   d4b8e:	4628      	mov	r0, r5
   d4b90:	f002 fffd 	bl	d7b8e <memset>
   d4b94:	e016      	b.n	d4bc4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x48>
    } else {
        if (order == BleUuidOrder::LSB) {
   d4b96:	2e01      	cmp	r6, #1
   d4b98:	d109      	bne.n	d4bae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4b9a:	462b      	mov	r3, r5
   d4b9c:	f104 0210 	add.w	r2, r4, #16
   d4ba0:	f854 1b04 	ldr.w	r1, [r4], #4
   d4ba4:	f843 1b04 	str.w	r1, [r3], #4
   d4ba8:	4294      	cmp	r4, r2
   d4baa:	d1f9      	bne.n	d4ba0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
   d4bac:	e008      	b.n	d4bc0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x44>
   d4bae:	1e6a      	subs	r2, r5, #1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
        : BleUuid() {
    if (uuid128 == nullptr) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
   d4bb0:	230f      	movs	r3, #15
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid_.uuid128[i] = uuid128[j];
   d4bb2:	5ce1      	ldrb	r1, [r4, r3]
   d4bb4:	f802 1f01 	strb.w	r1, [r2, #1]!
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4bb8:	3b01      	subs	r3, #1
   d4bba:	b2db      	uxtb	r3, r3
   d4bbc:	2bff      	cmp	r3, #255	; 0xff
   d4bbe:	d1f8      	bne.n	d4bb2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
                uuid_.uuid128[i] = uuid128[j];
            }
        }
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d4bc0:	2301      	movs	r3, #1
   d4bc2:	742b      	strb	r3, [r5, #16]
    }
}
   d4bc4:	4628      	mov	r0, r5
   d4bc6:	bd70      	pop	{r4, r5, r6, pc}

000d4bc8 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
        : BleUuid() {
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d4bc8:	b538      	push	{r3, r4, r5, lr}
   d4bca:	4604      	mov	r4, r0
   d4bcc:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d4bce:	461a      	mov	r2, r3
   d4bd0:	f7ff ffd4 	bl	d4b7c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
   d4bd4:	7325      	strb	r5, [r4, #12]
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d4bd6:	2301      	movs	r3, #1
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
        : BleUuid(uuid128, order) {
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4bd8:	0a2d      	lsrs	r5, r5, #8
   d4bda:	7365      	strb	r5, [r4, #13]
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d4bdc:	7423      	strb	r3, [r4, #16]
}
   d4bde:	4620      	mov	r0, r4
   d4be0:	bd38      	pop	{r3, r4, r5, pc}

000d4be2 <_ZN8particle7BleUuidC1EPKc>:

BleUuid::BleUuid(const char* uuid)
   d4be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4be6:	4688      	mov	r8, r1
   d4be8:	4607      	mov	r7, r0
        : BleUuid() {
   d4bea:	f7ff ffa4 	bl	d4b36 <_ZN8particle7BleUuidC1Ev>
    if (uuid == nullptr) {
   d4bee:	f1b8 0f00 	cmp.w	r8, #0
   d4bf2:	d002      	beq.n	d4bfa <_ZN8particle7BleUuidC1EPKc+0x18>
   d4bf4:	2600      	movs	r6, #0
   d4bf6:	2510      	movs	r5, #16
   d4bf8:	e00f      	b.n	d4c1a <_ZN8particle7BleUuidC1EPKc+0x38>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4bfa:	2210      	movs	r2, #16
   d4bfc:	4641      	mov	r1, r8
   d4bfe:	4638      	mov	r0, r7
   d4c00:	f002 ffc5 	bl	d7b8e <memset>
   d4c04:	e04a      	b.n	d4c9c <_ZN8particle7BleUuidC1EPKc+0xba>
    } else {
        size_t len = BLE_SIG_UUID_128BIT_LEN;
        for (size_t i = 0; i < strlen(uuid); i++) {
            int8_t hi = hexToNibble(uuid[i]);
   d4c06:	f818 3006 	ldrb.w	r3, [r8, r6]
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4c0a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d4c0e:	b2d1      	uxtb	r1, r2
   d4c10:	2909      	cmp	r1, #9
   d4c12:	d808      	bhi.n	d4c26 <_ZN8particle7BleUuidC1EPKc+0x44>
            if (hi >= 0) {
   d4c14:	1c53      	adds	r3, r2, #1
   d4c16:	d114      	bne.n	d4c42 <_ZN8particle7BleUuidC1EPKc+0x60>
        : BleUuid() {
    if (uuid == nullptr) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        size_t len = BLE_SIG_UUID_128BIT_LEN;
        for (size_t i = 0; i < strlen(uuid); i++) {
   d4c18:	3601      	adds	r6, #1
   d4c1a:	4640      	mov	r0, r8
   d4c1c:	f003 f80a 	bl	d7c34 <strlen>
   d4c20:	4286      	cmp	r6, r0
   d4c22:	d3f0      	bcc.n	d4c06 <_ZN8particle7BleUuidC1EPKc+0x24>
   d4c24:	e033      	b.n	d4c8e <_ZN8particle7BleUuidC1EPKc+0xac>
        return (c - '0');
    } else if (c >= 'a' && c <= 'f') {
   d4c26:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   d4c2a:	2a05      	cmp	r2, #5
   d4c2c:	d802      	bhi.n	d4c34 <_ZN8particle7BleUuidC1EPKc+0x52>
        return (c - 'a' + 0x0a);
   d4c2e:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d4c32:	e7ef      	b.n	d4c14 <_ZN8particle7BleUuidC1EPKc+0x32>
    } else if (c >= 'A' && c <= 'F') {
   d4c34:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   d4c38:	2a05      	cmp	r2, #5
   d4c3a:	d8ed      	bhi.n	d4c18 <_ZN8particle7BleUuidC1EPKc+0x36>
        return (c - 'A' + 0x0a);
   d4c3c:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
   d4c40:	e7e8      	b.n	d4c14 <_ZN8particle7BleUuidC1EPKc+0x32>
            int8_t hi = hexToNibble(uuid[i]);
            if (hi >= 0) {
                uuid_.uuid128[len - 1] = hi << 4;
   d4c42:	0112      	lsls	r2, r2, #4
   d4c44:	3d01      	subs	r5, #1
   d4c46:	b2d4      	uxtb	r4, r2
   d4c48:	557c      	strb	r4, [r7, r5]
                if (++i < strlen(uuid)) {
   d4c4a:	4640      	mov	r0, r8
   d4c4c:	f002 fff2 	bl	d7c34 <strlen>
   d4c50:	3601      	adds	r6, #1
   d4c52:	4286      	cmp	r6, r0
   d4c54:	d2e0      	bcs.n	d4c18 <_ZN8particle7BleUuidC1EPKc+0x36>
                    int8_t lo = hexToNibble(uuid[i]);
   d4c56:	f818 2006 	ldrb.w	r2, [r8, r6]
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4c5a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   d4c5e:	b2d9      	uxtb	r1, r3
   d4c60:	2909      	cmp	r1, #9
   d4c62:	d90e      	bls.n	d4c82 <_ZN8particle7BleUuidC1EPKc+0xa0>
        return (c - '0');
    } else if (c >= 'a' && c <= 'f') {
   d4c64:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   d4c68:	2b05      	cmp	r3, #5
   d4c6a:	d802      	bhi.n	d4c72 <_ZN8particle7BleUuidC1EPKc+0x90>
        return (c - 'a' + 0x0a);
   d4c6c:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
   d4c70:	e007      	b.n	d4c82 <_ZN8particle7BleUuidC1EPKc+0xa0>
    } else if (c >= 'A' && c <= 'F') {
   d4c72:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   d4c76:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d4c78:	bf94      	ite	ls
   d4c7a:	f1a2 0337 	subls.w	r3, r2, #55	; 0x37
    }
    return -1;
   d4c7e:	f04f 33ff 	movhi.w	r3, #4294967295
   d4c82:	b25a      	sxtb	r2, r3
                    if (lo >= 0) {
   d4c84:	3301      	adds	r3, #1
                        uuid_.uuid128[len - 1] |= lo;
   d4c86:	bf1c      	itt	ne
   d4c88:	4314      	orrne	r4, r2
   d4c8a:	557c      	strbne	r4, [r7, r5]
   d4c8c:	e7c4      	b.n	d4c18 <_ZN8particle7BleUuidC1EPKc+0x36>
   d4c8e:	197b      	adds	r3, r7, r5
                }
                len--;
            }
        }
        while (len > 0) {
            uuid_.uuid128[len - 1] = 0x00;
   d4c90:	2200      	movs	r2, #0
                    }
                }
                len--;
            }
        }
        while (len > 0) {
   d4c92:	42bb      	cmp	r3, r7
   d4c94:	d002      	beq.n	d4c9c <_ZN8particle7BleUuidC1EPKc+0xba>
            uuid_.uuid128[len - 1] = 0x00;
   d4c96:	f803 2d01 	strb.w	r2, [r3, #-1]!
                    }
                }
                len--;
            }
        }
        while (len > 0) {
   d4c9a:	e7fa      	b.n	d4c92 <_ZN8particle7BleUuidC1EPKc+0xb0>
            uuid_.uuid128[len - 1] = 0x00;
            len--;
        }
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d4c9c:	2301      	movs	r3, #1
   d4c9e:	743b      	strb	r3, [r7, #16]
}
   d4ca0:	4638      	mov	r0, r7
   d4ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4ca6 <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d4ca6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ~BleUuid() = default;

    bool isValid() const;

    BleUuidType type() const {
        if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d4ca8:	7c03      	ldrb	r3, [r0, #16]
   d4caa:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d4cae:	4604      	mov	r4, r0
   d4cb0:	d00a      	beq.n	d4cc8 <_ZNK8particle7BleUuid7isValidEv+0x22>
    if (type() == BleUuidType::SHORT) {
        return uuid_.uuid16 != 0x0000;
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
   d4cb2:	2210      	movs	r2, #16
   d4cb4:	2100      	movs	r1, #0
   d4cb6:	4668      	mov	r0, sp
   d4cb8:	f002 ff69 	bl	d7b8e <memset>
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
   d4cbc:	2210      	movs	r2, #16
   d4cbe:	4669      	mov	r1, sp
   d4cc0:	4620      	mov	r0, r4
   d4cc2:	f002 ff2f 	bl	d7b24 <memcmp>
   d4cc6:	e000      	b.n	d4cca <_ZNK8particle7BleUuid7isValidEv+0x24>
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
    if (type() == BleUuidType::SHORT) {
        return uuid_.uuid16 != 0x0000;
   d4cc8:	8800      	ldrh	r0, [r0, #0]
   d4cca:	3000      	adds	r0, #0
   d4ccc:	bf18      	it	ne
   d4cce:	2001      	movne	r0, #1
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
    }
}
   d4cd0:	b004      	add	sp, #16
   d4cd2:	bd10      	pop	{r4, pc}

000d4cd4 <_ZNK8particle7BleUuideqERKS0_>:

bool BleUuid::operator==(const BleUuid& uuid) const {
   d4cd4:	b510      	push	{r4, lr}
   d4cd6:	7c04      	ldrb	r4, [r0, #16]
   d4cd8:	f014 0ffd 	tst.w	r4, #253	; 0xfd
   d4cdc:	d006      	beq.n	d4cec <_ZNK8particle7BleUuideqERKS0_+0x18>
    if (type() == BleUuidType::SHORT) {
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4cde:	2210      	movs	r2, #16
   d4ce0:	f002 ff20 	bl	d7b24 <memcmp>
   d4ce4:	fab0 f080 	clz	r0, r0
   d4ce8:	0940      	lsrs	r0, r0, #5
   d4cea:	bd10      	pop	{r4, pc}
    }
}

bool BleUuid::operator==(const BleUuid& uuid) const {
    if (type() == BleUuidType::SHORT) {
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
   d4cec:	8803      	ldrh	r3, [r0, #0]
   d4cee:	8808      	ldrh	r0, [r1, #0]
   d4cf0:	1a1b      	subs	r3, r3, r0
   d4cf2:	4258      	negs	r0, r3
   d4cf4:	4158      	adcs	r0, r3
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
    }
}
   d4cf6:	bd10      	pop	{r4, pc}

000d4cf8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d4cfa:	b18b      	cbz	r3, d4d20 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d4cfc:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4cfe:	1ce5      	adds	r5, r4, #3
   d4d00:	428d      	cmp	r5, r1
   d4d02:	d80f      	bhi.n	d4d24 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d4d04:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d4d06:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d4d08:	5d87      	ldrb	r7, [r0, r6]
   d4d0a:	4297      	cmp	r7, r2
   d4d0c:	d105      	bne.n	d4d1a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d4d0e:	442e      	add	r6, r5
   d4d10:	42b1      	cmp	r1, r6
   d4d12:	d307      	bcc.n	d4d24 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d4d14:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d4d16:	1c68      	adds	r0, r5, #1
                return adsLen;
   d4d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d4d1a:	3501      	adds	r5, #1
   d4d1c:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4d1e:	e7ee      	b.n	d4cfe <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d4d20:	4618      	mov	r0, r3
   d4d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d24:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d4d26:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4d28 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4d28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4d2c:	4604      	mov	r4, r0
   d4d2e:	460e      	mov	r6, r1
   d4d30:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d4d32:	4617      	mov	r7, r2
   d4d34:	2a00      	cmp	r2, #0
   d4d36:	d03a      	beq.n	d4dae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d4d38:	460a      	mov	r2, r1
   d4d3a:	ab01      	add	r3, sp, #4
   d4d3c:	6a01      	ldr	r1, [r0, #32]
   d4d3e:	f7ff ffdb 	bl	d4cf8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d4d42:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d4d46:	6a22      	ldr	r2, [r4, #32]
   d4d48:	bb03      	cbnz	r3, d4d8c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d4d4a:	b1f8      	cbz	r0, d4d8c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4d4c:	1c96      	adds	r6, r2, #2
   d4d4e:	442e      	add	r6, r5
   d4d50:	1a36      	subs	r6, r6, r0
   d4d52:	2e1f      	cmp	r6, #31
   d4d54:	d82b      	bhi.n	d4dae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4d56:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d4d5a:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4d5e:	ebc8 0202 	rsb	r2, r8, r2
   d4d62:	1a12      	subs	r2, r2, r0
   d4d64:	eb00 0108 	add.w	r1, r0, r8
   d4d68:	eb05 0009 	add.w	r0, r5, r9
   d4d6c:	b292      	uxth	r2, r2
   d4d6e:	4421      	add	r1, r4
   d4d70:	4420      	add	r0, r4
   d4d72:	f002 fef1 	bl	d7b58 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d4d76:	1c6b      	adds	r3, r5, #1
   d4d78:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d4d7c:	462a      	mov	r2, r5
   d4d7e:	4639      	mov	r1, r7
   d4d80:	eb04 0009 	add.w	r0, r4, r9
   d4d84:	f002 fedd 	bl	d7b42 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d4d88:	6226      	str	r6, [r4, #32]
   d4d8a:	e010      	b.n	d4dae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d4d8c:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4d8e:	182b      	adds	r3, r5, r0
   d4d90:	2b1f      	cmp	r3, #31
   d4d92:	d80c      	bhi.n	d4dae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d4d94:	1c6b      	adds	r3, r5, #1
   d4d96:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4d98:	4422      	add	r2, r4
   d4d9a:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4d9c:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4d9e:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d4da0:	4420      	add	r0, r4
   d4da2:	462a      	mov	r2, r5
   d4da4:	f002 fecd 	bl	d7b42 <memcpy>
        selfLen_ += len;
   d4da8:	6a22      	ldr	r2, [r4, #32]
   d4daa:	442a      	add	r2, r5
   d4dac:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d4dae:	6a20      	ldr	r0, [r4, #32]
}
   d4db0:	b003      	add	sp, #12
   d4db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4db6 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d4db6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4db8:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d4dba:	4603      	mov	r3, r0
   d4dbc:	f100 021f 	add.w	r2, r0, #31
   d4dc0:	2000      	movs	r0, #0
   d4dc2:	f803 0b01 	strb.w	r0, [r3], #1
   d4dc6:	4293      	cmp	r3, r2
   d4dc8:	f04f 0100 	mov.w	r1, #0
   d4dcc:	d1f9      	bne.n	d4dc2 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4dce:	aa04      	add	r2, sp, #16
   d4dd0:	2306      	movs	r3, #6
   d4dd2:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4dd6:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d4dd8:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4dda:	9100      	str	r1, [sp, #0]
   d4ddc:	4620      	mov	r0, r4
   d4dde:	4619      	mov	r1, r3
   d4de0:	f7ff ffa2 	bl	d4d28 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d4de4:	4620      	mov	r0, r4
   d4de6:	b004      	add	sp, #16
   d4de8:	bd10      	pop	{r4, pc}

000d4dea <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
        selfLen_ += len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::appendLocalName(const char* name) {
   d4dea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4dec:	4605      	mov	r5, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strlen(name), false);
   d4dee:	4608      	mov	r0, r1
        selfLen_ += len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::appendLocalName(const char* name) {
   d4df0:	460c      	mov	r4, r1
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strlen(name), false);
   d4df2:	f002 ff1f 	bl	d7c34 <strlen>
   d4df6:	2300      	movs	r3, #0
   d4df8:	9300      	str	r3, [sp, #0]
   d4dfa:	4622      	mov	r2, r4
   d4dfc:	4603      	mov	r3, r0
   d4dfe:	2109      	movs	r1, #9
   d4e00:	4628      	mov	r0, r5
   d4e02:	f7ff ff91 	bl	d4d28 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d4e06:	b003      	add	sp, #12
   d4e08:	bd30      	pop	{r4, r5, pc}

000d4e0a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4e0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4e0c:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4e0e:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4e10:	ab01      	add	r3, sp, #4
   d4e12:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4e14:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4e16:	f7ff ff6f 	bl	d4cf8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d4e1a:	4605      	mov	r5, r0
   d4e1c:	b178      	cbz	r0, d4e3e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d4e1e:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d4e20:	6a22      	ldr	r2, [r4, #32]
   d4e22:	1829      	adds	r1, r5, r0
   d4e24:	1a12      	subs	r2, r2, r0
   d4e26:	1b52      	subs	r2, r2, r5
   d4e28:	4421      	add	r1, r4
   d4e2a:	4420      	add	r0, r4
   d4e2c:	f002 fe89 	bl	d7b42 <memcpy>
        selfLen_ -= len;
   d4e30:	6a23      	ldr	r3, [r4, #32]
   d4e32:	1b5d      	subs	r5, r3, r5
   d4e34:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d4e36:	4631      	mov	r1, r6
   d4e38:	4620      	mov	r0, r4
   d4e3a:	f7ff ffe6 	bl	d4e0a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d4e3e:	b002      	add	sp, #8
   d4e40:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4e44 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d4e44:	b538      	push	{r3, r4, r5, lr}
              isLocal(true),
              dataCb(nullptr),
              context(nullptr),
              connHandle(BLE_INVALID_CONN_HANDLE),
              svcImpl(nullptr),
              valid_(false) {
   d4e46:	2500      	movs	r5, #0
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d4e48:	4604      	mov	r4, r0
              isLocal(true),
              dataCb(nullptr),
              context(nullptr),
              connHandle(BLE_INVALID_CONN_HANDLE),
              svcImpl(nullptr),
              valid_(false) {
   d4e4a:	f800 5b02 	strb.w	r5, [r0], #2
   d4e4e:	f7ff fe72 	bl	d4b36 <_ZN8particle7BleUuidC1Ev>
   d4e52:	f104 0016 	add.w	r0, r4, #22
   d4e56:	f7ff fe6e 	bl	d4b36 <_ZN8particle7BleUuidC1Ev>
   d4e5a:	4909      	ldr	r1, [pc, #36]	; (d4e80 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d4e5c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4e60:	f7ff fde9 	bl	d4a36 <_ZN6StringC1EPK19__FlashStringHelper>
   d4e64:	2301      	movs	r3, #1
   d4e66:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d4e6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4e6e:	64e5      	str	r5, [r4, #76]	; 0x4c
   d4e70:	6525      	str	r5, [r4, #80]	; 0x50
   d4e72:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   d4e76:	65a5      	str	r5, [r4, #88]	; 0x58
   d4e78:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    }
   d4e7c:	4620      	mov	r0, r4
   d4e7e:	bd38      	pop	{r3, r4, r5, pc}
   d4e80:	000d8062 	.word	0x000d8062

000d4e84 <_ZN8particle17BleCharacteristic8setValueEPKhj>:
        return impl()->properties;
    }
    return BleCharacteristicProperty::NONE;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len) {
   d4e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4e86:	6800      	ldr	r0, [r0, #0]
   d4e88:	460c      	mov	r4, r1
    if (impl() != nullptr) {
   d4e8a:	b3b0      	cbz	r0, d4efa <_ZN8particle17BleCharacteristic8setValueEPKhj+0x76>
            return SYSTEM_ERROR_INVALID_STATE;
        }
    }

    ssize_t setValue(const uint8_t* buf, size_t len) {
        if (buf == nullptr || len == 0) {
   d4e8c:	b371      	cbz	r1, d4eec <_ZN8particle17BleCharacteristic8setValueEPKhj+0x68>
   d4e8e:	b36a      	cbz	r2, d4eec <_ZN8particle17BleCharacteristic8setValueEPKhj+0x68>
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        len = len > BLE_MAX_ATTR_VALUE_PACKET_SIZE ? BLE_MAX_ATTR_VALUE_PACKET_SIZE : len;
        if (isLocal) {
   d4e90:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c

    ssize_t setValue(const uint8_t* buf, size_t len) {
        if (buf == nullptr || len == 0) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        len = len > BLE_MAX_ATTR_VALUE_PACKET_SIZE ? BLE_MAX_ATTR_VALUE_PACKET_SIZE : len;
   d4e94:	2af4      	cmp	r2, #244	; 0xf4
   d4e96:	bf28      	it	cs
   d4e98:	22f4      	movcs	r2, #244	; 0xf4
        if (isLocal) {
   d4e9a:	b13d      	cbz	r5, d4eac <_ZN8particle17BleCharacteristic8setValueEPKhj+0x28>
            return hal_ble_gatt_server_set_characteristic_value(attrHandles.value_handle, buf, len, nullptr);
   d4e9c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
   d4ea0:	2300      	movs	r3, #0
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len) {
    if (impl() != nullptr) {
        return impl()->setValue(buf, len);
    }
    return 0;
}
   d4ea2:	b003      	add	sp, #12
   d4ea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        if (buf == nullptr || len == 0) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        len = len > BLE_MAX_ATTR_VALUE_PACKET_SIZE ? BLE_MAX_ATTR_VALUE_PACKET_SIZE : len;
        if (isLocal) {
            return hal_ble_gatt_server_set_characteristic_value(attrHandles.value_handle, buf, len, nullptr);
   d4ea8:	f7ff bb6e 	b.w	d4588 <hal_ble_gatt_server_set_characteristic_value>
        } else if(valid_) {
   d4eac:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
   d4eb0:	b1f3      	cbz	r3, d4ef0 <_ZN8particle17BleCharacteristic8setValueEPKhj+0x6c>
            if ((properties & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE) {
   d4eb2:	7803      	ldrb	r3, [r0, #0]
   d4eb4:	f043 0108 	orr.w	r1, r3, #8
   d4eb8:	2908      	cmp	r1, #8
   d4eba:	d109      	bne.n	d4ed0 <_ZN8particle17BleCharacteristic8setValueEPKhj+0x4c>
                return hal_ble_gatt_client_write_with_response(connHandle, attrHandles.value_handle, buf, len, nullptr);
   d4ebc:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
   d4ec0:	f8b0 0054 	ldrh.w	r0, [r0, #84]	; 0x54
   d4ec4:	9500      	str	r5, [sp, #0]
   d4ec6:	4613      	mov	r3, r2
   d4ec8:	4622      	mov	r2, r4
   d4eca:	f7ff fb67 	bl	d459c <hal_ble_gatt_client_write_with_response>
   d4ece:	e014      	b.n	d4efa <_ZN8particle17BleCharacteristic8setValueEPKhj+0x76>
            } else if ((properties & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP) {
   d4ed0:	f043 0304 	orr.w	r3, r3, #4
   d4ed4:	2b04      	cmp	r3, #4
   d4ed6:	d10e      	bne.n	d4ef6 <_ZN8particle17BleCharacteristic8setValueEPKhj+0x72>
                return hal_ble_gatt_client_write_without_response(connHandle, attrHandles.value_handle, buf, len, nullptr);
   d4ed8:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
   d4edc:	f8b0 0054 	ldrh.w	r0, [r0, #84]	; 0x54
   d4ee0:	9500      	str	r5, [sp, #0]
   d4ee2:	4613      	mov	r3, r2
   d4ee4:	4622      	mov	r2, r4
   d4ee6:	f7ff fb63 	bl	d45b0 <hal_ble_gatt_client_write_without_response>
   d4eea:	e006      	b.n	d4efa <_ZN8particle17BleCharacteristic8setValueEPKhj+0x76>
        }
    }

    ssize_t setValue(const uint8_t* buf, size_t len) {
        if (buf == nullptr || len == 0) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
   d4eec:	4804      	ldr	r0, [pc, #16]	; (d4f00 <_ZN8particle17BleCharacteristic8setValueEPKhj+0x7c>)
   d4eee:	e004      	b.n	d4efa <_ZN8particle17BleCharacteristic8setValueEPKhj+0x76>
                return hal_ble_gatt_client_write_without_response(connHandle, attrHandles.value_handle, buf, len, nullptr);
            } else {
                return SYSTEM_ERROR_NOT_SUPPORTED;
            }
        } else {
            return SYSTEM_ERROR_INVALID_STATE;
   d4ef0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d4ef4:	e001      	b.n	d4efa <_ZN8particle17BleCharacteristic8setValueEPKhj+0x76>
            if ((properties & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE) {
                return hal_ble_gatt_client_write_with_response(connHandle, attrHandles.value_handle, buf, len, nullptr);
            } else if ((properties & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP) {
                return hal_ble_gatt_client_write_without_response(connHandle, attrHandles.value_handle, buf, len, nullptr);
            } else {
                return SYSTEM_ERROR_NOT_SUPPORTED;
   d4ef6:	f06f 0077 	mvn.w	r0, #119	; 0x77
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len) {
    if (impl() != nullptr) {
        return impl()->setValue(buf, len);
    }
    return 0;
}
   d4efa:	b003      	add	sp, #12
   d4efc:	bd30      	pop	{r4, r5, pc}
   d4efe:	bf00      	nop
   d4f00:	fffffef2 	.word	0xfffffef2

000d4f04 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE>:
    }

    void gattsProcessDisconnected(const BlePeerDevice& peer) {
    }

    void gattsProcessDataWritten(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
   d4f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4f08:	e890 0050 	ldmia.w	r0, {r4, r6}
   d4f0c:	460d      	mov	r5, r1
   d4f0e:	4617      	mov	r7, r2
   d4f10:	4698      	mov	r8, r3
   d4f12:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
        for (auto& service : services_) {
   d4f16:	42a6      	cmp	r6, r4
   d4f18:	d033      	beq.n	d4f82 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x7e>
   d4f1a:	6823      	ldr	r3, [r4, #0]
   d4f1c:	699a      	ldr	r2, [r3, #24]
   d4f1e:	69d9      	ldr	r1, [r3, #28]
   d4f20:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
        }
        return nullptr;
    }

    BleCharacteristic* getCharacteristic(BleAttributeHandle attrHandle) {
        for (auto& characteristic : characteristics_) {
   d4f24:	4291      	cmp	r1, r2
   d4f26:	d01b      	beq.n	d4f60 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d4f28:	6813      	ldr	r3, [r2, #0]
            BleCharacteristicImpl* charImpl = characteristic.impl();
            if (charImpl != nullptr) {
   d4f2a:	b19b      	cbz	r3, d4f54 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x50>
                if (   charImpl->attrHandles.decl_handle == attrHandle
   d4f2c:	f8b3 0042 	ldrh.w	r0, [r3, #66]	; 0x42
   d4f30:	42a8      	cmp	r0, r5
   d4f32:	d011      	beq.n	d4f58 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.value_handle == attrHandle
   d4f34:	f8b3 0044 	ldrh.w	r0, [r3, #68]	; 0x44
   d4f38:	42a8      	cmp	r0, r5
   d4f3a:	d00d      	beq.n	d4f58 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.user_desc_handle == attrHandle
   d4f3c:	f8b3 0046 	ldrh.w	r0, [r3, #70]	; 0x46
   d4f40:	42a8      	cmp	r0, r5
   d4f42:	d009      	beq.n	d4f58 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.cccd_handle == attrHandle
   d4f44:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
   d4f48:	42a8      	cmp	r0, r5
   d4f4a:	d005      	beq.n	d4f58 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.sccd_handle == attrHandle) {
   d4f4c:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
   d4f50:	42a8      	cmp	r0, r5
   d4f52:	d001      	beq.n	d4f58 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
   d4f54:	3208      	adds	r2, #8
   d4f56:	e7e5      	b.n	d4f24 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x20>
    void setValid(bool valid) {
        valid_ = valid;
    }

    void processReceivedData(BleAttributeHandle attrHandle, const uint8_t* data, size_t len, const BlePeerDevice& peer) {
        if (data == nullptr || len == 0) {
   d4f58:	b117      	cbz	r7, d4f60 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d4f5a:	f1b8 0f00 	cmp.w	r8, #0
   d4f5e:	d101      	bne.n	d4f64 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x60>
   d4f60:	3408      	adds	r4, #8

    void gattsProcessDisconnected(const BlePeerDevice& peer) {
    }

    void gattsProcessDataWritten(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
        for (auto& service : services_) {
   d4f62:	e7d8      	b.n	d4f16 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x12>

    void processReceivedData(BleAttributeHandle attrHandle, const uint8_t* data, size_t len, const BlePeerDevice& peer) {
        if (data == nullptr || len == 0) {
            return;
        }
        if (dataCb && attrHandle == attrHandles.value_handle) {
   d4f64:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
   d4f68:	f1b9 0f00 	cmp.w	r9, #0
   d4f6c:	d0f8      	beq.n	d4f60 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d4f6e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   d4f72:	42aa      	cmp	r2, r5
   d4f74:	d1f4      	bne.n	d4f60 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
            dataCb(data, len, peer, context);
   d4f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4f78:	9a08      	ldr	r2, [sp, #32]
   d4f7a:	4641      	mov	r1, r8
   d4f7c:	4638      	mov	r0, r7
   d4f7e:	47c8      	blx	r9
   d4f80:	e7ee      	b.n	d4f60 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d4f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4f86 <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE>:
            }
        }
    }

private:
    BleService* getService(const BleUuid& uuid) {
   d4f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f88:	e890 0050 	ldmia.w	r0, {r4, r6}
   d4f8c:	460f      	mov	r7, r1
   d4f8e:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
        for (auto& service : services_) {
   d4f92:	42b4      	cmp	r4, r6
   d4f94:	4625      	mov	r5, r4
   d4f96:	d008      	beq.n	d4faa <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE+0x24>
            if (service.impl()->uuid == uuid) {
   d4f98:	4639      	mov	r1, r7
   d4f9a:	f854 0b08 	ldr.w	r0, [r4], #8
   d4f9e:	f7ff fe99 	bl	d4cd4 <_ZNK8particle7BleUuideqERKS0_>
   d4fa2:	2800      	cmp	r0, #0
   d4fa4:	d0f5      	beq.n	d4f92 <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE+0xc>
   d4fa6:	4628      	mov	r0, r5
   d4fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return &service;
            }
        }
        return nullptr;
   d4faa:	2000      	movs	r0, #0
    }
   d4fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4fae <_ZN8particle13BlePeerDeviceeqERKS0_>:

const BleAddress& BlePeerDevice::address() const {
    return impl()->address;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) {
   d4fae:	b508      	push	{r3, lr}
   d4fb0:	6800      	ldr	r0, [r0, #0]
   d4fb2:	6809      	ldr	r1, [r1, #0]
    if (impl()->connHandle == device.impl()->connHandle && impl()->address == device.impl()->address) {
   d4fb4:	8ac2      	ldrh	r2, [r0, #22]
   d4fb6:	8acb      	ldrh	r3, [r1, #22]
   d4fb8:	429a      	cmp	r2, r3
   d4fba:	d104      	bne.n	d4fc6 <_ZN8particle13BlePeerDeviceeqERKS0_+0x18>
   d4fbc:	3101      	adds	r1, #1
   d4fbe:	3001      	adds	r0, #1
   d4fc0:	f7ff fdab 	bl	d4b1a <_ZNK8particle10BleAddresseqERKS0_>
   d4fc4:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d4fc6:	2000      	movs	r0, #0
}
   d4fc8:	bd08      	pop	{r3, pc}

000d4fca <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d4fca:	4608      	mov	r0, r1
   d4fcc:	b909      	cbnz	r1, d4fd2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d4fce:	460a      	mov	r2, r1
   d4fd0:	e001      	b.n	d4fd6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d4fd2:	6a09      	ldr	r1, [r1, #32]
   d4fd4:	2200      	movs	r2, #0
   d4fd6:	f7ff baab 	b.w	d4530 <hal_ble_gap_set_advertising_data>

000d4fda <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d4fda:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d4fdc:	460c      	mov	r4, r1
   d4fde:	b911      	cbnz	r1, d4fe6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d4fe0:	460a      	mov	r2, r1
   d4fe2:	4608      	mov	r0, r1
   d4fe4:	e006      	b.n	d4ff4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d4fe6:	2101      	movs	r1, #1
   d4fe8:	4620      	mov	r0, r4
   d4fea:	f7ff ff0e 	bl	d4e0a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d4fee:	6a21      	ldr	r1, [r4, #32]
   d4ff0:	2200      	movs	r2, #0
   d4ff2:	4620      	mov	r0, r4
    }
}
   d4ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d4ff8:	f7ff baa2 	b.w	d4540 <hal_ble_gap_set_scan_response_data>

000d4ffc <_ZNK8particle14BleLocalDevice9advertiseEv>:
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    return hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr);
}

int BleLocalDevice::advertise() const {
   d4ffc:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d4ffe:	a801      	add	r0, sp, #4
   d5000:	f7ff fda2 	bl	d4b48 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d5004:	2000      	movs	r0, #0
   d5006:	f7ff faa3 	bl	d4550 <hal_ble_gap_start_advertising>
   d500a:	4604      	mov	r4, r0
    }
    return hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr);
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d500c:	a801      	add	r0, sp, #4
   d500e:	f7ff fda9 	bl	d4b64 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d5012:	4620      	mov	r0, r4
   d5014:	b002      	add	sp, #8
   d5016:	bd10      	pop	{r4, pc}

000d5018 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5018:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d501a:	4605      	mov	r5, r0
   d501c:	460c      	mov	r4, r1
    WiringBleLock lk;
   d501e:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5020:	4616      	mov	r6, r2
    WiringBleLock lk;
   d5022:	f7ff fd91 	bl	d4b48 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d5026:	4621      	mov	r1, r4
   d5028:	4628      	mov	r0, r5
   d502a:	f7ff ffce 	bl	d4fca <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d502e:	2800      	cmp	r0, #0
   d5030:	db08      	blt.n	d5044 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d5032:	4631      	mov	r1, r6
   d5034:	4628      	mov	r0, r5
   d5036:	f7ff ffd0 	bl	d4fda <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d503a:	2800      	cmp	r0, #0
   d503c:	db02      	blt.n	d5044 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d503e:	4628      	mov	r0, r5
   d5040:	f7ff ffdc 	bl	d4ffc <_ZNK8particle14BleLocalDevice9advertiseEv>
   d5044:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d5046:	a801      	add	r0, sp, #4
   d5048:	f7ff fd8c 	bl	d4b64 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d504c:	4620      	mov	r0, r4
   d504e:	b002      	add	sp, #8
   d5050:	bd70      	pop	{r4, r5, r6, pc}

000d5052 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d5052:	6983      	ldr	r3, [r0, #24]
    return (peripheralProxy_->connected() || centralProxy_->connected());
   d5054:	685b      	ldr	r3, [r3, #4]
   d5056:	2b00      	cmp	r3, #0
   d5058:	dc06      	bgt.n	d5068 <_ZNK8particle14BleLocalDevice9connectedEv+0x16>
   d505a:	69c3      	ldr	r3, [r0, #28]
   d505c:	6858      	ldr	r0, [r3, #4]
   d505e:	2800      	cmp	r0, #0
   d5060:	bfd4      	ite	le
   d5062:	2000      	movle	r0, #0
   d5064:	2001      	movgt	r0, #1
   d5066:	4770      	bx	lr
   d5068:	2001      	movs	r0, #1
}
   d506a:	4770      	bx	lr

000d506c <_ZN8particle14BleLocalDevice14findPeerDeviceEt>:
int BleLocalDevice::addCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context) const {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

BlePeerDevice* BleLocalDevice::findPeerDevice(BleConnectionHandle connHandle) {
   d506c:	b530      	push	{r4, r5, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d506e:	6983      	ldr	r3, [r0, #24]
   d5070:	e893 0014 	ldmia.w	r3, {r2, r4}
   d5074:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    for (auto& central : peripheralProxy_->centrals()) {
   d5078:	42a2      	cmp	r2, r4
   d507a:	4613      	mov	r3, r2
   d507c:	d007      	beq.n	d508e <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x22>
        if (central.impl()->connHandle == connHandle) {
   d507e:	681d      	ldr	r5, [r3, #0]
   d5080:	8aed      	ldrh	r5, [r5, #22]
   d5082:	428d      	cmp	r5, r1
   d5084:	f102 0208 	add.w	r2, r2, #8
   d5088:	d1f6      	bne.n	d5078 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0xc>
   d508a:	4618      	mov	r0, r3
   d508c:	bd30      	pop	{r4, r5, pc}
   d508e:	69c2      	ldr	r2, [r0, #28]
   d5090:	6813      	ldr	r3, [r2, #0]
   d5092:	6852      	ldr	r2, [r2, #4]
   d5094:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
            return &central;
        }
    }
    for (auto& peripheral : centralProxy_->peripherals()) {
   d5098:	429a      	cmp	r2, r3
   d509a:	4618      	mov	r0, r3
   d509c:	d006      	beq.n	d50ac <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x40>
        if (peripheral.impl()->connHandle == connHandle) {
   d509e:	6804      	ldr	r4, [r0, #0]
   d50a0:	8ae4      	ldrh	r4, [r4, #22]
   d50a2:	428c      	cmp	r4, r1
   d50a4:	f103 0308 	add.w	r3, r3, #8
   d50a8:	d1f6      	bne.n	d5098 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x2c>
   d50aa:	bd30      	pop	{r4, r5, pc}
            return &peripheral;
        }
    }
    return nullptr;
   d50ac:	2000      	movs	r0, #0
}
   d50ae:	bd30      	pop	{r4, r5, pc}

000d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d50b0:	b510      	push	{r4, lr}
   d50b2:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d50b4:	6800      	ldr	r0, [r0, #0]
   d50b6:	b128      	cbz	r0, d50c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d50b8:	6843      	ldr	r3, [r0, #4]
   d50ba:	3b01      	subs	r3, #1
   d50bc:	6043      	str	r3, [r0, #4]
   d50be:	b90b      	cbnz	r3, d50c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d50c0:	f7ff fd1b 	bl	d4afa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d50c4:	4620      	mov	r0, r4
   d50c6:	bd10      	pop	{r4, pc}

000d50c8 <_ZN8particle17BleCharacteristicD1Ev>:
    }
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d50c8:	b510      	push	{r4, lr}
   d50ca:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d50cc:	3004      	adds	r0, #4
   d50ce:	f7ff ffef 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d50d2:	4620      	mov	r0, r4
   d50d4:	bd10      	pop	{r4, pc}

000d50d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d50d6:	680b      	ldr	r3, [r1, #0]
   d50d8:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d50da:	b113      	cbz	r3, d50e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d50dc:	685a      	ldr	r2, [r3, #4]
   d50de:	3201      	adds	r2, #1
   d50e0:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d50e2:	4770      	bx	lr

000d50e4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d50e4:	b510      	push	{r4, lr}
   d50e6:	f851 3b04 	ldr.w	r3, [r1], #4
   d50ea:	4604      	mov	r4, r0
   d50ec:	f840 3b04 	str.w	r3, [r0], #4
   d50f0:	f7ff fff1 	bl	d50d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d50f4:	4620      	mov	r0, r4
   d50f6:	bd10      	pop	{r4, pc}

000d50f8 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d50f8:	b510      	push	{r4, lr}
   d50fa:	f851 3b04 	ldr.w	r3, [r1], #4
   d50fe:	4604      	mov	r4, r0
   d5100:	f840 3b04 	str.w	r3, [r0], #4
   d5104:	f7ff ffe7 	bl	d50d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5108:	4620      	mov	r0, r4
   d510a:	bd10      	pop	{r4, pc}

000d510c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d510c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d510e:	6804      	ldr	r4, [r0, #0]
   d5110:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5112:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5114:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5118:	42a6      	cmp	r6, r4
   d511a:	d004      	beq.n	d5126 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d511c:	1d20      	adds	r0, r4, #4
   d511e:	f7ff ffc7 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5122:	3408      	adds	r4, #8
   d5124:	e7f8      	b.n	d5118 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5126:	6828      	ldr	r0, [r5, #0]
   d5128:	f7ff fbb0 	bl	d488c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d512c:	4628      	mov	r0, r5
   d512e:	bd70      	pop	{r4, r5, r6, pc}

000d5130 <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    { struct __invalid_type { }; };

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
   d5130:	b538      	push	{r3, r4, r5, lr}
   d5132:	4604      	mov	r4, r0
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5134:	2010      	movs	r0, #16
   d5136:	780d      	ldrb	r5, [r1, #0]
   d5138:	f7fe ffad 	bl	d4096 <_Znwj>
   d513c:	b120      	cbz	r0, d5148 <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_+0x18>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d513e:	2300      	movs	r3, #0
   d5140:	6003      	str	r3, [r0, #0]
   d5142:	6043      	str	r3, [r0, #4]
   d5144:	6083      	str	r3, [r0, #8]
 */
class BleGattServerImpl {
public:
    BleGattServerImpl() = delete;
    BleGattServerImpl(bool local)
            : local_(local) {
   d5146:	7305      	strb	r5, [r0, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5148:	6020      	str	r0, [r4, #0]
   d514a:	4620      	mov	r0, r4
   d514c:	bd38      	pop	{r3, r4, r5, pc}

000d514e <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   d514e:	b538      	push	{r3, r4, r5, lr}
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5150:	6804      	ldr	r4, [r0, #0]
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   d5152:	4605      	mov	r5, r0
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5154:	b134      	cbz	r4, d5164 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev+0x16>
    }
    ~BleGattServerImpl() = default;
   d5156:	4620      	mov	r0, r4
   d5158:	f7ff ffd8 	bl	d510c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d515c:	2110      	movs	r1, #16
   d515e:	4620      	mov	r0, r4
   d5160:	f002 fb78 	bl	d7854 <_ZdlPvj>
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
	  get_deleter()(__ptr);
	__ptr = pointer();
      }
   d5164:	4628      	mov	r0, r5
   d5166:	bd38      	pop	{r3, r4, r5, pc}

000d5168 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5168:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d516a:	6904      	ldr	r4, [r0, #16]
              connParams(),
              connHandle(BLE_INVALID_CONN_HANDLE),
              rssi(0x7F),
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;
   d516c:	f104 001c 	add.w	r0, r4, #28
   d5170:	f7ff ffed 	bl	d514e <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>
   d5174:	4620      	mov	r0, r4
   d5176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d517a:	f7fe bf8e 	b.w	d409a <_ZdlPv>

000d517e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d517e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5180:	6804      	ldr	r4, [r0, #0]
   d5182:	6843      	ldr	r3, [r0, #4]
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d5184:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5186:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d518a:	42a6      	cmp	r6, r4
   d518c:	d004      	beq.n	d5198 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d518e:	1d20      	adds	r0, r4, #4
   d5190:	f7ff ff8e 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5194:	3408      	adds	r4, #8
   d5196:	e7f8      	b.n	d518a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5198:	2300      	movs	r3, #0
   d519a:	606b      	str	r3, [r5, #4]
   d519c:	bd70      	pop	{r4, r5, r6, pc}

000d519e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d519e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d51a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d51a2:	4606      	mov	r6, r0
   d51a4:	460c      	mov	r4, r1
   d51a6:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d51a8:	d914      	bls.n	d51d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d51aa:	4290      	cmp	r0, r2
   d51ac:	d213      	bcs.n	d51d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d51ae:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d51b2:	1a6c      	subs	r4, r5, r1
   d51b4:	f1a1 0708 	sub.w	r7, r1, #8
   d51b8:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d51ba:	42af      	cmp	r7, r5
   d51bc:	d018      	beq.n	d51f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d51be:	b11c      	cbz	r4, d51c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d51c0:	4629      	mov	r1, r5
   d51c2:	4620      	mov	r0, r4
   d51c4:	f7ff ff98 	bl	d50f8 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d51c8:	1d28      	adds	r0, r5, #4
   d51ca:	f7ff ff71 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d51ce:	3d08      	subs	r5, #8
   d51d0:	3c08      	subs	r4, #8
   d51d2:	e7f2      	b.n	d51ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d51d4:	d00c      	beq.n	d51f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d51d6:	42ac      	cmp	r4, r5
   d51d8:	d00a      	beq.n	d51f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d51da:	b11e      	cbz	r6, d51e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d51dc:	4621      	mov	r1, r4
   d51de:	4630      	mov	r0, r6
   d51e0:	f7ff ff8a 	bl	d50f8 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d51e4:	1d20      	adds	r0, r4, #4
   d51e6:	f7ff ff63 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d51ea:	3408      	adds	r4, #8
   d51ec:	3608      	adds	r6, #8
   d51ee:	e7f2      	b.n	d51d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d51f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d51f2 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE>:
        if (peripherals_.size() < BLE_MAX_CENTRAL_COUNT) {
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
   d51f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d51f4:	680b      	ldr	r3, [r1, #0]
   d51f6:	69da      	ldr	r2, [r3, #28]
   d51f8:	460e      	mov	r6, r1
   d51fa:	6813      	ldr	r3, [r2, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d51fc:	6851      	ldr	r1, [r2, #4]
   d51fe:	4605      	mov	r5, r0
   d5200:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d5204:	2400      	movs	r4, #0
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d5206:	4299      	cmp	r1, r3
   d5208:	d00d      	beq.n	d5226 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x34>
   d520a:	6818      	ldr	r0, [r3, #0]
   d520c:	6982      	ldr	r2, [r0, #24]
   d520e:	69c0      	ldr	r0, [r0, #28]
   d5210:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
            for (auto& characteristic : service.impl()->characteristics()) {
   d5214:	4290      	cmp	r0, r2
   d5216:	d004      	beq.n	d5222 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x30>
   d5218:	f852 7b08 	ldr.w	r7, [r2], #8
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d521c:	f887 405c 	strb.w	r4, [r7, #92]	; 0x5c
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
            for (auto& characteristic : service.impl()->characteristics()) {
   d5220:	e7f8      	b.n	d5214 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x22>
   d5222:	3308      	adds	r3, #8
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d5224:	e7ef      	b.n	d5206 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x14>
   d5226:	6833      	ldr	r3, [r6, #0]
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
        connHandle = BLE_INVALID_CONN_HANDLE;
   d5228:	f64f 71ff 	movw	r1, #65535	; 0xffff
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d522c:	2200      	movs	r2, #0
        connHandle = BLE_INVALID_CONN_HANDLE;
   d522e:	82d9      	strh	r1, [r3, #22]
        rssi = 0x7F;
   d5230:	217f      	movs	r1, #127	; 0x7f
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d5232:	701a      	strb	r2, [r3, #0]
        connHandle = BLE_INVALID_CONN_HANDLE;
        rssi = 0x7F;
   d5234:	7619      	strb	r1, [r3, #24]
        connParams = {};
   d5236:	f8c3 200a 	str.w	r2, [r3, #10]
   d523a:	f8c3 200e 	str.w	r2, [r3, #14]
   d523e:	f8c3 2012 	str.w	r2, [r3, #18]
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
   d5242:	682c      	ldr	r4, [r5, #0]
   d5244:	686b      	ldr	r3, [r5, #4]
   d5246:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d524a:	42bc      	cmp	r4, r7
   d524c:	d016      	beq.n	d527c <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x8a>
            if (*p == value) {
   d524e:	4631      	mov	r1, r6
   d5250:	4620      	mov	r0, r4
   d5252:	f7ff feac 	bl	d4fae <_ZN8particle13BlePeerDeviceeqERKS0_>
   d5256:	b908      	cbnz	r0, d525c <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x6a>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5258:	3408      	adds	r4, #8
   d525a:	e7f6      	b.n	d524a <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x58>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d525c:	b174      	cbz	r4, d527c <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x8a>
   d525e:	1d20      	adds	r0, r4, #4
   d5260:	f7ff ff26 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d5264:	682b      	ldr	r3, [r5, #0]
   d5266:	686a      	ldr	r2, [r5, #4]
   d5268:	f104 0108 	add.w	r1, r4, #8
   d526c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5270:	4620      	mov	r0, r4
   d5272:	f7ff ff94 	bl	d519e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5276:	686b      	ldr	r3, [r5, #4]
   d5278:	3b01      	subs	r3, #1
   d527a:	606b      	str	r3, [r5, #4]
   d527c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d527e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d527e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5280:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5282:	6846      	ldr	r6, [r0, #4]
   d5284:	4668      	mov	r0, sp
   d5286:	f7ff ff37 	bl	d50f8 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d528a:	6867      	ldr	r7, [r4, #4]
   d528c:	68a3      	ldr	r3, [r4, #8]
   d528e:	429f      	cmp	r7, r3
   d5290:	db14      	blt.n	d52bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3e>
   d5292:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5294:	2f00      	cmp	r7, #0
   d5296:	dd0b      	ble.n	d52b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x32>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5298:	00f8      	lsls	r0, r7, #3
   d529a:	f7ff faef 	bl	d487c <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d529e:	4605      	mov	r5, r0
   d52a0:	b300      	cbz	r0, d52e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x66>
                return false;
            }
            move(d, data_, data_ + size_);
   d52a2:	e894 0006 	ldmia.w	r4, {r1, r2}
   d52a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d52aa:	f7ff ff78 	bl	d519e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d52ae:	e000      	b.n	d52b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x34>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d52b0:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d52b2:	6820      	ldr	r0, [r4, #0]
   d52b4:	f7ff faea 	bl	d488c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d52b8:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d52ba:	60a7      	str	r7, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d52bc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d52be:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d52c0:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d52c4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d52c8:	4629      	mov	r1, r5
   d52ca:	f105 0008 	add.w	r0, r5, #8
   d52ce:	f7ff ff66 	bl	d519e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d52d2:	b11d      	cbz	r5, d52dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5e>
   d52d4:	4669      	mov	r1, sp
   d52d6:	4628      	mov	r0, r5
   d52d8:	f7ff ff0e 	bl	d50f8 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d52dc:	6863      	ldr	r3, [r4, #4]
   d52de:	3301      	adds	r3, #1
   d52e0:	6063      	str	r3, [r4, #4]
   d52e2:	2501      	movs	r5, #1
   d52e4:	a801      	add	r0, sp, #4
   d52e6:	f7ff fee3 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d52ea:	4628      	mov	r0, r5
   d52ec:	b003      	add	sp, #12
   d52ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d52f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d52f0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d52f2:	6804      	ldr	r4, [r0, #0]
   d52f4:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d52f6:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d52f8:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d52fc:	42a6      	cmp	r6, r4
   d52fe:	d004      	beq.n	d530a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0x1a>
   d5300:	1d20      	adds	r0, r4, #4
   d5302:	f7ff fed5 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5306:	3408      	adds	r4, #8
   d5308:	e7f8      	b.n	d52fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d530a:	6828      	ldr	r0, [r5, #0]
   d530c:	f7ff fabe 	bl	d488c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5310:	4628      	mov	r0, r5
   d5312:	bd70      	pop	{r4, r5, r6, pc}

000d5314 <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5314:	b510      	push	{r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5316:	4604      	mov	r4, r0
   d5318:	b138      	cbz	r0, d532a <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31+0x16>
 * BlePeripheralImpl definition
 */
class BlePeripheralImpl {
public:
    BlePeripheralImpl() = default;
    ~BlePeripheralImpl() = default;
   d531a:	f7ff ffe9 	bl	d52f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
   d531e:	4620      	mov	r0, r4
   d5320:	210c      	movs	r1, #12
      }
   d5322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5326:	f002 ba95 	b.w	d7854 <_ZdlPvj>
   d532a:	bd10      	pop	{r4, pc}

000d532c <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d532c:	b510      	push	{r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d532e:	4604      	mov	r4, r0
   d5330:	b138      	cbz	r0, d5342 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32+0x16>
 * BleCentralImpl definition
 */
class BleCentralImpl {
public:
    BleCentralImpl() = default;
    ~BleCentralImpl() = default;
   d5332:	f7ff ffdd 	bl	d52f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
   d5336:	4620      	mov	r0, r4
   d5338:	210c      	movs	r1, #12
      }
   d533a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d533e:	f002 ba89 	b.w	d7854 <_ZdlPvj>
   d5342:	bd10      	pop	{r4, pc}

000d5344 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5344:	b537      	push	{r0, r1, r2, r4, r5, lr}
        : connectedCb_(nullptr),
          disconnectedCb_(nullptr),
          connectedContext(nullptr),
          disconnectedContext(nullptr) {
   d5346:	2500      	movs	r5, #0


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5348:	4604      	mov	r4, r0
        : connectedCb_(nullptr),
          disconnectedCb_(nullptr),
          connectedContext(nullptr),
          disconnectedContext(nullptr) {
   d534a:	6005      	str	r5, [r0, #0]
   d534c:	6045      	str	r5, [r0, #4]
   d534e:	6085      	str	r5, [r0, #8]
   d5350:	60c5      	str	r5, [r0, #12]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5352:	6105      	str	r5, [r0, #16]
   d5354:	6145      	str	r5, [r0, #20]
   d5356:	6185      	str	r5, [r0, #24]
   d5358:	61c5      	str	r5, [r0, #28]
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d535a:	4628      	mov	r0, r5
   d535c:	f7ff f8d8 	bl	d4510 <hal_ble_stack_init>
   d5360:	b120      	cbz	r0, d536c <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d5362:	4a25      	ldr	r2, [pc, #148]	; (d53f8 <_ZN8particle14BleLocalDeviceC1Ev+0xb4>)
   d5364:	4629      	mov	r1, r5
   d5366:	200a      	movs	r0, #10
   d5368:	f7ff f9f4 	bl	d4754 <panic_>

    // The following members must not be in the initializer list, since it may call
    // BLE HAL APIs and BLE stack must be initialized previous to these APIs.
    gattsProxy_ = std::make_unique<BleGattServerImpl>(true);
   d536c:	2301      	movs	r3, #1
   d536e:	f10d 0103 	add.w	r1, sp, #3
   d5372:	a801      	add	r0, sp, #4
   d5374:	f88d 3003 	strb.w	r3, [sp, #3]
   d5378:	f7ff feda 	bl	d5130 <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d537c:	6925      	ldr	r5, [r4, #16]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d537e:	9b01      	ldr	r3, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5380:	6123      	str	r3, [r4, #16]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
   d5382:	2200      	movs	r2, #0
   d5384:	9201      	str	r2, [sp, #4]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5386:	b135      	cbz	r5, d5396 <_ZN8particle14BleLocalDeviceC1Ev+0x52>
public:
    BleGattServerImpl() = delete;
    BleGattServerImpl(bool local)
            : local_(local) {
    }
    ~BleGattServerImpl() = default;
   d5388:	4628      	mov	r0, r5
   d538a:	f7ff febf 	bl	d510c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d538e:	2110      	movs	r1, #16
   d5390:	4628      	mov	r0, r5
   d5392:	f002 fa5f 	bl	d7854 <_ZdlPvj>
          disconnectedContext(nullptr) {
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);

    // The following members must not be in the initializer list, since it may call
    // BLE HAL APIs and BLE stack must be initialized previous to these APIs.
    gattsProxy_ = std::make_unique<BleGattServerImpl>(true);
   d5396:	a801      	add	r0, sp, #4
   d5398:	f7ff fed9 	bl	d514e <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d539c:	2001      	movs	r0, #1
   d539e:	f7fe fe7a 	bl	d4096 <_Znwj>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53a2:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d53a4:	6160      	str	r0, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d53a6:	b11b      	cbz	r3, d53b0 <_ZN8particle14BleLocalDeviceC1Ev+0x6c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d53a8:	2101      	movs	r1, #1
   d53aa:	4618      	mov	r0, r3
   d53ac:	f002 fa52 	bl	d7854 <_ZdlPvj>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d53b0:	200c      	movs	r0, #12
   d53b2:	f7fe fe70 	bl	d4096 <_Znwj>
   d53b6:	4603      	mov	r3, r0
   d53b8:	b118      	cbz	r0, d53c2 <_ZN8particle14BleLocalDeviceC1Ev+0x7e>
   d53ba:	2200      	movs	r2, #0
   d53bc:	6002      	str	r2, [r0, #0]
   d53be:	6042      	str	r2, [r0, #4]
   d53c0:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53c2:	69a0      	ldr	r0, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
   d53c4:	61a3      	str	r3, [r4, #24]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d53c6:	b108      	cbz	r0, d53cc <_ZN8particle14BleLocalDeviceC1Ev+0x88>
	  get_deleter()(__p);
   d53c8:	f7ff ffa4 	bl	d5314 <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d53cc:	200c      	movs	r0, #12
   d53ce:	f7fe fe62 	bl	d4096 <_Znwj>
   d53d2:	4603      	mov	r3, r0
   d53d4:	b118      	cbz	r0, d53de <_ZN8particle14BleLocalDeviceC1Ev+0x9a>
   d53d6:	2200      	movs	r2, #0
   d53d8:	6002      	str	r2, [r0, #0]
   d53da:	6042      	str	r2, [r0, #4]
   d53dc:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53de:	69e0      	ldr	r0, [r4, #28]
      __a = _GLIBCXX_MOVE(__b);
   d53e0:	61e3      	str	r3, [r4, #28]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d53e2:	b108      	cbz	r0, d53e8 <_ZN8particle14BleLocalDeviceC1Ev+0xa4>
	  get_deleter()(__p);
   d53e4:	f7ff ffa2 	bl	d532c <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>
    gattcProxy_ = std::make_unique<BleGattClientImpl>();
    peripheralProxy_ = std::make_unique<BlePeripheralImpl>();
    centralProxy_ = std::make_unique<BleCentralImpl>();

    hal_ble_set_callback_on_events(onBleEvents, this, nullptr);
   d53e8:	2200      	movs	r2, #0
   d53ea:	4621      	mov	r1, r4
   d53ec:	4803      	ldr	r0, [pc, #12]	; (d53fc <_ZN8particle14BleLocalDeviceC1Ev+0xb8>)
   d53ee:	f7ff f897 	bl	d4520 <hal_ble_set_callback_on_events>
}
   d53f2:	4620      	mov	r0, r4
   d53f4:	b003      	add	sp, #12
   d53f6:	bd30      	pop	{r4, r5, pc}
   d53f8:	000d44f1 	.word	0x000d44f1
   d53fc:	000d5821 	.word	0x000d5821

000d5400 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5400:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d5402:	4c0a      	ldr	r4, [pc, #40]	; (d542c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d5404:	6823      	ldr	r3, [r4, #0]
   d5406:	07db      	lsls	r3, r3, #31
   d5408:	d40e      	bmi.n	d5428 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d540a:	4620      	mov	r0, r4
   d540c:	f7fe fe54 	bl	d40b8 <__cxa_guard_acquire>
   d5410:	b150      	cbz	r0, d5428 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5412:	4807      	ldr	r0, [pc, #28]	; (d5430 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5414:	f7ff ff96 	bl	d5344 <_ZN8particle14BleLocalDeviceC1Ev>
   d5418:	4620      	mov	r0, r4
   d541a:	f7fe fe52 	bl	d40c2 <__cxa_guard_release>
   d541e:	4a05      	ldr	r2, [pc, #20]	; (d5434 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5420:	4905      	ldr	r1, [pc, #20]	; (d5438 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5422:	4803      	ldr	r0, [pc, #12]	; (d5430 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5424:	f002 fa08 	bl	d7838 <__aeabi_atexit>
    return instance;
}
   d5428:	4801      	ldr	r0, [pc, #4]	; (d5430 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d542a:	bd10      	pop	{r4, pc}
   d542c:	2003e3b4 	.word	0x2003e3b4
   d5430:	2003e394 	.word	0x2003e394
   d5434:	2003e32c 	.word	0x2003e32c
   d5438:	000d543d 	.word	0x000d543d

000d543c <_ZN8particle14BleLocalDeviceD1Ev>:

    static BleLocalDevice& getInstance();

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d543c:	b510      	push	{r4, lr}
   d543e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5440:	69c0      	ldr	r0, [r0, #28]
   d5442:	b108      	cbz	r0, d5448 <_ZN8particle14BleLocalDeviceD1Ev+0xc>
	  get_deleter()(__ptr);
   d5444:	f7ff ff72 	bl	d532c <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5448:	69a0      	ldr	r0, [r4, #24]
   d544a:	b108      	cbz	r0, d5450 <_ZN8particle14BleLocalDeviceD1Ev+0x14>
	  get_deleter()(__ptr);
   d544c:	f7ff ff62 	bl	d5314 <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5450:	6960      	ldr	r0, [r4, #20]
   d5452:	b110      	cbz	r0, d545a <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5454:	2101      	movs	r1, #1
   d5456:	f002 f9fd 	bl	d7854 <_ZdlPvj>
   d545a:	f104 0010 	add.w	r0, r4, #16
   d545e:	f7ff fe76 	bl	d514e <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>
   d5462:	4620      	mov	r0, r4
   d5464:	bd10      	pop	{r4, pc}

000d5466 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5466:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d546a:	4606      	mov	r6, r0
   d546c:	460c      	mov	r4, r1
   d546e:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5470:	d914      	bls.n	d549c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5472:	4290      	cmp	r0, r2
   d5474:	d213      	bcs.n	d549e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5476:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d547a:	1a6c      	subs	r4, r5, r1
   d547c:	f1a1 0708 	sub.w	r7, r1, #8
   d5480:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5482:	42af      	cmp	r7, r5
   d5484:	d018      	beq.n	d54b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5486:	b11c      	cbz	r4, d5490 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d5488:	4629      	mov	r1, r5
   d548a:	4620      	mov	r0, r4
   d548c:	f7ff fe2a 	bl	d50e4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5490:	1d28      	adds	r0, r5, #4
   d5492:	f7ff fe0d 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5496:	3d08      	subs	r5, #8
   d5498:	3c08      	subs	r4, #8
   d549a:	e7f2      	b.n	d5482 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d549c:	d00c      	beq.n	d54b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d549e:	42ac      	cmp	r4, r5
   d54a0:	d00a      	beq.n	d54b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d54a2:	b11e      	cbz	r6, d54ac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d54a4:	4621      	mov	r1, r4
   d54a6:	4630      	mov	r0, r6
   d54a8:	f7ff fe1c 	bl	d50e4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d54ac:	1d20      	adds	r0, r4, #4
   d54ae:	f7ff fdff 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d54b2:	3408      	adds	r4, #8
   d54b4:	3608      	adds	r6, #8
   d54b6:	e7f2      	b.n	d549e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d54b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d54ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d54ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d54bc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d54be:	6846      	ldr	r6, [r0, #4]
   d54c0:	4668      	mov	r0, sp
   d54c2:	f7ff fe0f 	bl	d50e4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d54c6:	6867      	ldr	r7, [r4, #4]
   d54c8:	68a3      	ldr	r3, [r4, #8]
   d54ca:	429f      	cmp	r7, r3
   d54cc:	db14      	blt.n	d54f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x3e>
   d54ce:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d54d0:	2f00      	cmp	r7, #0
   d54d2:	dd0b      	ble.n	d54ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x32>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d54d4:	00f8      	lsls	r0, r7, #3
   d54d6:	f7ff f9d1 	bl	d487c <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d54da:	4605      	mov	r5, r0
   d54dc:	b300      	cbz	r0, d5520 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x66>
                return false;
            }
            move(d, data_, data_ + size_);
   d54de:	e894 0006 	ldmia.w	r4, {r1, r2}
   d54e2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d54e6:	f7ff ffbe 	bl	d5466 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d54ea:	e000      	b.n	d54ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x34>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d54ec:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d54ee:	6820      	ldr	r0, [r4, #0]
   d54f0:	f7ff f9cc 	bl	d488c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d54f4:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d54f6:	60a7      	str	r7, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d54f8:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d54fa:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d54fc:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d5500:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5504:	4629      	mov	r1, r5
   d5506:	f105 0008 	add.w	r0, r5, #8
   d550a:	f7ff ffac 	bl	d5466 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d550e:	b11d      	cbz	r5, d5518 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x5e>
   d5510:	4669      	mov	r1, sp
   d5512:	4628      	mov	r0, r5
   d5514:	f7ff fde6 	bl	d50e4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d5518:	6863      	ldr	r3, [r4, #4]
   d551a:	3301      	adds	r3, #1
   d551c:	6063      	str	r3, [r4, #4]
   d551e:	2501      	movs	r5, #1
   d5520:	a801      	add	r0, sp, #4
   d5522:	f7ff fdc5 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5526:	4628      	mov	r0, r5
   d5528:	b003      	add	sp, #12
   d552a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d552c <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE>:
            }
        }
        return nullptr;
    }

    int addCharacteristic(BleCharacteristic& characteristic) {
   d552c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5530:	680c      	ldr	r4, [r1, #0]
   d5532:	b08b      	sub	sp, #44	; 0x2c
   d5534:	4606      	mov	r6, r0
   d5536:	460f      	mov	r7, r1
        BleCharacteristicImpl* charImpl = characteristic.impl();
        if (charImpl == nullptr || contains(characteristic) || charImpl->properties == BleCharacteristicProperty::NONE) {
   d5538:	b314      	cbz	r4, d5580 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x54>
   d553a:	6985      	ldr	r5, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d553c:	69c3      	ldr	r3, [r0, #28]
            dataCb(data, len, peer, context);
        }
    }

    bool operator==(const BleCharacteristicImpl& impl) {
        if (uuid == impl.uuid
   d553e:	f104 0a02 	add.w	sl, r4, #2
   d5542:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
                && svcUuid == impl.svcUuid
   d5546:	f104 0b16 	add.w	fp, r4, #22
    BleAttributeHandle endHandle;

private:
    bool contains(const BleCharacteristic& characteristic) {
        if (characteristic.impl() != nullptr) {
            for (const auto& stubChar : characteristics_) {
   d554a:	45a8      	cmp	r8, r5
   d554c:	d016      	beq.n	d557c <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x50>
   d554e:	f8d5 9000 	ldr.w	r9, [r5]
            dataCb(data, len, peer, context);
        }
    }

    bool operator==(const BleCharacteristicImpl& impl) {
        if (uuid == impl.uuid
   d5552:	4650      	mov	r0, sl
   d5554:	f109 0102 	add.w	r1, r9, #2
   d5558:	f7ff fbbc 	bl	d4cd4 <_ZNK8particle7BleUuideqERKS0_>
                && svcUuid == impl.svcUuid
                && isLocal == impl.isLocal) {
   d555c:	2800      	cmp	r0, #0
   d555e:	d06b      	beq.n	d5638 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x10c>
        }
    }

    bool operator==(const BleCharacteristicImpl& impl) {
        if (uuid == impl.uuid
                && svcUuid == impl.svcUuid
   d5560:	f109 0116 	add.w	r1, r9, #22
   d5564:	4658      	mov	r0, fp
   d5566:	f7ff fbb5 	bl	d4cd4 <_ZNK8particle7BleUuideqERKS0_>
   d556a:	2800      	cmp	r0, #0
   d556c:	d064      	beq.n	d5638 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x10c>
                && isLocal == impl.isLocal) {
   d556e:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d5572:	f899 303c 	ldrb.w	r3, [r9, #60]	; 0x3c
   d5576:	429a      	cmp	r2, r3
   d5578:	d15e      	bne.n	d5638 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x10c>
   d557a:	e001      	b.n	d5580 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x54>
        return nullptr;
    }

    int addCharacteristic(BleCharacteristic& characteristic) {
        BleCharacteristicImpl* charImpl = characteristic.impl();
        if (charImpl == nullptr || contains(characteristic) || charImpl->properties == BleCharacteristicProperty::NONE) {
   d557c:	7823      	ldrb	r3, [r4, #0]
   d557e:	b90b      	cbnz	r3, d5584 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x58>
            return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5580:	4830      	ldr	r0, [pc, #192]	; (d5644 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x118>)
   d5582:	e05b      	b.n	d563c <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x110>
        }
        if (characteristic.impl()->isLocal) {
   d5584:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   d5588:	2b00      	cmp	r3, #0
   d558a:	d041      	beq.n	d5610 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0xe4>
            return SYSTEM_ERROR_INVALID_STATE;
        }
    }

    void assignUuidIfNeeded() {
        if (!uuid.isValid()) {
   d558c:	3402      	adds	r4, #2
   d558e:	4620      	mov	r0, r4
   d5590:	f7ff fb89 	bl	d4ca6 <_ZNK8particle7BleUuid7isValidEv>
   d5594:	b9b0      	cbnz	r0, d55c4 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x98>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d5596:	4b2c      	ldr	r3, [pc, #176]	; (d5648 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x11c>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5598:	492c      	ldr	r1, [pc, #176]	; (d564c <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x120>)
    }

    void assignUuidIfNeeded() {
        if (!uuid.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d559a:	881a      	ldrh	r2, [r3, #0]
   d559c:	3201      	adds	r2, #1
   d559e:	b292      	uxth	r2, r2
   d55a0:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d55a2:	a801      	add	r0, sp, #4
   d55a4:	2301      	movs	r3, #1
   d55a6:	f7ff fb0f 	bl	d4bc8 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            uuid = newUuid;
   d55aa:	ad05      	add	r5, sp, #20
   d55ac:	aa01      	add	r2, sp, #4
   d55ae:	4613      	mov	r3, r2
   d55b0:	cb03      	ldmia	r3!, {r0, r1}
   d55b2:	42ab      	cmp	r3, r5
   d55b4:	6020      	str	r0, [r4, #0]
   d55b6:	6061      	str	r1, [r4, #4]
   d55b8:	461a      	mov	r2, r3
   d55ba:	f104 0408 	add.w	r4, r4, #8
   d55be:	d1f6      	bne.n	d55ae <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x82>
   d55c0:	6818      	ldr	r0, [r3, #0]
   d55c2:	6020      	str	r0, [r4, #0]
        if (charImpl == nullptr || contains(characteristic) || charImpl->properties == BleCharacteristicProperty::NONE) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        if (characteristic.impl()->isLocal) {
            characteristic.impl()->assignUuidIfNeeded();
            hal_ble_char_init_t char_init = {};
   d55c4:	2424      	movs	r4, #36	; 0x24
   d55c6:	4622      	mov	r2, r4
   d55c8:	2100      	movs	r1, #0
   d55ca:	a801      	add	r0, sp, #4
   d55cc:	f002 fadf 	bl	d7b8e <memset>
            char_init.size = sizeof(hal_ble_char_init_t);
   d55d0:	f8ad 4006 	strh.w	r4, [sp, #6]
   d55d4:	683c      	ldr	r4, [r7, #0]
            char_init.uuid = characteristic.impl()->uuid.UUID();
   d55d6:	aa04      	add	r2, sp, #16
   d55d8:	1ca3      	adds	r3, r4, #2
   d55da:	f104 0e12 	add.w	lr, r4, #18
   d55de:	6818      	ldr	r0, [r3, #0]
   d55e0:	6859      	ldr	r1, [r3, #4]
   d55e2:	4615      	mov	r5, r2
   d55e4:	c503      	stmia	r5!, {r0, r1}
   d55e6:	3308      	adds	r3, #8
   d55e8:	4573      	cmp	r3, lr
   d55ea:	462a      	mov	r2, r5
   d55ec:	d1f7      	bne.n	d55de <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0xb2>
   d55ee:	6818      	ldr	r0, [r3, #0]
   d55f0:	6028      	str	r0, [r5, #0]
            char_init.properties = static_cast<uint8_t>(characteristic.impl()->properties);
   d55f2:	7823      	ldrb	r3, [r4, #0]
   d55f4:	f88d 3008 	strb.w	r3, [sp, #8]
            char_init.service_handle = startHandle;
   d55f8:	8ab3      	ldrh	r3, [r6, #20]
   d55fa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            char_init.description = characteristic.impl()->description.c_str();
   d55fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5600:	9303      	str	r3, [sp, #12]
            int ret = hal_ble_gatt_server_add_characteristic(&char_init, &characteristic.impl()->attrHandles, nullptr);
   d5602:	2200      	movs	r2, #0
   d5604:	f104 013e 	add.w	r1, r4, #62	; 0x3e
   d5608:	a801      	add	r0, sp, #4
   d560a:	f7fe ffb3 	bl	d4574 <hal_ble_gatt_server_add_characteristic>
            if (ret != SYSTEM_ERROR_NONE) {
   d560e:	b9a8      	cbnz	r0, d563c <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x110>
   d5610:	683b      	ldr	r3, [r7, #0]
                return ret;
            }
        }
        characteristic.impl()->svcImpl = this;
   d5612:	659e      	str	r6, [r3, #88]	; 0x58
   d5614:	683b      	ldr	r3, [r7, #0]
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d5616:	2201      	movs	r2, #1
   d5618:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
   d561c:	4639      	mov	r1, r7
   d561e:	a801      	add	r0, sp, #4
   d5620:	f7ff fd60 	bl	d50e4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            }
        }
        characteristic.impl()->svcImpl = this;
        characteristic.impl()->setValid(true);
        LOG_DEBUG(TRACE, "characteristics.append(characteristic)");
        characteristics_.append(characteristic);
   d5624:	a901      	add	r1, sp, #4
   d5626:	f106 0018 	add.w	r0, r6, #24
   d562a:	f7ff ff46 	bl	d54ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d562e:	a802      	add	r0, sp, #8
   d5630:	f7ff fd3e 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return SYSTEM_ERROR_NONE;
   d5634:	2000      	movs	r0, #0
   d5636:	e001      	b.n	d563c <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x110>
   d5638:	3508      	adds	r5, #8
   d563a:	e786      	b.n	d554a <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x1e>
    }
   d563c:	b00b      	add	sp, #44	; 0x2c
   d563e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5642:	bf00      	nop
   d5644:	fffffef2 	.word	0xfffffef2
   d5648:	2003e3b8 	.word	0x2003e3b8
   d564c:	000d7f58 	.word	0x000d7f58

000d5650 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5650:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5652:	b570      	push	{r4, r5, r6, lr}
   d5654:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5656:	d91a      	bls.n	d568e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5658:	4290      	cmp	r0, r2
   d565a:	d219      	bcs.n	d5690 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d565c:	f1a1 0608 	sub.w	r6, r1, #8
   d5660:	1a51      	subs	r1, r2, r1
   d5662:	3904      	subs	r1, #4
   d5664:	1f15      	subs	r5, r2, #4
   d5666:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5668:	1f2b      	subs	r3, r5, #4
   d566a:	429e      	cmp	r6, r3
   d566c:	d025      	beq.n	d56ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d566e:	2c04      	cmp	r4, #4
   d5670:	d007      	beq.n	d5682 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5672:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5676:	f844 3c04 	str.w	r3, [r4, #-4]
   d567a:	4629      	mov	r1, r5
   d567c:	4620      	mov	r0, r4
   d567e:	f7ff fd2a 	bl	d50d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5682:	4628      	mov	r0, r5
   d5684:	f7ff fd14 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5688:	3d08      	subs	r5, #8
   d568a:	3c08      	subs	r4, #8
   d568c:	e7ec      	b.n	d5668 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d568e:	d014      	beq.n	d56ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d5690:	1d0c      	adds	r4, r1, #4
   d5692:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d5694:	1f23      	subs	r3, r4, #4
   d5696:	429d      	cmp	r5, r3
   d5698:	d00f      	beq.n	d56ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d569a:	2e04      	cmp	r6, #4
   d569c:	d007      	beq.n	d56ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d569e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d56a2:	f846 3c04 	str.w	r3, [r6, #-4]
   d56a6:	4621      	mov	r1, r4
   d56a8:	4630      	mov	r0, r6
   d56aa:	f7ff fd14 	bl	d50d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d56ae:	4620      	mov	r0, r4
   d56b0:	f7ff fcfe 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56b4:	3408      	adds	r4, #8
   d56b6:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d56b8:	e7ec      	b.n	d5694 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d56ba:	bd70      	pop	{r4, r5, r6, pc}

000d56bc <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE>:

    Vector<BleService>& services() {
        return services_;
    }

    int addService(BleService& svc) {
   d56bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d56be:	680f      	ldr	r7, [r1, #0]
   d56c0:	b089      	sub	sp, #36	; 0x24
   d56c2:	460d      	mov	r5, r1
        if (getService(svc.impl()->uuid) != nullptr) {
   d56c4:	4639      	mov	r1, r7

    Vector<BleService>& services() {
        return services_;
    }

    int addService(BleService& svc) {
   d56c6:	4604      	mov	r4, r0
        if (getService(svc.impl()->uuid) != nullptr) {
   d56c8:	f7ff fc5d 	bl	d4f86 <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE>
   d56cc:	2800      	cmp	r0, #0
   d56ce:	d15e      	bne.n	d578e <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd2>
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        if (local_) {
   d56d0:	7b23      	ldrb	r3, [r4, #12]
   d56d2:	b1bb      	cbz	r3, d5704 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x48>
            hal_ble_uuid_t halUuid = svc.impl()->uuid.UUID();
   d56d4:	ae03      	add	r6, sp, #12
   d56d6:	463b      	mov	r3, r7
   d56d8:	f107 0c10 	add.w	ip, r7, #16
   d56dc:	46b6      	mov	lr, r6
   d56de:	6818      	ldr	r0, [r3, #0]
   d56e0:	6859      	ldr	r1, [r3, #4]
   d56e2:	4632      	mov	r2, r6
   d56e4:	c203      	stmia	r2!, {r0, r1}
   d56e6:	3308      	adds	r3, #8
   d56e8:	4563      	cmp	r3, ip
   d56ea:	4616      	mov	r6, r2
   d56ec:	d1f7      	bne.n	d56de <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x22>
   d56ee:	6818      	ldr	r0, [r3, #0]
   d56f0:	6010      	str	r0, [r2, #0]
            int ret = hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle, nullptr);
   d56f2:	2300      	movs	r3, #0
   d56f4:	f107 0214 	add.w	r2, r7, #20
   d56f8:	4671      	mov	r1, lr
   d56fa:	2001      	movs	r0, #1
   d56fc:	f7fe ff30 	bl	d4560 <hal_ble_gatt_server_add_service>
            if (ret != SYSTEM_ERROR_NONE) {
   d5700:	2800      	cmp	r0, #0
   d5702:	d145      	bne.n	d5790 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd4>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5704:	4629      	mov	r1, r5
   d5706:	a802      	add	r0, sp, #8
   d5708:	f851 3b04 	ldr.w	r3, [r1], #4
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	f7ff fce2 	bl	d50d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5712:	9b01      	ldr	r3, [sp, #4]
   d5714:	9303      	str	r3, [sp, #12]
   d5716:	a902      	add	r1, sp, #8
   d5718:	a804      	add	r0, sp, #16
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d571a:	6867      	ldr	r7, [r4, #4]
   d571c:	f7ff fcdb 	bl	d50d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5720:	6865      	ldr	r5, [r4, #4]
   d5722:	68a3      	ldr	r3, [r4, #8]
   d5724:	429d      	cmp	r5, r3
   d5726:	db14      	blt.n	d5752 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x96>
   d5728:	3501      	adds	r5, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d572a:	2d00      	cmp	r5, #0
   d572c:	dd0b      	ble.n	d5746 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x8a>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d572e:	00e8      	lsls	r0, r5, #3
   d5730:	f7ff f8a4 	bl	d487c <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5734:	4606      	mov	r6, r0
   d5736:	b310      	cbz	r0, d577e <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xc2>
                return false;
            }
            move(d, data_, data_ + size_);
   d5738:	e894 0006 	ldmia.w	r4, {r1, r2}
   d573c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5740:	f7ff ff86 	bl	d5650 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5744:	e000      	b.n	d5748 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x8c>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5746:	2600      	movs	r6, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5748:	6820      	ldr	r0, [r4, #0]
   d574a:	f7ff f89f 	bl	d488c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d574e:	6026      	str	r6, [r4, #0]
        capacity_ = n;
   d5750:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5752:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5754:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5756:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d575a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d575e:	4629      	mov	r1, r5
   d5760:	f105 0008 	add.w	r0, r5, #8
   d5764:	f7ff ff74 	bl	d5650 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5768:	b135      	cbz	r5, d5778 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xbc>
   d576a:	9b03      	ldr	r3, [sp, #12]
   d576c:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d5770:	a904      	add	r1, sp, #16
   d5772:	1d28      	adds	r0, r5, #4
   d5774:	f7ff fcaf 	bl	d50d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5778:	6863      	ldr	r3, [r4, #4]
   d577a:	3301      	adds	r3, #1
   d577c:	6063      	str	r3, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d577e:	a804      	add	r0, sp, #16
   d5780:	f7ff fc96 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5784:	a802      	add	r0, sp, #8
   d5786:	f7ff fc93 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                return ret;
            }
        }
        DEBUG("services.append(service)");
        services_.append(svc);
   d578a:	2000      	movs	r0, #0
   d578c:	e000      	b.n	d5790 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd4>
        return services_;
    }

    int addService(BleService& svc) {
        if (getService(svc.impl()->uuid) != nullptr) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
   d578e:	4801      	ldr	r0, [pc, #4]	; (d5794 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd8>)
            }
        }
        DEBUG("services.append(service)");
        services_.append(svc);
        return SYSTEM_ERROR_NONE;
    }
   d5790:	b009      	add	sp, #36	; 0x24
   d5792:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5794:	fffffef2 	.word	0xfffffef2

000d5798 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
   d5798:	b573      	push	{r0, r1, r4, r5, r6, lr}
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d579a:	2500      	movs	r5, #0
   d579c:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d579e:	6045      	str	r5, [r0, #4]
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
   d57a0:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d57a2:	2020      	movs	r0, #32
   d57a4:	f7fe fc77 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d57a8:	4604      	mov	r4, r0
   d57aa:	b1b0      	cbz	r0, d57da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x42>
            : role(BLE_ROLE_INVALID),
              address(),
              connParams(),
              connHandle(BLE_INVALID_CONN_HANDLE),
              rssi(0x7F),
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
   d57ac:	4603      	mov	r3, r0
   d57ae:	a901      	add	r1, sp, #4
   d57b0:	f803 5b01 	strb.w	r5, [r3], #1
   d57b4:	f8c0 5001 	str.w	r5, [r0, #1]
   d57b8:	605d      	str	r5, [r3, #4]
   d57ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d57be:	82c3      	strh	r3, [r0, #22]
   d57c0:	237f      	movs	r3, #127	; 0x7f
   d57c2:	f8c0 500a 	str.w	r5, [r0, #10]
   d57c6:	f8c0 500e 	str.w	r5, [r0, #14]
   d57ca:	f8c0 5012 	str.w	r5, [r0, #18]
   d57ce:	7603      	strb	r3, [r0, #24]
   d57d0:	301c      	adds	r0, #28
   d57d2:	f88d 5004 	strb.w	r5, [sp, #4]
   d57d6:	f7ff fcab 	bl	d5130 <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d57da:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d57dc:	2014      	movs	r0, #20
   d57de:	9301      	str	r3, [sp, #4]
   d57e0:	f7fe fc59 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d57e4:	b128      	cbz	r0, d57f2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x5a>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d57e6:	2301      	movs	r3, #1
   d57e8:	6043      	str	r3, [r0, #4]
   d57ea:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d57ec:	4b06      	ldr	r3, [pc, #24]	; (d5808 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x70>)
   d57ee:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d57f0:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d57f2:	6873      	ldr	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d57f4:	6034      	str	r4, [r6, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d57f6:	6070      	str	r0, [r6, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d57f8:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d57fa:	9301      	str	r3, [sp, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d57fc:	f7ff fc58 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
	  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
	}
   d5800:	4630      	mov	r0, r6
   d5802:	b002      	add	sp, #8
   d5804:	bd70      	pop	{r4, r5, r6, pc}
   d5806:	bf00      	nop
   d5808:	000d7f44 	.word	0x000d7f44

000d580c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d580c:	b513      	push	{r0, r1, r4, lr}
    private:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		   _Args&&... __args)
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
   d580e:	f04f 0100 	mov.w	r1, #0
   d5812:	aa01      	add	r2, sp, #4
   d5814:	4604      	mov	r4, r0
   d5816:	f7ff ffbf 	bl	d5798 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_>
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
}
   d581a:	4620      	mov	r0, r4
   d581c:	b002      	add	sp, #8
   d581e:	bd10      	pop	{r4, pc}

000d5820 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleLocalDevice::onBleEvents(const hal_ble_evts_t *event, void* context) {
   d5820:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5822:	4604      	mov	r4, r0
   d5824:	b08b      	sub	sp, #44	; 0x2c
    if (context == nullptr) {
   d5826:	460d      	mov	r5, r1
   d5828:	2900      	cmp	r1, #0
   d582a:	f000 80a5 	beq.w	d5978 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x158>
        return;
    }

    auto bleInstance = static_cast<BleLocalDevice*>(context);
    WiringBleLock lk;
   d582e:	a803      	add	r0, sp, #12
   d5830:	f7ff f98a 	bl	d4b48 <_ZN8particle3ble13WiringBleLockC1Ev>

    switch (event->type) {
   d5834:	6863      	ldr	r3, [r4, #4]
   d5836:	3b03      	subs	r3, #3
   d5838:	2b07      	cmp	r3, #7
   d583a:	f200 809a 	bhi.w	d5972 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d583e:	e8df f003 	tbb	[pc, r3]
   d5842:	4404      	.short	0x4404
   d5844:	98989898 	.word	0x98989898
   d5848:	8b80      	.short	0x8b80
        case BLE_EVT_CONNECTED: {
            BlePeerDevice peer;
   d584a:	a806      	add	r0, sp, #24
   d584c:	f7ff ffde 	bl	d580c <_ZN8particle13BlePeerDeviceC1Ev>
   d5850:	9b06      	ldr	r3, [sp, #24]

            peer.impl()->connParams.conn_sup_timeout = event->params.connected.conn_sup_timeout;
   d5852:	89a2      	ldrh	r2, [r4, #12]
   d5854:	829a      	strh	r2, [r3, #20]
            peer.impl()->connParams.slave_latency = event->params.connected.slave_latency;
   d5856:	8962      	ldrh	r2, [r4, #10]
   d5858:	825a      	strh	r2, [r3, #18]
            peer.impl()->connParams.max_conn_interval = event->params.connected.conn_interval;
   d585a:	8922      	ldrh	r2, [r4, #8]
   d585c:	821a      	strh	r2, [r3, #16]
            peer.impl()->connParams.min_conn_interval = event->params.connected.conn_interval;
   d585e:	8922      	ldrh	r2, [r4, #8]
   d5860:	81da      	strh	r2, [r3, #14]
            peer.impl()->connHandle = event->params.connected.conn_handle;
   d5862:	8b22      	ldrh	r2, [r4, #24]
   d5864:	82da      	strh	r2, [r3, #22]
   d5866:	4622      	mov	r2, r4
   d5868:	7da1      	ldrb	r1, [r4, #22]
   d586a:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d586e:	9004      	str	r0, [sp, #16]
   d5870:	8892      	ldrh	r2, [r2, #4]
   d5872:	f8ad 2014 	strh.w	r2, [sp, #20]

class BleAddress : public hal_ble_addr_t {
public:
    BleAddress& operator=(hal_ble_addr_t addr) {
        this->addr_type = addr.addr_type;
        memcpy(this->addr, addr.addr, BLE_SIG_ADDR_LEN);
   d5876:	9804      	ldr	r0, [sp, #16]
   d5878:	f8bd 2014 	ldrh.w	r2, [sp, #20]
typedef void (*BleOnDisconnectedCallback)(const BlePeerDevice& peer, void* context);

class BleAddress : public hal_ble_addr_t {
public:
    BleAddress& operator=(hal_ble_addr_t addr) {
        this->addr_type = addr.addr_type;
   d587c:	71d9      	strb	r1, [r3, #7]
        memcpy(this->addr, addr.addr, BLE_SIG_ADDR_LEN);
   d587e:	f8c3 0001 	str.w	r0, [r3, #1]
   d5882:	f8a3 2005 	strh.w	r2, [r3, #5]
            peer.impl()->address = event->params.connected.peer_addr;

            if (bleInstance->connectedCb_) {
   d5886:	682b      	ldr	r3, [r5, #0]
   d5888:	b113      	cbz	r3, d5890 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x70>
                bleInstance->connectedCb_(peer, bleInstance->connectedContext);
   d588a:	68a9      	ldr	r1, [r5, #8]
   d588c:	a806      	add	r0, sp, #24
   d588e:	4798      	blx	r3
            }
            if (event->params.connected.role == BLE_ROLE_PERIPHERAL) {
   d5890:	7ba3      	ldrb	r3, [r4, #14]
   d5892:	2b01      	cmp	r3, #1
   d5894:	9b06      	ldr	r3, [sp, #24]
                peer.impl()->role = BLE_ROLE_CENTRAL;
   d5896:	bf0b      	itete	eq
   d5898:	2202      	moveq	r2, #2
                bleInstance->peripheralProxy_->peripheralProcessConnected(peer);
            } else {
                peer.impl()->role = BLE_ROLE_PERIPHERAL;
   d589a:	2201      	movne	r2, #1

            if (bleInstance->connectedCb_) {
                bleInstance->connectedCb_(peer, bleInstance->connectedContext);
            }
            if (event->params.connected.role == BLE_ROLE_PERIPHERAL) {
                peer.impl()->role = BLE_ROLE_CENTRAL;
   d589c:	701a      	strbeq	r2, [r3, #0]
                bleInstance->peripheralProxy_->peripheralProcessConnected(peer);
            } else {
                peer.impl()->role = BLE_ROLE_PERIPHERAL;
   d589e:	701a      	strbne	r2, [r3, #0]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d58a0:	bf0c      	ite	eq
   d58a2:	69ac      	ldreq	r4, [r5, #24]
   d58a4:	69ec      	ldrne	r4, [r5, #28]
    bool connected() const {
        return peripherals_.size() > 0;
    }

    void centralProcessConnected(const BlePeerDevice& peer) {
        if (peripherals_.size() < BLE_MAX_CENTRAL_COUNT) {
   d58a6:	6863      	ldr	r3, [r4, #4]
   d58a8:	2b00      	cmp	r3, #0
   d58aa:	dc0a      	bgt.n	d58c2 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xa2>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d58ac:	a906      	add	r1, sp, #24
   d58ae:	a808      	add	r0, sp, #32
   d58b0:	f7ff fc22 	bl	d50f8 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            peripherals_.append(peer);
   d58b4:	a908      	add	r1, sp, #32
   d58b6:	4620      	mov	r0, r4
   d58b8:	f7ff fce1 	bl	d527e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d58bc:	a809      	add	r0, sp, #36	; 0x24
   d58be:	f7ff fbf7 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58c2:	a807      	add	r0, sp, #28
   d58c4:	f7ff fbf4 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58c8:	e053      	b.n	d5972 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->centralProxy_->centralProcessConnected(peer);
            }
            break;
        }
        case BLE_EVT_DISCONNECTED: {
            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.disconnected.conn_handle);
   d58ca:	89a1      	ldrh	r1, [r4, #12]
   d58cc:	4628      	mov	r0, r5
   d58ce:	f7ff fbcd 	bl	d506c <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d58d2:	4604      	mov	r4, r0
   d58d4:	2800      	cmp	r0, #0
   d58d6:	d04c      	beq.n	d5972 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->gattsProxy_->gattsProcessDisconnected(*peer);

                if (bleInstance->disconnectedCb_) {
   d58d8:	686b      	ldr	r3, [r5, #4]
   d58da:	b10b      	cbz	r3, d58e0 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xc0>
                    bleInstance->disconnectedCb_(*peer, bleInstance->disconnectedContext);
   d58dc:	68e9      	ldr	r1, [r5, #12]
   d58de:	4798      	blx	r3
   d58e0:	6823      	ldr	r3, [r4, #0]
                }
                if (peer->impl()->role == BLE_ROLE_PERIPHERAL) {
   d58e2:	781a      	ldrb	r2, [r3, #0]
   d58e4:	2a01      	cmp	r2, #1
   d58e6:	d104      	bne.n	d58f2 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xd2>
                    bleInstance->centralProxy_->centralProcessDisconnected(*peer);
   d58e8:	4621      	mov	r1, r4
   d58ea:	69e8      	ldr	r0, [r5, #28]
   d58ec:	f7ff fc81 	bl	d51f2 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE>
   d58f0:	e03f      	b.n	d5972 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d58f2:	69da      	ldr	r2, [r3, #28]
   d58f4:	69a8      	ldr	r0, [r5, #24]
   d58f6:	6813      	ldr	r3, [r2, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d58f8:	6851      	ldr	r1, [r2, #4]
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d58fa:	2600      	movs	r6, #0
   d58fc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
            centrals_.append(peer);
        }
    }

    void peripheralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d5900:	4299      	cmp	r1, r3
   d5902:	d00d      	beq.n	d5920 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x100>
   d5904:	681d      	ldr	r5, [r3, #0]
   d5906:	69aa      	ldr	r2, [r5, #24]
   d5908:	69ed      	ldr	r5, [r5, #28]
   d590a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
            for (auto& characteristic : service.impl()->characteristics()) {
   d590e:	4295      	cmp	r5, r2
   d5910:	d004      	beq.n	d591c <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xfc>
   d5912:	f852 7b08 	ldr.w	r7, [r2], #8
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d5916:	f887 605c 	strb.w	r6, [r7, #92]	; 0x5c
   d591a:	e7f8      	b.n	d590e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xee>
   d591c:	3308      	adds	r3, #8
   d591e:	e7ef      	b.n	d5900 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xe0>
   d5920:	6823      	ldr	r3, [r4, #0]
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
        connHandle = BLE_INVALID_CONN_HANDLE;
   d5922:	f64f 71ff 	movw	r1, #65535	; 0xffff
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d5926:	2200      	movs	r2, #0
        connHandle = BLE_INVALID_CONN_HANDLE;
   d5928:	82d9      	strh	r1, [r3, #22]
        rssi = 0x7F;
   d592a:	217f      	movs	r1, #127	; 0x7f
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d592c:	701a      	strb	r2, [r3, #0]
        connHandle = BLE_INVALID_CONN_HANDLE;
        rssi = 0x7F;
   d592e:	7619      	strb	r1, [r3, #24]
        connParams = {};
   d5930:	f8c3 200a 	str.w	r2, [r3, #10]
   d5934:	f8c3 200e 	str.w	r2, [r3, #14]
   d5938:	f8c3 2012 	str.w	r2, [r3, #18]
            for (auto& characteristic : service.impl()->characteristics()) {
                characteristic.impl()->setValid(false);
            }
        }
        peer.impl()->invalidate();
        centrals_.clear();
   d593c:	f7ff fc1f 	bl	d517e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
   d5940:	e017      	b.n	d5972 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
            break;
        }
        case BLE_EVT_DATA_WRITTEN: {
            LOG_DEBUG(TRACE, "onDataWritten, connection: %d, attribute: %d", event->params.data_rec.conn_handle, event->params.data_rec.attr_handle);

            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.data_rec.conn_handle);
   d5942:	8aa1      	ldrh	r1, [r4, #20]
   d5944:	4628      	mov	r0, r5
   d5946:	f7ff fb91 	bl	d506c <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d594a:	b190      	cbz	r0, d5972 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->gattsProxy_->gattsProcessDataWritten(event->params.data_rec.attr_handle,
                        event->params.data_rec.data, event->params.data_rec.data_len, *peer);
   d594c:	8ae1      	ldrh	r1, [r4, #22]
   d594e:	9000      	str	r0, [sp, #0]
   d5950:	68e3      	ldr	r3, [r4, #12]
   d5952:	6922      	ldr	r2, [r4, #16]
   d5954:	6928      	ldr	r0, [r5, #16]
   d5956:	e00a      	b.n	d596e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x14e>
            break;
        }
        case BLE_EVT_DATA_NOTIFIED: {
            LOG_DEBUG(TRACE, "onDataNotified, connection: %d, attribute: %d", event->params.data_rec.conn_handle, event->params.data_rec.attr_handle);

            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.data_rec.conn_handle);
   d5958:	8aa1      	ldrh	r1, [r4, #20]
   d595a:	4628      	mov	r0, r5
   d595c:	f7ff fb86 	bl	d506c <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d5960:	b138      	cbz	r0, d5972 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d5962:	6805      	ldr	r5, [r0, #0]
        }
        return ret;
    }

    void gattcProcessDataNotified(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
        peer.impl()->gattsProxy->gattsProcessDataWritten(attrHandle, buf, len, peer);
   d5964:	8ae1      	ldrh	r1, [r4, #22]
   d5966:	9000      	str	r0, [sp, #0]
   d5968:	68e3      	ldr	r3, [r4, #12]
   d596a:	6922      	ldr	r2, [r4, #16]
   d596c:	69e8      	ldr	r0, [r5, #28]
   d596e:	f7ff fac9 	bl	d4f04 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE>
    if (context == nullptr) {
        return;
    }

    auto bleInstance = static_cast<BleLocalDevice*>(context);
    WiringBleLock lk;
   d5972:	a803      	add	r0, sp, #12
   d5974:	f7ff f8f6 	bl	d4b64 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
        default:{
            break;
        }
    }
}
   d5978:	b00b      	add	sp, #44	; 0x2c
   d597a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d597c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d597c:	b510      	push	{r4, lr}
   d597e:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5980:	6840      	ldr	r0, [r0, #4]
   d5982:	b108      	cbz	r0, d5988 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5984:	f7fe fb89 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5988:	4620      	mov	r0, r4
   d598a:	bd10      	pop	{r4, pc}

000d598c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d598c:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d598e:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5990:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5992:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        this->uuid = charUuid;
        this->svcUuid = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d5996:	f103 002c 	add.w	r0, r3, #44	; 0x2c
   d599a:	f7ff f805 	bl	d49a8 <_ZN6StringD1Ev>
   d599e:	4668      	mov	r0, sp
   d59a0:	f7ff ffec 	bl	d597c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d59a4:	b003      	add	sp, #12
   d59a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d59ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d59ac:	b538      	push	{r3, r4, r5, lr}
   d59ae:	2300      	movs	r3, #0
   d59b0:	4604      	mov	r4, r0
   d59b2:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d59b4:	2014      	movs	r0, #20
   d59b6:	460d      	mov	r5, r1
   d59b8:	f7fe fb6d 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d59bc:	b128      	cbz	r0, d59ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d59be:	2301      	movs	r3, #1
   d59c0:	6043      	str	r3, [r0, #4]
   d59c2:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d59c4:	4b02      	ldr	r3, [pc, #8]	; (d59d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d59c6:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d59c8:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d59ca:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d59cc:	4620      	mov	r0, r4
   d59ce:	bd38      	pop	{r3, r4, r5, pc}
   d59d0:	000d7f0c 	.word	0x000d7f0c

000d59d4 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
BleCharacteristic::BleCharacteristic(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
        : impl_(std::make_shared<BleCharacteristicImpl>(desc, properties, callback, context)) {
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d59d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59d8:	b088      	sub	sp, #32
   d59da:	4606      	mov	r6, r0
   d59dc:	461d      	mov	r5, r3
   d59de:	2060      	movs	r0, #96	; 0x60
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d59e0:	2300      	movs	r3, #0
   d59e2:	4688      	mov	r8, r1
   d59e4:	4617      	mov	r7, r2
   d59e6:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d59e8:	9305      	str	r3, [sp, #20]
   d59ea:	f7fe fb54 	bl	d4096 <_Znwj>
   d59ee:	f8cd d018 	str.w	sp, [sp, #24]
   d59f2:	4604      	mov	r4, r0
   d59f4:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d59f6:	b300      	cbz	r0, d5a3a <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x66>
              svcImpl(nullptr),
              valid_(false) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d59f8:	f7ff fa24 	bl	d4e44 <_ZN8particle21BleCharacteristicImplC1Ev>
        this->description = desc;
   d59fc:	4641      	mov	r1, r8
   d59fe:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d5a02:	f7ff f845 	bl	d4a90 <_ZN6StringaSEPKc>
        this->properties = properties;
        this->dataCb = callback;
   d5a06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d5a08:	64e3      	str	r3, [r4, #76]	; 0x4c
        this->context = context;
   d5a0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d5a0c:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        this->description = desc;
        this->properties = properties;
   d5a0e:	7027      	strb	r7, [r4, #0]
        this->context = context;
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        this->uuid = charUuid;
   d5a10:	462b      	mov	r3, r5
   d5a12:	1ca2      	adds	r2, r4, #2
   d5a14:	f105 0114 	add.w	r1, r5, #20
   d5a18:	f853 0b04 	ldr.w	r0, [r3], #4
   d5a1c:	f842 0b04 	str.w	r0, [r2], #4
   d5a20:	428b      	cmp	r3, r1
   d5a22:	d1f9      	bne.n	d5a18 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x44>
        this->svcUuid = svcUuid;
   d5a24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d5a26:	f104 0216 	add.w	r2, r4, #22
   d5a2a:	f103 0114 	add.w	r1, r3, #20
   d5a2e:	f853 0b04 	ldr.w	r0, [r3], #4
   d5a32:	f842 0b04 	str.w	r0, [r2], #4
   d5a36:	428b      	cmp	r3, r1
   d5a38:	d1f9      	bne.n	d5a2e <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x5a>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5a3a:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d5a3c:	2500      	movs	r5, #0
   d5a3e:	ab01      	add	r3, sp, #4
   d5a40:	aa02      	add	r2, sp, #8
   d5a42:	a803      	add	r0, sp, #12
   d5a44:	9507      	str	r5, [sp, #28]
   d5a46:	f7ff ffb1 	bl	d59ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5a4a:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5a4c:	9a05      	ldr	r2, [sp, #20]
   d5a4e:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5a50:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5a52:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5a54:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5a56:	f7ff fb2b 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5a5a:	a806      	add	r0, sp, #24
   d5a5c:	f7ff ff8e 	bl	d597c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5a60:	9b04      	ldr	r3, [sp, #16]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5a62:	9a05      	ldr	r2, [sp, #20]
   d5a64:	6831      	ldr	r1, [r6, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a66:	6033      	str	r3, [r6, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5a68:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5a6a:	6873      	ldr	r3, [r6, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5a6c:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d5a6e:	6072      	str	r2, [r6, #4]
	_M_pi = __tmp;
   d5a70:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5a74:	9505      	str	r5, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5a76:	9504      	str	r5, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5a78:	f7ff fb1a 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a7c:	a805      	add	r0, sp, #20
   d5a7e:	f7ff fb17 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d5a82:	b008      	add	sp, #32
   d5a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5a88 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5a88:	b510      	push	{r4, lr}
   d5a8a:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5a8c:	6840      	ldr	r0, [r0, #4]
   d5a8e:	b108      	cbz	r0, d5a94 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5a90:	f7fe fb03 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5a94:	4620      	mov	r0, r4
   d5a96:	bd10      	pop	{r4, pc}

000d5a98 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5a98:	b573      	push	{r0, r1, r4, r5, r6, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5a9a:	6905      	ldr	r5, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5a9c:	300c      	adds	r0, #12
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d5a9e:	69ac      	ldr	r4, [r5, #24]
   d5aa0:	69eb      	ldr	r3, [r5, #28]
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5aa2:	e88d 0021 	stmia.w	sp, {r0, r5}
   d5aa6:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5aaa:	42a6      	cmp	r6, r4
   d5aac:	d004      	beq.n	d5ab8 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x20>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5aae:	1d20      	adds	r0, r4, #4
   d5ab0:	f7ff fafe 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ab4:	3408      	adds	r4, #8
   d5ab6:	e7f8      	b.n	d5aaa <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5ab8:	69a8      	ldr	r0, [r5, #24]
   d5aba:	f7fe fee7 	bl	d488c <free>
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5abe:	4668      	mov	r0, sp
   d5ac0:	f7ff ffe2 	bl	d5a88 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5ac4:	b002      	add	sp, #8
   d5ac6:	bd70      	pop	{r4, r5, r6, pc}

000d5ac8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5ac8:	b538      	push	{r3, r4, r5, lr}
   d5aca:	2300      	movs	r3, #0
   d5acc:	4604      	mov	r4, r0
   d5ace:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5ad0:	2014      	movs	r0, #20
   d5ad2:	460d      	mov	r5, r1
   d5ad4:	f7fe fadf 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5ad8:	b128      	cbz	r0, d5ae6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5ada:	2301      	movs	r3, #1
   d5adc:	6043      	str	r3, [r0, #4]
   d5ade:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5ae0:	4b02      	ldr	r3, [pc, #8]	; (d5aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5ae2:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5ae4:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d5ae6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5ae8:	4620      	mov	r0, r4
   d5aea:	bd38      	pop	{r3, r4, r5, pc}
   d5aec:	000d7f28 	.word	0x000d7f28

000d5af0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
 */
BleService::BleService()
        : impl_(std::make_shared<BleServiceImpl>()) {
}

BleService::BleService(const BleUuid& uuid)
   d5af0:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5af2:	2600      	movs	r6, #0
   d5af4:	b087      	sub	sp, #28
   d5af6:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5af8:	6046      	str	r6, [r0, #4]
   d5afa:	4607      	mov	r7, r0
   d5afc:	2024      	movs	r0, #36	; 0x24
   d5afe:	460d      	mov	r5, r1
   d5b00:	f7fe fac9 	bl	d4096 <_Znwj>
   d5b04:	f8cd d010 	str.w	sp, [sp, #16]
   d5b08:	4604      	mov	r4, r0
   d5b0a:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5b0c:	b1a0      	cbz	r0, d5b38 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x48>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid(),
              startHandle(BLE_INVALID_ATTR_HANDLE),
              endHandle(BLE_INVALID_ATTR_HANDLE) {
   d5b0e:	f7ff f812 	bl	d4b36 <_ZN8particle7BleUuidC1Ev>
   d5b12:	82a6      	strh	r6, [r4, #20]
   d5b14:	82e6      	strh	r6, [r4, #22]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5b16:	61a6      	str	r6, [r4, #24]
   d5b18:	61e6      	str	r6, [r4, #28]
   d5b1a:	6226      	str	r6, [r4, #32]
    }
    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid = svcUuid;
   d5b1c:	462b      	mov	r3, r5
   d5b1e:	4622      	mov	r2, r4
   d5b20:	f105 0610 	add.w	r6, r5, #16
   d5b24:	6818      	ldr	r0, [r3, #0]
   d5b26:	6859      	ldr	r1, [r3, #4]
   d5b28:	4615      	mov	r5, r2
   d5b2a:	c503      	stmia	r5!, {r0, r1}
   d5b2c:	3308      	adds	r3, #8
   d5b2e:	42b3      	cmp	r3, r6
   d5b30:	462a      	mov	r2, r5
   d5b32:	d1f7      	bne.n	d5b24 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x34>
   d5b34:	6818      	ldr	r0, [r3, #0]
   d5b36:	6028      	str	r0, [r5, #0]

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d5b38:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5b3a:	4621      	mov	r1, r4
   d5b3c:	9305      	str	r3, [sp, #20]
   d5b3e:	aa02      	add	r2, sp, #8
   d5b40:	ab01      	add	r3, sp, #4
   d5b42:	a803      	add	r0, sp, #12
   d5b44:	f7ff ffc0 	bl	d5ac8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5b48:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5b4a:	687a      	ldr	r2, [r7, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5b4c:	603c      	str	r4, [r7, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5b4e:	607b      	str	r3, [r7, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5b50:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5b52:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5b54:	f7ff faac 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5b58:	a804      	add	r0, sp, #16
   d5b5a:	f7ff ff95 	bl	d5a88 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
        : impl_(std::make_shared<BleServiceImpl>()) {
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
}
   d5b5e:	4638      	mov	r0, r7
   d5b60:	b007      	add	sp, #28
   d5b62:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b64 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE>:
        DEBUG("services.append(service)");
        services_.append(svc);
        return SYSTEM_ERROR_NONE;
    }

    int addCharacteristic(BleCharacteristic& characteristic) {
   d5b64:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5b66:	680b      	ldr	r3, [r1, #0]
   d5b68:	b087      	sub	sp, #28
   d5b6a:	4605      	mov	r5, r0
   d5b6c:	460c      	mov	r4, r1
        if (characteristic.impl() == nullptr) {
   d5b6e:	2b00      	cmp	r3, #0
   d5b70:	d046      	beq.n	d5c00 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x9c>
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        characteristic.impl()->isLocal = local_;
   d5b72:	7b02      	ldrb	r2, [r0, #12]
   d5b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        if (local_) {
   d5b78:	7b03      	ldrb	r3, [r0, #12]
   d5b7a:	b1c3      	cbz	r3, d5bae <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x4a>
            LOG_DEBUG(TRACE, "< LOCAL CHARACTERISTIC >");
            if (!characteristic.impl()->svcUuid.isValid()) {
   d5b7c:	6808      	ldr	r0, [r1, #0]
   d5b7e:	3016      	adds	r0, #22
   d5b80:	f7ff f891 	bl	d4ca6 <_ZNK8particle7BleUuid7isValidEv>
   d5b84:	b998      	cbnz	r0, d5bae <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x4a>
                BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID);
   d5b86:	2201      	movs	r2, #1
   d5b88:	4921      	ldr	r1, [pc, #132]	; (d5c10 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xac>)
   d5b8a:	a801      	add	r0, sp, #4
   d5b8c:	f7fe fff6 	bl	d4b7c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d5b90:	6823      	ldr	r3, [r4, #0]
                LOG_DEBUG(TRACE, "Assign default service UUID.");
                characteristic.impl()->svcUuid = newUuid;
   d5b92:	aa01      	add	r2, sp, #4
   d5b94:	3316      	adds	r3, #22
   d5b96:	af05      	add	r7, sp, #20
   d5b98:	4616      	mov	r6, r2
   d5b9a:	ce03      	ldmia	r6!, {r0, r1}
   d5b9c:	42be      	cmp	r6, r7
   d5b9e:	6018      	str	r0, [r3, #0]
   d5ba0:	6059      	str	r1, [r3, #4]
   d5ba2:	4632      	mov	r2, r6
   d5ba4:	f103 0308 	add.w	r3, r3, #8
   d5ba8:	d1f6      	bne.n	d5b98 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x34>
   d5baa:	6830      	ldr	r0, [r6, #0]
   d5bac:	6018      	str	r0, [r3, #0]
            }
        }
        BleService* service = getService(characteristic.impl()->svcUuid);
   d5bae:	6826      	ldr	r6, [r4, #0]
   d5bb0:	3616      	adds	r6, #22
   d5bb2:	4631      	mov	r1, r6
   d5bb4:	4628      	mov	r0, r5
   d5bb6:	f7ff f9e6 	bl	d4f86 <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE>
        if (service != nullptr) {
   d5bba:	b130      	cbz	r0, d5bca <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x66>
   d5bbc:	6800      	ldr	r0, [r0, #0]
            if (service->impl() != nullptr) {
   d5bbe:	b308      	cbz	r0, d5c04 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xa0>
                return service->impl()->addCharacteristic(characteristic);
   d5bc0:	4621      	mov	r1, r4
   d5bc2:	f7ff fcb3 	bl	d552c <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE>
   d5bc6:	4604      	mov	r4, r0
   d5bc8:	e01e      	b.n	d5c08 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xa4>
            }
            return SYSTEM_ERROR_INTERNAL;
        } else {
            BleService service(characteristic.impl()->svcUuid);
   d5bca:	4631      	mov	r1, r6
   d5bcc:	a801      	add	r0, sp, #4
   d5bce:	f7ff ff8f 	bl	d5af0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
            if (addService(service) == SYSTEM_ERROR_NONE) {
   d5bd2:	a901      	add	r1, sp, #4
   d5bd4:	4628      	mov	r0, r5
   d5bd6:	f7ff fd71 	bl	d56bc <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE>
   d5bda:	b958      	cbnz	r0, d5bf4 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x90>
   d5bdc:	686b      	ldr	r3, [r5, #4]
   d5bde:	682a      	ldr	r2, [r5, #0]
   d5be0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d5be4:	3b01      	subs	r3, #1
                return services_.last().impl()->addCharacteristic(characteristic);
   d5be6:	4621      	mov	r1, r4
   d5be8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   d5bec:	f7ff fc9e 	bl	d552c <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE>
   d5bf0:	4604      	mov	r4, r0
   d5bf2:	e001      	b.n	d5bf8 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x94>
            }
            return SYSTEM_ERROR_INTERNAL;
   d5bf4:	f06f 04f9 	mvn.w	r4, #249	; 0xf9
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5bf8:	a802      	add	r0, sp, #8
   d5bfa:	f7ff fa59 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5bfe:	e003      	b.n	d5c08 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xa4>
        return SYSTEM_ERROR_NONE;
    }

    int addCharacteristic(BleCharacteristic& characteristic) {
        if (characteristic.impl() == nullptr) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5c00:	4c04      	ldr	r4, [pc, #16]	; (d5c14 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xb0>)
   d5c02:	e001      	b.n	d5c08 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xa4>
        BleService* service = getService(characteristic.impl()->svcUuid);
        if (service != nullptr) {
            if (service->impl() != nullptr) {
                return service->impl()->addCharacteristic(characteristic);
            }
            return SYSTEM_ERROR_INTERNAL;
   d5c04:	f06f 04f9 	mvn.w	r4, #249	; 0xf9
            if (addService(service) == SYSTEM_ERROR_NONE) {
                return services_.last().impl()->addCharacteristic(characteristic);
            }
            return SYSTEM_ERROR_INTERNAL;
        }
    }
   d5c08:	4620      	mov	r0, r4
   d5c0a:	b007      	add	sp, #28
   d5c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5c0e:	bf00      	nop
   d5c10:	000d7f58 	.word	0x000d7f58
   d5c14:	fffffef2 	.word	0xfffffef2

000d5c18 <_ZNK8particle14BleLocalDevice17addCharacteristicERNS_17BleCharacteristicE>:
int BleLocalDevice::disconnect(const BlePeerDevice& peripheral) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return centralProxy_->disconnect(peripheral);
}

int BleLocalDevice::addCharacteristic(BleCharacteristic& characteristic) const {
   d5c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5c1a:	4604      	mov	r4, r0
   d5c1c:	460d      	mov	r5, r1
    WiringBleLock lk;
   d5c1e:	a801      	add	r0, sp, #4
   d5c20:	f7fe ff92 	bl	d4b48 <_ZN8particle3ble13WiringBleLockC1Ev>
    return gattsProxy_->addCharacteristic(characteristic);
   d5c24:	4629      	mov	r1, r5
   d5c26:	6920      	ldr	r0, [r4, #16]
   d5c28:	f7ff ff9c 	bl	d5b64 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE>
   d5c2c:	4604      	mov	r4, r0
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return centralProxy_->disconnect(peripheral);
}

int BleLocalDevice::addCharacteristic(BleCharacteristic& characteristic) const {
    WiringBleLock lk;
   d5c2e:	a801      	add	r0, sp, #4
   d5c30:	f7fe ff98 	bl	d4b64 <_ZN8particle3ble13WiringBleLockD1Ev>
    return gattsProxy_->addCharacteristic(characteristic);
}
   d5c34:	4620      	mov	r0, r4
   d5c36:	b003      	add	sp, #12
   d5c38:	bd30      	pop	{r4, r5, pc}
	...

000d5c3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5c3c:	4802      	ldr	r0, [pc, #8]	; (d5c48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5c3e:	2300      	movs	r3, #0
   d5c40:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5c42:	f7fe bcdf 	b.w	d4604 <os_mutex_recursive_create>
   d5c46:	bf00      	nop
   d5c48:	2003e3bc 	.word	0x2003e3bc

000d5c4c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c4e:	4606      	mov	r6, r0
   d5c50:	460d      	mov	r5, r1
   d5c52:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5c54:	2400      	movs	r4, #0
  while (size--) {
   d5c56:	42bd      	cmp	r5, r7
   d5c58:	d00c      	beq.n	d5c74 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5c5a:	6833      	ldr	r3, [r6, #0]
   d5c5c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5c60:	689b      	ldr	r3, [r3, #8]
   d5c62:	4630      	mov	r0, r6
   d5c64:	4798      	blx	r3
     if (chunk>=0)
   d5c66:	2800      	cmp	r0, #0
   d5c68:	db01      	blt.n	d5c6e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5c6a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5c6c:	e7f3      	b.n	d5c56 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5c6e:	2c00      	cmp	r4, #0
   d5c70:	bf08      	it	eq
   d5c72:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5c74:	4620      	mov	r0, r4
   d5c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c78 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5c78:	b570      	push	{r4, r5, r6, lr}
   d5c7a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5c7c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5c7e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5c80:	b149      	cbz	r1, d5c96 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5c82:	f001 ffd7 	bl	d7c34 <strlen>
   d5c86:	682b      	ldr	r3, [r5, #0]
   d5c88:	4602      	mov	r2, r0
   d5c8a:	4621      	mov	r1, r4
   d5c8c:	4628      	mov	r0, r5
   d5c8e:	68db      	ldr	r3, [r3, #12]
    }
   d5c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5c94:	4718      	bx	r3
    }
   d5c96:	bd70      	pop	{r4, r5, r6, pc}

000d5c98 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5c98:	6803      	ldr	r3, [r0, #0]
   d5c9a:	689b      	ldr	r3, [r3, #8]
   d5c9c:	4718      	bx	r3

000d5c9e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c9e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5ca0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5ca2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5ca4:	f7ff fff8 	bl	d5c98 <_ZN5Print5printEc>
  n += print('\n');
   d5ca8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5caa:	4604      	mov	r4, r0
  n += print('\n');
   d5cac:	4628      	mov	r0, r5
   d5cae:	f7ff fff3 	bl	d5c98 <_ZN5Print5printEc>
  return n;
}
   d5cb2:	4420      	add	r0, r4
   d5cb4:	bd38      	pop	{r3, r4, r5, pc}

000d5cb6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5cb6:	b530      	push	{r4, r5, lr}
   d5cb8:	b08b      	sub	sp, #44	; 0x2c
   d5cba:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5cbc:	2100      	movs	r1, #0
   d5cbe:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5cc2:	2a01      	cmp	r2, #1
   d5cc4:	bf98      	it	ls
   d5cc6:	220a      	movls	r2, #10
   d5cc8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5ccc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5cd0:	fb05 3312 	mls	r3, r5, r2, r3
   d5cd4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5cd8:	2b09      	cmp	r3, #9
   d5cda:	bf94      	ite	ls
   d5cdc:	3330      	addls	r3, #48	; 0x30
   d5cde:	3337      	addhi	r3, #55	; 0x37
   d5ce0:	b2db      	uxtb	r3, r3
   d5ce2:	4621      	mov	r1, r4
   d5ce4:	f804 3901 	strb.w	r3, [r4], #-1
   d5ce8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5cea:	2d00      	cmp	r5, #0
   d5cec:	d1ee      	bne.n	d5ccc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5cee:	f7ff ffc3 	bl	d5c78 <_ZN5Print5writeEPKc>
}
   d5cf2:	b00b      	add	sp, #44	; 0x2c
   d5cf4:	bd30      	pop	{r4, r5, pc}

000d5cf6 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5cf6:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5cf8:	b92a      	cbnz	r2, d5d06 <_ZN5Print5printEmi+0x10>
   d5cfa:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5d00:	689b      	ldr	r3, [r3, #8]
   d5d02:	b2c9      	uxtb	r1, r1
   d5d04:	4718      	bx	r3
  else return printNumber(n, base);
   d5d06:	b2d2      	uxtb	r2, r2
}
   d5d08:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5d0c:	f7ff bfd3 	b.w	d5cb6 <_ZN5Print11printNumberEmh>

000d5d10 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5d10:	f7ff bff1 	b.w	d5cf6 <_ZN5Print5printEmi>

000d5d14 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5d14:	b40c      	push	{r2, r3}
   d5d16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5d1a:	b087      	sub	sp, #28
   d5d1c:	af00      	add	r7, sp, #0
   d5d1e:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5d22:	4605      	mov	r5, r0
   d5d24:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5d28:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5d2a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5d2c:	4623      	mov	r3, r4
   d5d2e:	464a      	mov	r2, r9
   d5d30:	2114      	movs	r1, #20
   d5d32:	1d38      	adds	r0, r7, #4
   d5d34:	f7fe fdba 	bl	d48ac <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5d38:	2813      	cmp	r0, #19
   d5d3a:	d805      	bhi.n	d5d48 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5d3c:	1d39      	adds	r1, r7, #4
   d5d3e:	4628      	mov	r0, r5
   d5d40:	f7ff ff9a 	bl	d5c78 <_ZN5Print5writeEPKc>
   d5d44:	4604      	mov	r4, r0
   d5d46:	e013      	b.n	d5d70 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5d48:	f100 0308 	add.w	r3, r0, #8
   d5d4c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5d50:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5d52:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5d56:	1c41      	adds	r1, r0, #1
   d5d58:	4623      	mov	r3, r4
   d5d5a:	464a      	mov	r2, r9
   d5d5c:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5d5e:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5d60:	f7fe fda4 	bl	d48ac <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5d64:	4669      	mov	r1, sp
   d5d66:	4628      	mov	r0, r5
   d5d68:	f7ff ff86 	bl	d5c78 <_ZN5Print5writeEPKc>
   d5d6c:	4604      	mov	r4, r0
   d5d6e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5d70:	b11e      	cbz	r6, d5d7a <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5d72:	4628      	mov	r0, r5
   d5d74:	f7ff ff93 	bl	d5c9e <_ZN5Print7printlnEv>
   d5d78:	4404      	add	r4, r0
    return n;
}
   d5d7a:	4620      	mov	r0, r4
   d5d7c:	371c      	adds	r7, #28
   d5d7e:	46bd      	mov	sp, r7
   d5d80:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5d84:	b002      	add	sp, #8
   d5d86:	4770      	bx	lr

000d5d88 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d5d88:	6880      	ldr	r0, [r0, #8]
   d5d8a:	6803      	ldr	r3, [r0, #0]
   d5d8c:	68db      	ldr	r3, [r3, #12]
   d5d8e:	4718      	bx	r3

000d5d90 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d5d90:	4770      	bx	lr

000d5d92 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d5d92:	b119      	cbz	r1, d5d9c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d5d94:	680b      	ldr	r3, [r1, #0]
   d5d96:	4608      	mov	r0, r1
   d5d98:	685b      	ldr	r3, [r3, #4]
   d5d9a:	4718      	bx	r3
   d5d9c:	4770      	bx	lr

000d5d9e <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d5d9e:	b119      	cbz	r1, d5da8 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d5da0:	680b      	ldr	r3, [r1, #0]
   d5da2:	4608      	mov	r0, r1
   d5da4:	685b      	ldr	r3, [r3, #4]
   d5da6:	4718      	bx	r3
   d5da8:	4770      	bx	lr

000d5daa <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5daa:	4770      	bx	lr

000d5dac <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d5dac:	4770      	bx	lr

000d5dae <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d5dae:	4770      	bx	lr

000d5db0 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d5db0:	b538      	push	{r3, r4, r5, lr}
   d5db2:	4604      	mov	r4, r0
   d5db4:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d5db6:	6800      	ldr	r0, [r0, #0]
   d5db8:	212e      	movs	r1, #46	; 0x2e
   d5dba:	f001 ff27 	bl	d7c0c <strchrnul>
    size = s - category;
   d5dbe:	6823      	ldr	r3, [r4, #0]
   d5dc0:	1ac3      	subs	r3, r0, r3
   d5dc2:	602b      	str	r3, [r5, #0]
    if (size) {
   d5dc4:	b123      	cbz	r3, d5dd0 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d5dc6:	7803      	ldrb	r3, [r0, #0]
   d5dc8:	b103      	cbz	r3, d5dcc <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d5dca:	3001      	adds	r0, #1
   d5dcc:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5dce:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d5dd0:	4618      	mov	r0, r3
}
   d5dd2:	bd38      	pop	{r3, r4, r5, pc}

000d5dd4 <_ZN5spark16JSONStreamWriterD0Ev>:
   d5dd4:	b510      	push	{r4, lr}
   d5dd6:	210c      	movs	r1, #12
   d5dd8:	4604      	mov	r4, r0
   d5dda:	f001 fd3b 	bl	d7854 <_ZdlPvj>
   d5dde:	4620      	mov	r0, r4
   d5de0:	bd10      	pop	{r4, pc}

000d5de2 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d5de2:	b510      	push	{r4, lr}
   d5de4:	2104      	movs	r1, #4
   d5de6:	4604      	mov	r4, r0
   d5de8:	f001 fd34 	bl	d7854 <_ZdlPvj>
   d5dec:	4620      	mov	r0, r4
   d5dee:	bd10      	pop	{r4, pc}

000d5df0 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5df0:	b510      	push	{r4, lr}
   d5df2:	2104      	movs	r1, #4
   d5df4:	4604      	mov	r4, r0
   d5df6:	f001 fd2d 	bl	d7854 <_ZdlPvj>
   d5dfa:	4620      	mov	r0, r4
   d5dfc:	bd10      	pop	{r4, pc}

000d5dfe <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d5dfe:	b538      	push	{r3, r4, r5, lr}
   d5e00:	460c      	mov	r4, r1
   d5e02:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d5e04:	f001 f8ca 	bl	d6f9c <_Z16_fetch_usbserialv>
   d5e08:	4284      	cmp	r4, r0
   d5e0a:	d105      	bne.n	d5e18 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x1a>
        Serial.end();
   d5e0c:	f001 f8c6 	bl	d6f9c <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d5e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
#if PLATFORM_ID != 3
    if (stream == &Serial) {
        Serial.end();
   d5e14:	f001 b8b6 	b.w	d6f84 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d5e18:	f001 f948 	bl	d70ac <_Z22__fetch_global_Serial1v>
   d5e1c:	4284      	cmp	r4, r0
   d5e1e:	d105      	bne.n	d5e2c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
        Serial1.end();
   d5e20:	f001 f944 	bl	d70ac <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d5e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d5e28:	f001 b93d 	b.w	d70a6 <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d5e2c:	4621      	mov	r1, r4
   d5e2e:	4628      	mov	r0, r5
   d5e30:	f7ff ffb5 	bl	d5d9e <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d5e34:	bd38      	pop	{r3, r4, r5, pc}

000d5e36 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d5e36:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d5e38:	f001 fef2 	bl	d7c20 <strcmp>
}
   d5e3c:	fab0 f080 	clz	r0, r0
   d5e40:	0940      	lsrs	r0, r0, #5
   d5e42:	bd08      	pop	{r3, pc}

000d5e44 <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5e44:	b538      	push	{r3, r4, r5, lr}
   d5e46:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d5e48:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5e4a:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d5e4c:	f001 fef2 	bl	d7c34 <strlen>
   d5e50:	4621      	mov	r1, r4
   d5e52:	4602      	mov	r2, r0
   d5e54:	4628      	mov	r0, r5
}
   d5e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d5e5a:	f001 bc52 	b.w	d7702 <_ZN5spark10JSONWriter5valueEPKcj>
	...

000d5e60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5e64:	b085      	sub	sp, #20
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d5e66:	f04f 0800 	mov.w	r8, #0
   d5e6a:	4691      	mov	r9, r2
   d5e6c:	4607      	mov	r7, r0
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d5e6e:	4a48      	ldr	r2, [pc, #288]	; (d5f90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x130>)
   d5e70:	9201      	str	r2, [sp, #4]
   d5e72:	461d      	mov	r5, r3
   d5e74:	6a03      	ldr	r3, [r0, #32]
   d5e76:	9303      	str	r3, [sp, #12]
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d5e78:	a801      	add	r0, sp, #4
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5e7a:	460e      	mov	r6, r1
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d5e7c:	f88d 8008 	strb.w	r8, [sp, #8]
   d5e80:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d5e82:	f001 fbaa 	bl	d75da <_ZN5spark10JSONWriter11beginObjectEv>
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d5e86:	4641      	mov	r1, r8
   d5e88:	4648      	mov	r0, r9
   d5e8a:	f7fe fc73 	bl	d4774 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d5e8e:	4941      	ldr	r1, [pc, #260]	; (d5f94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>)
   d5e90:	4680      	mov	r8, r0
   d5e92:	2201      	movs	r2, #1
   d5e94:	a801      	add	r0, sp, #4
   d5e96:	f001 fc25 	bl	d76e4 <_ZN5spark10JSONWriter4nameEPKcj>
   d5e9a:	4641      	mov	r1, r8
   d5e9c:	f7ff ffd2 	bl	d5e44 <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d5ea0:	b13e      	cbz	r6, d5eb2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x52>
        json.name("m", 1).value(msg);
   d5ea2:	493d      	ldr	r1, [pc, #244]	; (d5f98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x138>)
   d5ea4:	2201      	movs	r2, #1
   d5ea6:	a801      	add	r0, sp, #4
   d5ea8:	f001 fc1c 	bl	d76e4 <_ZN5spark10JSONWriter4nameEPKcj>
   d5eac:	4631      	mov	r1, r6
   d5eae:	f7ff ffc9 	bl	d5e44 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d5eb2:	b13d      	cbz	r5, d5ec4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        json.name("c", 1).value(category);
   d5eb4:	4939      	ldr	r1, [pc, #228]	; (d5f9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>)
   d5eb6:	2201      	movs	r2, #1
   d5eb8:	a801      	add	r0, sp, #4
   d5eba:	f001 fc13 	bl	d76e4 <_ZN5spark10JSONWriter4nameEPKcj>
   d5ebe:	4629      	mov	r1, r5
   d5ec0:	f7ff ffc0 	bl	d5e44 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d5ec4:	7923      	ldrb	r3, [r4, #4]
   d5ec6:	07de      	lsls	r6, r3, #31
   d5ec8:	d50e      	bpl.n	d5ee8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x88>
        s = extractFileName(attr.file); // Strip directory path
   d5eca:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d5ecc:	212f      	movs	r1, #47	; 0x2f
   d5ece:	4628      	mov	r0, r5
   d5ed0:	f001 fecd 	bl	d7c6e <strrchr>
    if (s1) {
   d5ed4:	b100      	cbz	r0, d5ed8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x78>
        return s1 + 1;
   d5ed6:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d5ed8:	4931      	ldr	r1, [pc, #196]	; (d5fa0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>)
   d5eda:	2201      	movs	r2, #1
   d5edc:	a801      	add	r0, sp, #4
   d5ede:	f001 fc01 	bl	d76e4 <_ZN5spark10JSONWriter4nameEPKcj>
   d5ee2:	4629      	mov	r1, r5
   d5ee4:	f7ff ffae 	bl	d5e44 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d5ee8:	7923      	ldrb	r3, [r4, #4]
   d5eea:	079d      	lsls	r5, r3, #30
   d5eec:	d507      	bpl.n	d5efe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9e>
        json.name("ln", 2).value(attr.line);
   d5eee:	492d      	ldr	r1, [pc, #180]	; (d5fa4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d5ef0:	2202      	movs	r2, #2
   d5ef2:	a801      	add	r0, sp, #4
   d5ef4:	f001 fbf6 	bl	d76e4 <_ZN5spark10JSONWriter4nameEPKcj>
   d5ef8:	68e1      	ldr	r1, [r4, #12]
   d5efa:	f001 fb7b 	bl	d75f4 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d5efe:	7923      	ldrb	r3, [r4, #4]
   d5f00:	0758      	lsls	r0, r3, #29
   d5f02:	d516      	bpl.n	d5f32 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5f04:	6925      	ldr	r5, [r4, #16]
   d5f06:	462e      	mov	r6, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d5f08:	4633      	mov	r3, r6
   d5f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5f0e:	b13a      	cbz	r2, d5f20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        if (*s == ' ') {
   d5f10:	2a20      	cmp	r2, #32
   d5f12:	d101      	bne.n	d5f18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
            s1 = s + 1; // Skip return type
   d5f14:	461d      	mov	r5, r3
   d5f16:	e001      	b.n	d5f1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xbc>
        } else if (*s == '(') {
   d5f18:	2a28      	cmp	r2, #40	; 0x28
   d5f1a:	d001      	beq.n	d5f20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5f1c:	461e      	mov	r6, r3
   d5f1e:	e7f3      	b.n	d5f08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa8>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d5f20:	2202      	movs	r2, #2
   d5f22:	4921      	ldr	r1, [pc, #132]	; (d5fa8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d5f24:	a801      	add	r0, sp, #4
   d5f26:	f001 fbdd 	bl	d76e4 <_ZN5spark10JSONWriter4nameEPKcj>
   d5f2a:	1b72      	subs	r2, r6, r5
   d5f2c:	4629      	mov	r1, r5
   d5f2e:	f001 fbe8 	bl	d7702 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d5f32:	7923      	ldrb	r3, [r4, #4]
   d5f34:	0719      	lsls	r1, r3, #28
   d5f36:	d507      	bpl.n	d5f48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        json.name("t", 1).value((unsigned)attr.time);
   d5f38:	491c      	ldr	r1, [pc, #112]	; (d5fac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d5f3a:	2201      	movs	r2, #1
   d5f3c:	a801      	add	r0, sp, #4
   d5f3e:	f001 fbd1 	bl	d76e4 <_ZN5spark10JSONWriter4nameEPKcj>
   d5f42:	6961      	ldr	r1, [r4, #20]
   d5f44:	f001 fb68 	bl	d7618 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d5f48:	7923      	ldrb	r3, [r4, #4]
   d5f4a:	06da      	lsls	r2, r3, #27
   d5f4c:	d508      	bpl.n	d5f60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("code", 4).value((int)attr.code);
   d5f4e:	2204      	movs	r2, #4
   d5f50:	4917      	ldr	r1, [pc, #92]	; (d5fb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d5f52:	eb0d 0002 	add.w	r0, sp, r2
   d5f56:	f001 fbc5 	bl	d76e4 <_ZN5spark10JSONWriter4nameEPKcj>
   d5f5a:	69a1      	ldr	r1, [r4, #24]
   d5f5c:	f001 fb4a 	bl	d75f4 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d5f60:	7923      	ldrb	r3, [r4, #4]
   d5f62:	069b      	lsls	r3, r3, #26
   d5f64:	d507      	bpl.n	d5f76 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x116>
        json.name("detail", 6).value(attr.details);
   d5f66:	4913      	ldr	r1, [pc, #76]	; (d5fb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d5f68:	2206      	movs	r2, #6
   d5f6a:	a801      	add	r0, sp, #4
   d5f6c:	f001 fbba 	bl	d76e4 <_ZN5spark10JSONWriter4nameEPKcj>
   d5f70:	69e1      	ldr	r1, [r4, #28]
   d5f72:	f7ff ff67 	bl	d5e44 <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d5f76:	a801      	add	r0, sp, #4
   d5f78:	f001 fb19 	bl	d75ae <_ZN5spark10JSONWriter9endObjectEv>
   d5f7c:	6a38      	ldr	r0, [r7, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d5f7e:	490e      	ldr	r1, [pc, #56]	; (d5fb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d5f80:	6803      	ldr	r3, [r0, #0]
   d5f82:	2202      	movs	r2, #2
   d5f84:	68db      	ldr	r3, [r3, #12]
   d5f86:	4798      	blx	r3
}
   d5f88:	b005      	add	sp, #20
   d5f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5f8e:	bf00      	nop
   d5f90:	000d800c 	.word	0x000d800c
   d5f94:	000d8098 	.word	0x000d8098
   d5f98:	000d80ab 	.word	0x000d80ab
   d5f9c:	000d8120 	.word	0x000d8120
   d5fa0:	000d804c 	.word	0x000d804c
   d5fa4:	000d804e 	.word	0x000d804e
   d5fa8:	000d8051 	.word	0x000d8051
   d5fac:	000d80c0 	.word	0x000d80c0
   d5fb0:	000d8054 	.word	0x000d8054
   d5fb4:	000d8059 	.word	0x000d8059
   d5fb8:	000d8060 	.word	0x000d8060

000d5fbc <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5fbc:	6800      	ldr	r0, [r0, #0]
   d5fbe:	f7fe bb29 	b.w	d4614 <os_mutex_recursive_lock>

000d5fc2 <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5fc2:	b570      	push	{r4, r5, r6, lr}
   d5fc4:	4604      	mov	r4, r0
    write(str, strlen(str));
   d5fc6:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5fc8:	460d      	mov	r5, r1
    write(str, strlen(str));
   d5fca:	f001 fe33 	bl	d7c34 <strlen>
   d5fce:	6823      	ldr	r3, [r4, #0]
   d5fd0:	4602      	mov	r2, r0
   d5fd2:	4629      	mov	r1, r5
   d5fd4:	4620      	mov	r0, r4
   d5fd6:	68db      	ldr	r3, [r3, #12]
}
   d5fd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d5fdc:	4718      	bx	r3

000d5fde <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d5fde:	b513      	push	{r0, r1, r4, lr}
   d5fe0:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d5fe2:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d5fe4:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d5fe8:	68d4      	ldr	r4, [r2, #12]
   d5fea:	4619      	mov	r1, r3
   d5fec:	2201      	movs	r2, #1
   d5fee:	47a0      	blx	r4
}
   d5ff0:	b002      	add	sp, #8
   d5ff2:	bd10      	pop	{r4, pc}

000d5ff4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ff8:	9d06      	ldr	r5, [sp, #24]
   d5ffa:	4698      	mov	r8, r3
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d5ffc:	792b      	ldrb	r3, [r5, #4]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5ffe:	460e      	mov	r6, r1
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d6000:	0719      	lsls	r1, r3, #28
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6002:	4604      	mov	r4, r0
   d6004:	4617      	mov	r7, r2
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d6006:	d505      	bpl.n	d6014 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x20>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d6008:	696b      	ldr	r3, [r5, #20]
   d600a:	4a54      	ldr	r2, [pc, #336]	; (d615c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d600c:	6a00      	ldr	r0, [r0, #32]
   d600e:	2100      	movs	r1, #0
   d6010:	f7ff fe80 	bl	d5d14 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d6014:	f1b8 0f00 	cmp.w	r8, #0
   d6018:	d00d      	beq.n	d6036 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x42>
        write('[');
   d601a:	215b      	movs	r1, #91	; 0x5b
   d601c:	4620      	mov	r0, r4
   d601e:	f7ff ffde 	bl	d5fde <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d6022:	4641      	mov	r1, r8
   d6024:	4620      	mov	r0, r4
   d6026:	f7ff ffcc 	bl	d5fc2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d602a:	6823      	ldr	r3, [r4, #0]
   d602c:	494c      	ldr	r1, [pc, #304]	; (d6160 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d602e:	68db      	ldr	r3, [r3, #12]
   d6030:	2202      	movs	r2, #2
   d6032:	4620      	mov	r0, r4
   d6034:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d6036:	792b      	ldrb	r3, [r5, #4]
   d6038:	07da      	lsls	r2, r3, #31
   d603a:	d525      	bpl.n	d6088 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
        s = extractFileName(attr.file); // Strip directory path
   d603c:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d6040:	212f      	movs	r1, #47	; 0x2f
   d6042:	4640      	mov	r0, r8
   d6044:	f001 fe13 	bl	d7c6e <strrchr>
    if (s1) {
   d6048:	b108      	cbz	r0, d604e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        return s1 + 1;
   d604a:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d604e:	4641      	mov	r1, r8
   d6050:	4620      	mov	r0, r4
   d6052:	f7ff ffb6 	bl	d5fc2 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d6056:	792b      	ldrb	r3, [r5, #4]
   d6058:	079b      	lsls	r3, r3, #30
   d605a:	d509      	bpl.n	d6070 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
            write(':');
   d605c:	213a      	movs	r1, #58	; 0x3a
   d605e:	4620      	mov	r0, r4
   d6060:	f7ff ffbd 	bl	d5fde <_ZN5spark16StreamLogHandler5writeEc>
   d6064:	68eb      	ldr	r3, [r5, #12]
   d6066:	4a3f      	ldr	r2, [pc, #252]	; (d6164 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d6068:	6a20      	ldr	r0, [r4, #32]
   d606a:	2100      	movs	r1, #0
   d606c:	f7ff fe52 	bl	d5d14 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d6070:	792b      	ldrb	r3, [r5, #4]
   d6072:	f013 0f04 	tst.w	r3, #4
   d6076:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d6078:	bf18      	it	ne
   d607a:	493b      	ldrne	r1, [pc, #236]	; (d6168 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d607c:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d607e:	bf08      	it	eq
   d6080:	493a      	ldreq	r1, [pc, #232]	; (d616c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d6082:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d6084:	4620      	mov	r0, r4
   d6086:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d6088:	792b      	ldrb	r3, [r5, #4]
   d608a:	0758      	lsls	r0, r3, #29
   d608c:	d518      	bpl.n	d60c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xcc>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d608e:	6929      	ldr	r1, [r5, #16]
   d6090:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d6092:	4613      	mov	r3, r2
   d6094:	f813 0b01 	ldrb.w	r0, [r3], #1
   d6098:	b138      	cbz	r0, d60aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        if (*s == ' ') {
   d609a:	2820      	cmp	r0, #32
   d609c:	d101      	bne.n	d60a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xae>
            s1 = s + 1; // Skip return type
   d609e:	4619      	mov	r1, r3
   d60a0:	e001      	b.n	d60a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb2>
        } else if (*s == '(') {
   d60a2:	2828      	cmp	r0, #40	; 0x28
   d60a4:	d001      	beq.n	d60aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d60a6:	461a      	mov	r2, r3
   d60a8:	e7f3      	b.n	d6092 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9e>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d60aa:	6823      	ldr	r3, [r4, #0]
   d60ac:	1a52      	subs	r2, r2, r1
   d60ae:	68db      	ldr	r3, [r3, #12]
   d60b0:	4620      	mov	r0, r4
   d60b2:	4798      	blx	r3
        write("(): ", 4);
   d60b4:	6823      	ldr	r3, [r4, #0]
   d60b6:	492e      	ldr	r1, [pc, #184]	; (d6170 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d60b8:	68db      	ldr	r3, [r3, #12]
   d60ba:	2204      	movs	r2, #4
   d60bc:	4620      	mov	r0, r4
   d60be:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d60c0:	2100      	movs	r1, #0
   d60c2:	4638      	mov	r0, r7
   d60c4:	f7fe fb56 	bl	d4774 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d60c8:	4601      	mov	r1, r0
   d60ca:	4620      	mov	r0, r4
   d60cc:	f7ff ff79 	bl	d5fc2 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d60d0:	6823      	ldr	r3, [r4, #0]
   d60d2:	4926      	ldr	r1, [pc, #152]	; (d616c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d60d4:	68db      	ldr	r3, [r3, #12]
   d60d6:	2202      	movs	r2, #2
   d60d8:	4620      	mov	r0, r4
   d60da:	4798      	blx	r3
    // Message
    if (msg) {
   d60dc:	b11e      	cbz	r6, d60e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xf2>
        write(msg);
   d60de:	4631      	mov	r1, r6
   d60e0:	4620      	mov	r0, r4
   d60e2:	f7ff ff6e 	bl	d5fc2 <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d60e6:	792b      	ldrb	r3, [r5, #4]
   d60e8:	f013 0f30 	tst.w	r3, #48	; 0x30
   d60ec:	d02d      	beq.n	d614a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x156>
        write(" [", 2);
   d60ee:	6823      	ldr	r3, [r4, #0]
   d60f0:	4920      	ldr	r1, [pc, #128]	; (d6174 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d60f2:	68db      	ldr	r3, [r3, #12]
   d60f4:	2202      	movs	r2, #2
   d60f6:	4620      	mov	r0, r4
   d60f8:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d60fa:	792b      	ldrb	r3, [r5, #4]
   d60fc:	06d9      	lsls	r1, r3, #27
   d60fe:	d50b      	bpl.n	d6118 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x124>
            write("code = ", 7);
   d6100:	6823      	ldr	r3, [r4, #0]
   d6102:	491d      	ldr	r1, [pc, #116]	; (d6178 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d6104:	68db      	ldr	r3, [r3, #12]
   d6106:	2207      	movs	r2, #7
   d6108:	4620      	mov	r0, r4
   d610a:	4798      	blx	r3
   d610c:	69ab      	ldr	r3, [r5, #24]
   d610e:	4a1b      	ldr	r2, [pc, #108]	; (d617c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d6110:	6a20      	ldr	r0, [r4, #32]
   d6112:	2100      	movs	r1, #0
   d6114:	f7ff fdfe 	bl	d5d14 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d6118:	792b      	ldrb	r3, [r5, #4]
   d611a:	069a      	lsls	r2, r3, #26
   d611c:	d511      	bpl.n	d6142 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14e>
            if (attr.has_code) {
   d611e:	06db      	lsls	r3, r3, #27
   d6120:	d505      	bpl.n	d612e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13a>
                write(", ", 2);
   d6122:	6823      	ldr	r3, [r4, #0]
   d6124:	4910      	ldr	r1, [pc, #64]	; (d6168 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d6126:	68db      	ldr	r3, [r3, #12]
   d6128:	2202      	movs	r2, #2
   d612a:	4620      	mov	r0, r4
   d612c:	4798      	blx	r3
            }
            write("details = ", 10);
   d612e:	6823      	ldr	r3, [r4, #0]
   d6130:	4913      	ldr	r1, [pc, #76]	; (d6180 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d6132:	68db      	ldr	r3, [r3, #12]
   d6134:	4620      	mov	r0, r4
   d6136:	220a      	movs	r2, #10
   d6138:	4798      	blx	r3
            write(attr.details);
   d613a:	69e9      	ldr	r1, [r5, #28]
   d613c:	4620      	mov	r0, r4
   d613e:	f7ff ff40 	bl	d5fc2 <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d6142:	215d      	movs	r1, #93	; 0x5d
   d6144:	4620      	mov	r0, r4
   d6146:	f7ff ff4a 	bl	d5fde <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d614a:	6823      	ldr	r3, [r4, #0]
   d614c:	490d      	ldr	r1, [pc, #52]	; (d6184 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d614e:	68db      	ldr	r3, [r3, #12]
   d6150:	4620      	mov	r0, r4
   d6152:	2202      	movs	r2, #2
}
   d6154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d6158:	4718      	bx	r3
   d615a:	bf00      	nop
   d615c:	000d8063 	.word	0x000d8063
   d6160:	000d806a 	.word	0x000d806a
   d6164:	000d7fe6 	.word	0x000d7fe6
   d6168:	000d806d 	.word	0x000d806d
   d616c:	000d8072 	.word	0x000d8072
   d6170:	000d8070 	.word	0x000d8070
   d6174:	000d8075 	.word	0x000d8075
   d6178:	000d8078 	.word	0x000d8078
   d617c:	000d8080 	.word	0x000d8080
   d6180:	000d8083 	.word	0x000d8083
   d6184:	000d8060 	.word	0x000d8060

000d6188 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d618c:	6845      	ldr	r5, [r0, #4]
   d618e:	6807      	ldr	r7, [r0, #0]
   d6190:	b085      	sub	sp, #20
   d6192:	4691      	mov	r9, r2
   d6194:	2214      	movs	r2, #20
   d6196:	4355      	muls	r5, r2
   d6198:	9301      	str	r3, [sp, #4]
   d619a:	10ab      	asrs	r3, r5, #2
   d619c:	4d19      	ldr	r5, [pc, #100]	; (d6204 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d619e:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d61a0:	435d      	muls	r5, r3
   d61a2:	468b      	mov	fp, r1
   d61a4:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d61a6:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d61a8:	2d00      	cmp	r5, #0
   d61aa:	9303      	str	r3, [sp, #12]
   d61ac:	dd23      	ble.n	d61f6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d61ae:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d61b0:	106e      	asrs	r6, r5, #1
   d61b2:	fb03 f006 	mul.w	r0, r3, r6
   d61b6:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d61ba:	464a      	mov	r2, r9
   d61bc:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d61c0:	5820      	ldr	r0, [r4, r0]
   d61c2:	45d1      	cmp	r9, sl
   d61c4:	bf28      	it	cs
   d61c6:	4652      	movcs	r2, sl
   d61c8:	4659      	mov	r1, fp
   d61ca:	f001 fd3b 	bl	d7c44 <strncmp>
                if (cmp == 0) {
   d61ce:	9b03      	ldr	r3, [sp, #12]
   d61d0:	b948      	cbnz	r0, d61e6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d61d2:	45d1      	cmp	r9, sl
   d61d4:	d103      	bne.n	d61de <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d61d6:	9a01      	ldr	r2, [sp, #4]
   d61d8:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d61da:	4635      	mov	r5, r6
   d61dc:	e7e4      	b.n	d61a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d61de:	bf8c      	ite	hi
   d61e0:	2001      	movhi	r0, #1
   d61e2:	2000      	movls	r0, #0
   d61e4:	e000      	b.n	d61e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d61e6:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d61e8:	2800      	cmp	r0, #0
   d61ea:	d0f6      	beq.n	d61da <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d61ec:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d61ee:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d61f2:	3e01      	subs	r6, #1
   d61f4:	e7f1      	b.n	d61da <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d61f6:	1be4      	subs	r4, r4, r7
}
   d61f8:	4802      	ldr	r0, [pc, #8]	; (d6204 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d61fa:	10a4      	asrs	r4, r4, #2
}
   d61fc:	4360      	muls	r0, r4
   d61fe:	b005      	add	sp, #20
   d6200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6204:	cccccccd 	.word	0xcccccccd

000d6208 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6208:	b5f0      	push	{r4, r5, r6, r7, lr}
   d620a:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d620c:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d620e:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d6210:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d6212:	b313      	cbz	r3, d625a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d6214:	b309      	cbz	r1, d625a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6216:	af04      	add	r7, sp, #16
   d6218:	2300      	movs	r3, #0
   d621a:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d621e:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6222:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6224:	4639      	mov	r1, r7
   d6226:	a801      	add	r0, sp, #4
   d6228:	f7ff fdc2 	bl	d5db0 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d622c:	4601      	mov	r1, r0
   d622e:	b1a0      	cbz	r0, d625a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d6230:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d6232:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6234:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d6238:	4620      	mov	r0, r4
   d623a:	f7ff ffa5 	bl	d6188 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d623e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6242:	b153      	cbz	r3, d625a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d6244:	6823      	ldr	r3, [r4, #0]
   d6246:	2414      	movs	r4, #20
   d6248:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d624c:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d624e:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d6252:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d6254:	bfa8      	it	ge
   d6256:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6258:	e7e4      	b.n	d6224 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d625a:	4630      	mov	r0, r6
   d625c:	b005      	add	sp, #20
   d625e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6260 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d6260:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d6262:	4c09      	ldr	r4, [pc, #36]	; (d6288 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d6264:	6823      	ldr	r3, [r4, #0]
   d6266:	07db      	lsls	r3, r3, #31
   d6268:	d40b      	bmi.n	d6282 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d626a:	4620      	mov	r0, r4
   d626c:	f7fd ff24 	bl	d40b8 <__cxa_guard_acquire>
   d6270:	b138      	cbz	r0, d6282 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6272:	4620      	mov	r0, r4
   d6274:	f7fd ff25 	bl	d40c2 <__cxa_guard_release>
   d6278:	4a04      	ldr	r2, [pc, #16]	; (d628c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d627a:	4905      	ldr	r1, [pc, #20]	; (d6290 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d627c:	4805      	ldr	r0, [pc, #20]	; (d6294 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d627e:	f001 fadb 	bl	d7838 <__aeabi_atexit>
    return &factory;
}
   d6282:	4804      	ldr	r0, [pc, #16]	; (d6294 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6284:	bd10      	pop	{r4, pc}
   d6286:	bf00      	nop
   d6288:	2003e3c0 	.word	0x2003e3c0
   d628c:	2003e32c 	.word	0x2003e32c
   d6290:	000d5dad 	.word	0x000d5dad
   d6294:	2003e2b8 	.word	0x2003e2b8

000d6298 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d6298:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d629a:	4c09      	ldr	r4, [pc, #36]	; (d62c0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d629c:	6823      	ldr	r3, [r4, #0]
   d629e:	07db      	lsls	r3, r3, #31
   d62a0:	d40b      	bmi.n	d62ba <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d62a2:	4620      	mov	r0, r4
   d62a4:	f7fd ff08 	bl	d40b8 <__cxa_guard_acquire>
   d62a8:	b138      	cbz	r0, d62ba <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d62aa:	4620      	mov	r0, r4
   d62ac:	f7fd ff09 	bl	d40c2 <__cxa_guard_release>
   d62b0:	4a04      	ldr	r2, [pc, #16]	; (d62c4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d62b2:	4905      	ldr	r1, [pc, #20]	; (d62c8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d62b4:	4805      	ldr	r0, [pc, #20]	; (d62cc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d62b6:	f001 fabf 	bl	d7838 <__aeabi_atexit>
    return &factory;
}
   d62ba:	4804      	ldr	r0, [pc, #16]	; (d62cc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d62bc:	bd10      	pop	{r4, pc}
   d62be:	bf00      	nop
   d62c0:	2003e3f0 	.word	0x2003e3f0
   d62c4:	2003e32c 	.word	0x2003e32c
   d62c8:	000d5dab 	.word	0x000d5dab
   d62cc:	2003e2bc 	.word	0x2003e2bc

000d62d0 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d62d0:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d62d2:	2500      	movs	r5, #0
   d62d4:	4604      	mov	r4, r0
   d62d6:	6005      	str	r5, [r0, #0]
   d62d8:	6045      	str	r5, [r0, #4]
   d62da:	6085      	str	r5, [r0, #8]
   d62dc:	6105      	str	r5, [r0, #16]
   d62de:	6145      	str	r5, [r0, #20]
   d62e0:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d62e2:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d62e6:	f7fe f98d 	bl	d4604 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d62ea:	f7ff ffb9 	bl	d6260 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d62ee:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d62f0:	f7ff ffd2 	bl	d6298 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d62f4:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d62f6:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d62f8:	4620      	mov	r0, r4
   d62fa:	bd38      	pop	{r3, r4, r5, pc}

000d62fc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d62fc:	b510      	push	{r4, lr}
    static LogManager mgr;
   d62fe:	4c0a      	ldr	r4, [pc, #40]	; (d6328 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d6300:	6823      	ldr	r3, [r4, #0]
   d6302:	07db      	lsls	r3, r3, #31
   d6304:	d40e      	bmi.n	d6324 <_ZN5spark10LogManager8instanceEv+0x28>
   d6306:	4620      	mov	r0, r4
   d6308:	f7fd fed6 	bl	d40b8 <__cxa_guard_acquire>
   d630c:	b150      	cbz	r0, d6324 <_ZN5spark10LogManager8instanceEv+0x28>
   d630e:	4807      	ldr	r0, [pc, #28]	; (d632c <_ZN5spark10LogManager8instanceEv+0x30>)
   d6310:	f7ff ffde 	bl	d62d0 <_ZN5spark10LogManagerC1Ev>
   d6314:	4620      	mov	r0, r4
   d6316:	f7fd fed4 	bl	d40c2 <__cxa_guard_release>
   d631a:	4a05      	ldr	r2, [pc, #20]	; (d6330 <_ZN5spark10LogManager8instanceEv+0x34>)
   d631c:	4905      	ldr	r1, [pc, #20]	; (d6334 <_ZN5spark10LogManager8instanceEv+0x38>)
   d631e:	4803      	ldr	r0, [pc, #12]	; (d632c <_ZN5spark10LogManager8instanceEv+0x30>)
   d6320:	f001 fa8a 	bl	d7838 <__aeabi_atexit>
    return &mgr;
}
   d6324:	4801      	ldr	r0, [pc, #4]	; (d632c <_ZN5spark10LogManager8instanceEv+0x30>)
   d6326:	bd10      	pop	{r4, pc}
   d6328:	2003e3c4 	.word	0x2003e3c4
   d632c:	2003e3c8 	.word	0x2003e3c8
   d6330:	2003e32c 	.word	0x2003e32c
   d6334:	000d6767 	.word	0x000d6767

000d6338 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d6338:	2300      	movs	r3, #0
   d633a:	4a02      	ldr	r2, [pc, #8]	; (d6344 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d633c:	4902      	ldr	r1, [pc, #8]	; (d6348 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d633e:	4803      	ldr	r0, [pc, #12]	; (d634c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d6340:	f7fe ba20 	b.w	d4784 <log_set_callbacks>
   d6344:	000d6649 	.word	0x000d6649
   d6348:	000d65d9 	.word	0x000d65d9
   d634c:	000d6561 	.word	0x000d6561

000d6350 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d6350:	2300      	movs	r3, #0
   d6352:	461a      	mov	r2, r3
   d6354:	4619      	mov	r1, r3
   d6356:	4618      	mov	r0, r3
   d6358:	f7fe ba14 	b.w	d4784 <log_set_callbacks>

000d635c <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d635c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d635e:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d6360:	68ce      	ldr	r6, [r1, #12]
   d6362:	f851 3b04 	ldr.w	r3, [r1], #4
   d6366:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d636a:	4605      	mov	r5, r0
   d636c:	a801      	add	r0, sp, #4
   d636e:	f7fe feb2 	bl	d50d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d6372:	4622      	mov	r2, r4
   d6374:	4631      	mov	r1, r6
   d6376:	4628      	mov	r0, r5
   d6378:	f001 f9e8 	bl	d774c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d637c:	a801      	add	r0, sp, #4
   d637e:	f7fe fe97 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6382:	4628      	mov	r0, r5
   d6384:	b002      	add	sp, #8
   d6386:	bd70      	pop	{r4, r5, r6, pc}

000d6388 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6388:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d638a:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d638c:	690e      	ldr	r6, [r1, #16]
   d638e:	f851 3b04 	ldr.w	r3, [r1], #4
   d6392:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6396:	4605      	mov	r5, r0
   d6398:	a801      	add	r0, sp, #4
   d639a:	f7fe fe9c 	bl	d50d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d639e:	4622      	mov	r2, r4
   d63a0:	4631      	mov	r1, r6
   d63a2:	4628      	mov	r0, r5
   d63a4:	f001 fa15 	bl	d77d2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63a8:	a801      	add	r0, sp, #4
   d63aa:	f7fe fe81 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d63ae:	4628      	mov	r0, r5
   d63b0:	b002      	add	sp, #8
   d63b2:	bd70      	pop	{r4, r5, r6, pc}

000d63b4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d63b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d63b6:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d63b8:	688e      	ldr	r6, [r1, #8]
   d63ba:	f851 3b04 	ldr.w	r3, [r1], #4
   d63be:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d63c2:	4605      	mov	r5, r0
   d63c4:	a801      	add	r0, sp, #4
   d63c6:	f7fe fe86 	bl	d50d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d63ca:	4622      	mov	r2, r4
   d63cc:	4631      	mov	r1, r6
   d63ce:	4628      	mov	r0, r5
   d63d0:	f001 f9e4 	bl	d779c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63d4:	a801      	add	r0, sp, #4
   d63d6:	f7fe fe6b 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d63da:	4628      	mov	r0, r5
   d63dc:	b002      	add	sp, #8
   d63de:	bd70      	pop	{r4, r5, r6, pc}

000d63e0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d63e0:	b530      	push	{r4, r5, lr}
   d63e2:	b08b      	sub	sp, #44	; 0x2c
   d63e4:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d63e6:	4601      	mov	r1, r0
   d63e8:	a804      	add	r0, sp, #16
   d63ea:	f7ff ffe3 	bl	d63b4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d63ee:	a804      	add	r0, sp, #16
   d63f0:	f001 f8c9 	bl	d7586 <_ZN5spark18JSONObjectIterator4nextEv>
   d63f4:	b1e8      	cbz	r0, d6432 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d63f6:	a904      	add	r1, sp, #16
   d63f8:	4668      	mov	r0, sp
   d63fa:	f7ff ffaf 	bl	d635c <_ZNK5spark18JSONObjectIterator4nameEv>
   d63fe:	490f      	ldr	r1, [pc, #60]	; (d643c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d6400:	9802      	ldr	r0, [sp, #8]
   d6402:	f7ff fd18 	bl	d5e36 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d6406:	4604      	mov	r4, r0
   d6408:	b110      	cbz	r0, d6410 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d640a:	1c2c      	adds	r4, r5, #0
   d640c:	bf18      	it	ne
   d640e:	2401      	movne	r4, #1
   d6410:	a801      	add	r0, sp, #4
   d6412:	f7fe fe4d 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6416:	2c00      	cmp	r4, #0
   d6418:	d0e9      	beq.n	d63ee <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d641a:	a904      	add	r1, sp, #16
   d641c:	4668      	mov	r0, sp
   d641e:	f7ff ffb3 	bl	d6388 <_ZNK5spark18JSONObjectIterator5valueEv>
   d6422:	4668      	mov	r0, sp
   d6424:	f001 f88f 	bl	d7546 <_ZNK5spark9JSONValue5toIntEv>
   d6428:	6028      	str	r0, [r5, #0]
   d642a:	a801      	add	r0, sp, #4
   d642c:	f7fe fe40 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6430:	e7dd      	b.n	d63ee <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d6432:	a805      	add	r0, sp, #20
   d6434:	f7fe fe3c 	bl	d50b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d6438:	b00b      	add	sp, #44	; 0x2c
   d643a:	bd30      	pop	{r4, r5, pc}
   d643c:	000d808e 	.word	0x000d808e

000d6440 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6440:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6442:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d6444:	4620      	mov	r0, r4
   d6446:	4913      	ldr	r1, [pc, #76]	; (d6494 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6448:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d644a:	f001 fbe9 	bl	d7c20 <strcmp>
   d644e:	b940      	cbnz	r0, d6462 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d6450:	f000 fda4 	bl	d6f9c <_Z16_fetch_usbserialv>
   d6454:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d6458:	f000 fd90 	bl	d6f7c <_ZN9USBSerial5beginEl>
        return &Serial;
   d645c:	f000 fd9e 	bl	d6f9c <_Z16_fetch_usbserialv>
   d6460:	e015      	b.n	d648e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d6462:	490d      	ldr	r1, [pc, #52]	; (d6498 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d6464:	4620      	mov	r0, r4
   d6466:	f001 fbdb 	bl	d7c20 <strcmp>
   d646a:	b978      	cbnz	r0, d648c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d646c:	a902      	add	r1, sp, #8
   d646e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d6472:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d6476:	4628      	mov	r0, r5
   d6478:	f7ff ffb2 	bl	d63e0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d647c:	f000 fe16 	bl	d70ac <_Z22__fetch_global_Serial1v>
   d6480:	9901      	ldr	r1, [sp, #4]
   d6482:	f000 fe0d 	bl	d70a0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d6486:	f000 fe11 	bl	d70ac <_Z22__fetch_global_Serial1v>
   d648a:	e000      	b.n	d648e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d648c:	2000      	movs	r0, #0
}
   d648e:	b003      	add	sp, #12
   d6490:	bd30      	pop	{r4, r5, pc}
   d6492:	bf00      	nop
   d6494:	000d8093 	.word	0x000d8093
   d6498:	000d809a 	.word	0x000d809a

000d649c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d649c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d649e:	6804      	ldr	r4, [r0, #0]
   d64a0:	6843      	ldr	r3, [r0, #4]
   d64a2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d64a4:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d64a6:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d64aa:	42a6      	cmp	r6, r4
   d64ac:	d005      	beq.n	d64ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d64ae:	f104 0008 	add.w	r0, r4, #8
   d64b2:	f7ff fff3 	bl	d649c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d64b6:	3414      	adds	r4, #20
   d64b8:	e7f7      	b.n	d64aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d64ba:	6828      	ldr	r0, [r5, #0]
   d64bc:	f7fe f9e6 	bl	d488c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d64c0:	4628      	mov	r0, r5
   d64c2:	bd70      	pop	{r4, r5, r6, pc}

000d64c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d64c4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d64c6:	6804      	ldr	r4, [r0, #0]
   d64c8:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d64ca:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d64cc:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d64d0:	42a6      	cmp	r6, r4
   d64d2:	d004      	beq.n	d64de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d64d4:	4620      	mov	r0, r4
   d64d6:	f7fe fa67 	bl	d49a8 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d64da:	3410      	adds	r4, #16
   d64dc:	e7f8      	b.n	d64d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d64de:	6828      	ldr	r0, [r5, #0]
   d64e0:	f7fe f9d4 	bl	d488c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d64e4:	4628      	mov	r0, r5
   d64e6:	bd70      	pop	{r4, r5, r6, pc}

000d64e8 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d64e8:	b510      	push	{r4, lr}
   d64ea:	4604      	mov	r4, r0
   d64ec:	300c      	adds	r0, #12
   d64ee:	f7ff ffd5 	bl	d649c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d64f2:	4620      	mov	r0, r4
   d64f4:	f7ff ffe6 	bl	d64c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d64f8:	4620      	mov	r0, r4
   d64fa:	bd10      	pop	{r4, pc}

000d64fc <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d64fc:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d64fe:	4b04      	ldr	r3, [pc, #16]	; (d6510 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6500:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d6502:	f840 3b04 	str.w	r3, [r0], #4
   d6506:	f7ff ffef 	bl	d64e8 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d650a:	4620      	mov	r0, r4
   d650c:	bd10      	pop	{r4, pc}
   d650e:	bf00      	nop
   d6510:	000d7dd0 	.word	0x000d7dd0

000d6514 <_ZN5spark16StreamLogHandlerD0Ev>:
   d6514:	b510      	push	{r4, lr}
   d6516:	4604      	mov	r4, r0
   d6518:	f7ff fff0 	bl	d64fc <_ZN5spark16StreamLogHandlerD1Ev>
   d651c:	4620      	mov	r0, r4
   d651e:	2124      	movs	r1, #36	; 0x24
   d6520:	f001 f998 	bl	d7854 <_ZdlPvj>
   d6524:	4620      	mov	r0, r4
   d6526:	bd10      	pop	{r4, pc}

000d6528 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d6528:	b510      	push	{r4, lr}
   d652a:	4b03      	ldr	r3, [pc, #12]	; (d6538 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d652c:	6003      	str	r3, [r0, #0]
   d652e:	4604      	mov	r4, r0
   d6530:	f7ff ffe4 	bl	d64fc <_ZN5spark16StreamLogHandlerD1Ev>
   d6534:	4620      	mov	r0, r4
   d6536:	bd10      	pop	{r4, pc}
   d6538:	000d8024 	.word	0x000d8024

000d653c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d653c:	b510      	push	{r4, lr}
   d653e:	4604      	mov	r4, r0
   d6540:	f7ff fff2 	bl	d6528 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d6544:	4620      	mov	r0, r4
   d6546:	2124      	movs	r1, #36	; 0x24
   d6548:	f001 f984 	bl	d7854 <_ZdlPvj>
   d654c:	4620      	mov	r0, r4
   d654e:	bd10      	pop	{r4, pc}

000d6550 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6550:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6552:	6803      	ldr	r3, [r0, #0]
   d6554:	4604      	mov	r4, r0
   d6556:	6818      	ldr	r0, [r3, #0]
   d6558:	f7fe f864 	bl	d4624 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d655c:	4620      	mov	r0, r4
   d655e:	bd10      	pop	{r4, pc}

000d6560 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6564:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d6566:	4b1b      	ldr	r3, [pc, #108]	; (d65d4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d6568:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d656a:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d656e:	b085      	sub	sp, #20
   d6570:	4682      	mov	sl, r0
   d6572:	460e      	mov	r6, r1
   d6574:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6576:	bb53      	cbnz	r3, d65ce <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d6578:	f7ff fec0 	bl	d62fc <_ZN5spark10LogManager8instanceEv>
   d657c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d657e:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6580:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6582:	f7ff fd1b 	bl	d5fbc <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6586:	7b23      	ldrb	r3, [r4, #12]
   d6588:	b9f3      	cbnz	r3, d65c8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d658a:	2301      	movs	r3, #1
   d658c:	7323      	strb	r3, [r4, #12]
   d658e:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6590:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d6592:	b2f6      	uxtb	r6, r6
   d6594:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6598:	454d      	cmp	r5, r9
   d659a:	d013      	beq.n	d65c4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d659c:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d65a0:	4641      	mov	r1, r8
   d65a2:	1d38      	adds	r0, r7, #4
   d65a4:	f7ff fe30 	bl	d6208 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d65a8:	4286      	cmp	r6, r0
   d65aa:	d3f5      	bcc.n	d6598 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d65ac:	683b      	ldr	r3, [r7, #0]
   d65ae:	f8cd b000 	str.w	fp, [sp]
   d65b2:	689b      	ldr	r3, [r3, #8]
   d65b4:	469e      	mov	lr, r3
   d65b6:	4638      	mov	r0, r7
   d65b8:	4643      	mov	r3, r8
   d65ba:	4632      	mov	r2, r6
   d65bc:	4651      	mov	r1, sl
   d65be:	4677      	mov	r7, lr
   d65c0:	47b8      	blx	r7
   d65c2:	e7e9      	b.n	d6598 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d65c4:	2300      	movs	r3, #0
   d65c6:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d65c8:	a803      	add	r0, sp, #12
   d65ca:	f7ff ffc1 	bl	d6550 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d65ce:	b005      	add	sp, #20
   d65d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d65d4:	e000ed00 	.word	0xe000ed00

000d65d8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d65d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d65dc:	4699      	mov	r9, r3
   d65de:	4b19      	ldr	r3, [pc, #100]	; (d6644 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d65e0:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d65e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d65e6:	4607      	mov	r7, r0
   d65e8:	4688      	mov	r8, r1
   d65ea:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d65ec:	bb33      	cbnz	r3, d663c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d65ee:	f7ff fe85 	bl	d62fc <_ZN5spark10LogManager8instanceEv>
   d65f2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d65f4:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d65f6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d65f8:	f7ff fce0 	bl	d5fbc <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d65fc:	7b23      	ldrb	r3, [r4, #12]
   d65fe:	b9d3      	cbnz	r3, d6636 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6600:	2301      	movs	r3, #1
   d6602:	7323      	strb	r3, [r4, #12]
   d6604:	6825      	ldr	r5, [r4, #0]
   d6606:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d6608:	fa5f fb86 	uxtb.w	fp, r6
   d660c:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6610:	4555      	cmp	r5, sl
   d6612:	d00e      	beq.n	d6632 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d6614:	f855 6b04 	ldr.w	r6, [r5], #4
   d6618:	4649      	mov	r1, r9
   d661a:	1d30      	adds	r0, r6, #4
   d661c:	f7ff fdf4 	bl	d6208 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6620:	4583      	cmp	fp, r0
   d6622:	d3f5      	bcc.n	d6610 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d6624:	6833      	ldr	r3, [r6, #0]
   d6626:	4642      	mov	r2, r8
   d6628:	68db      	ldr	r3, [r3, #12]
   d662a:	4639      	mov	r1, r7
   d662c:	4630      	mov	r0, r6
   d662e:	4798      	blx	r3
   d6630:	e7ee      	b.n	d6610 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6632:	2300      	movs	r3, #0
   d6634:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d6636:	a801      	add	r0, sp, #4
   d6638:	f7ff ff8a 	bl	d6550 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d663c:	b003      	add	sp, #12
   d663e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6642:	bf00      	nop
   d6644:	e000ed00 	.word	0xe000ed00

000d6648 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6648:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d664c:	4b15      	ldr	r3, [pc, #84]	; (d66a4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d664e:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6650:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6654:	4604      	mov	r4, r0
   d6656:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6658:	b9fb      	cbnz	r3, d669a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d665a:	f7ff fe4f 	bl	d62fc <_ZN5spark10LogManager8instanceEv>
   d665e:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6660:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6662:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6664:	f7ff fcaa 	bl	d5fbc <_ZN14RecursiveMutex4lockEv>
   d6668:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d666c:	2646      	movs	r6, #70	; 0x46
   d666e:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d6672:	42af      	cmp	r7, r5
   d6674:	d107      	bne.n	d6686 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6676:	a801      	add	r0, sp, #4
   d6678:	f7ff ff6a 	bl	d6550 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d667c:	42b4      	cmp	r4, r6
   d667e:	bfb4      	ite	lt
   d6680:	2000      	movlt	r0, #0
   d6682:	2001      	movge	r0, #1
   d6684:	e00a      	b.n	d669c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d6686:	f855 0b04 	ldr.w	r0, [r5], #4
   d668a:	4641      	mov	r1, r8
   d668c:	3004      	adds	r0, #4
   d668e:	f7ff fdbb 	bl	d6208 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6692:	4286      	cmp	r6, r0
   d6694:	bfa8      	it	ge
   d6696:	4606      	movge	r6, r0
   d6698:	e7eb      	b.n	d6672 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d669a:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d669c:	b002      	add	sp, #8
   d669e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d66a2:	bf00      	nop
   d66a4:	e000ed00 	.word	0xe000ed00

000d66a8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d66a8:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d66aa:	6803      	ldr	r3, [r0, #0]
   d66ac:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d66ae:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d66b0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d66b4:	429a      	cmp	r2, r3
   d66b6:	4618      	mov	r0, r3
   d66b8:	d00e      	beq.n	d66d8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d66ba:	6806      	ldr	r6, [r0, #0]
   d66bc:	680d      	ldr	r5, [r1, #0]
   d66be:	42ae      	cmp	r6, r5
   d66c0:	f103 0304 	add.w	r3, r3, #4
   d66c4:	d1f6      	bne.n	d66b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d66c6:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d66c8:	1a52      	subs	r2, r2, r1
   d66ca:	f001 fa45 	bl	d7b58 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d66ce:	6863      	ldr	r3, [r4, #4]
   d66d0:	3b01      	subs	r3, #1
   d66d2:	6063      	str	r3, [r4, #4]
    return true;
   d66d4:	2001      	movs	r0, #1
}
   d66d6:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d66d8:	2000      	movs	r0, #0
   d66da:	bd70      	pop	{r4, r5, r6, pc}

000d66dc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d66dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d66de:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d66e0:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d66e2:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d66e4:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d66e6:	f7ff fc69 	bl	d5fbc <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d66ea:	a901      	add	r1, sp, #4
   d66ec:	4620      	mov	r0, r4
   d66ee:	f7ff ffdb 	bl	d66a8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d66f2:	b920      	cbnz	r0, d66fe <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d66f4:	a803      	add	r0, sp, #12
   d66f6:	f7ff ff2b 	bl	d6550 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d66fa:	b004      	add	sp, #16
   d66fc:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d66fe:	6863      	ldr	r3, [r4, #4]
   d6700:	2b00      	cmp	r3, #0
   d6702:	d1f7      	bne.n	d66f4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d6704:	f7ff fe24 	bl	d6350 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d6708:	e7f4      	b.n	d66f4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d670a <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d670a:	b570      	push	{r4, r5, r6, lr}
   d670c:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d670e:	6943      	ldr	r3, [r0, #20]
   d6710:	2618      	movs	r6, #24
   d6712:	4604      	mov	r4, r0
   d6714:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d6718:	42ae      	cmp	r6, r5
   d671a:	d015      	beq.n	d6748 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d671c:	f105 0110 	add.w	r1, r5, #16
   d6720:	4620      	mov	r0, r4
   d6722:	f7ff ffc1 	bl	d66a8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d6726:	6863      	ldr	r3, [r4, #4]
   d6728:	b90b      	cbnz	r3, d672e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d672a:	f7ff fe11 	bl	d6350 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d672e:	69e0      	ldr	r0, [r4, #28]
   d6730:	6929      	ldr	r1, [r5, #16]
   d6732:	6803      	ldr	r3, [r0, #0]
   d6734:	68db      	ldr	r3, [r3, #12]
   d6736:	4798      	blx	r3
        if (h.stream) {
   d6738:	6969      	ldr	r1, [r5, #20]
   d673a:	b119      	cbz	r1, d6744 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d673c:	6a20      	ldr	r0, [r4, #32]
   d673e:	6803      	ldr	r3, [r0, #0]
   d6740:	68db      	ldr	r3, [r3, #12]
   d6742:	4798      	blx	r3
   d6744:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d6746:	e7e7      	b.n	d6718 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6748:	6925      	ldr	r5, [r4, #16]
   d674a:	6963      	ldr	r3, [r4, #20]
   d674c:	2618      	movs	r6, #24
   d674e:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6752:	42b5      	cmp	r5, r6
   d6754:	d004      	beq.n	d6760 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6756:	4628      	mov	r0, r5
   d6758:	f7fe f926 	bl	d49a8 <_ZN6StringD1Ev>
   d675c:	3518      	adds	r5, #24
   d675e:	e7f8      	b.n	d6752 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6760:	2300      	movs	r3, #0
   d6762:	6163      	str	r3, [r4, #20]
   d6764:	bd70      	pop	{r4, r5, r6, pc}

000d6766 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d6766:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6768:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d676a:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d676c:	f7ff fdf0 	bl	d6350 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6770:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6774:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d6778:	f7ff fc20 	bl	d5fbc <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d677c:	4620      	mov	r0, r4
   d677e:	f7ff ffc4 	bl	d670a <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6782:	4628      	mov	r0, r5
   d6784:	f7ff fee4 	bl	d6550 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6788:	6925      	ldr	r5, [r4, #16]
   d678a:	6963      	ldr	r3, [r4, #20]
   d678c:	2618      	movs	r6, #24
   d678e:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6792:	42b5      	cmp	r5, r6
   d6794:	d004      	beq.n	d67a0 <_ZN5spark10LogManagerD1Ev+0x3a>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6796:	4628      	mov	r0, r5
   d6798:	f7fe f906 	bl	d49a8 <_ZN6StringD1Ev>
   d679c:	3518      	adds	r5, #24
   d679e:	e7f8      	b.n	d6792 <_ZN5spark10LogManagerD1Ev+0x2c>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d67a0:	6920      	ldr	r0, [r4, #16]
   d67a2:	f7fe f873 	bl	d488c <free>
   d67a6:	6820      	ldr	r0, [r4, #0]
   d67a8:	f7fe f870 	bl	d488c <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d67ac:	4620      	mov	r0, r4
   d67ae:	b002      	add	sp, #8
   d67b0:	bd70      	pop	{r4, r5, r6, pc}

000d67b2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d67b2:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d67b4:	680a      	ldr	r2, [r1, #0]
   d67b6:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d67b8:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d67ba:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d67bc:	684a      	ldr	r2, [r1, #4]
   d67be:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d67c0:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d67c2:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d67c4:	688a      	ldr	r2, [r1, #8]
   d67c6:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d67c8:	608b      	str	r3, [r1, #8]
   d67ca:	4770      	bx	lr

000d67cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d67cc:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d67ce:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d67d0:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d67d2:	6003      	str	r3, [r0, #0]
   d67d4:	6043      	str	r3, [r0, #4]
   d67d6:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d67d8:	f7ff ffeb 	bl	d67b2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d67dc:	4620      	mov	r0, r4
   d67de:	bd10      	pop	{r4, pc}

000d67e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d67e0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d67e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67e4:	4604      	mov	r4, r0
   d67e6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d67e8:	d925      	bls.n	d6836 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d67ea:	4290      	cmp	r0, r2
   d67ec:	d224      	bcs.n	d6838 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d67ee:	1a55      	subs	r5, r2, r1
   d67f0:	3d14      	subs	r5, #20
   d67f2:	442c      	add	r4, r5
   d67f4:	f1a1 0714 	sub.w	r7, r1, #20
   d67f8:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d67fc:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d67fe:	f1a5 0308 	sub.w	r3, r5, #8
   d6802:	429f      	cmp	r7, r3
   d6804:	d037      	beq.n	d6876 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d6806:	b184      	cbz	r4, d682a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6808:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d680c:	6023      	str	r3, [r4, #0]
   d680e:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6812:	80a3      	strh	r3, [r4, #4]
   d6814:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6818:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d681a:	60a6      	str	r6, [r4, #8]
   d681c:	60e6      	str	r6, [r4, #12]
   d681e:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6820:	4629      	mov	r1, r5
   d6822:	f104 0008 	add.w	r0, r4, #8
   d6826:	f7ff ffc4 	bl	d67b2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d682a:	4628      	mov	r0, r5
   d682c:	f7ff fe36 	bl	d649c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6830:	3c14      	subs	r4, #20
   d6832:	3d14      	subs	r5, #20
   d6834:	e7e3      	b.n	d67fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6836:	d01e      	beq.n	d6876 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d6838:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d683c:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d683e:	f1a5 0308 	sub.w	r3, r5, #8
   d6842:	429e      	cmp	r6, r3
   d6844:	d017      	beq.n	d6876 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d6846:	b184      	cbz	r4, d686a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d6848:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d684c:	6023      	str	r3, [r4, #0]
   d684e:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6852:	80a3      	strh	r3, [r4, #4]
   d6854:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6858:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d685a:	60a7      	str	r7, [r4, #8]
   d685c:	60e7      	str	r7, [r4, #12]
   d685e:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6860:	4629      	mov	r1, r5
   d6862:	f104 0008 	add.w	r0, r4, #8
   d6866:	f7ff ffa4 	bl	d67b2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d686a:	4628      	mov	r0, r5
   d686c:	f7ff fe16 	bl	d649c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6870:	3414      	adds	r4, #20
   d6872:	3514      	adds	r5, #20
   d6874:	e7e3      	b.n	d683e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d6876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6878 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d687a:	6845      	ldr	r5, [r0, #4]
   d687c:	6883      	ldr	r3, [r0, #8]
   d687e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6880:	4604      	mov	r4, r0
   d6882:	460e      	mov	r6, r1
   d6884:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6886:	db0e      	blt.n	d68a6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d6888:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d688a:	2d00      	cmp	r5, #0
   d688c:	dd05      	ble.n	d689a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d688e:	00a9      	lsls	r1, r5, #2
   d6890:	6800      	ldr	r0, [r0, #0]
   d6892:	f7fe f803 	bl	d489c <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d6896:	b920      	cbnz	r0, d68a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d6898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d689a:	6800      	ldr	r0, [r0, #0]
   d689c:	f7fd fff6 	bl	d488c <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d68a0:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d68a2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d68a4:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d68a6:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d68a8:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d68aa:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d68ae:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d68b2:	1a52      	subs	r2, r2, r1
   d68b4:	1d08      	adds	r0, r1, #4
   d68b6:	f001 f94f 	bl	d7b58 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d68ba:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d68be:	6863      	ldr	r3, [r4, #4]
   d68c0:	3301      	adds	r3, #1
   d68c2:	6063      	str	r3, [r4, #4]
   d68c4:	2001      	movs	r0, #1
    return true;
}
   d68c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d68c8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d68c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d68ca:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d68cc:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d68ce:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d68d0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d68d2:	f7ff fb73 	bl	d5fbc <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d68d6:	6823      	ldr	r3, [r4, #0]
   d68d8:	6861      	ldr	r1, [r4, #4]
   d68da:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d68de:	4283      	cmp	r3, r0
   d68e0:	461a      	mov	r2, r3
   d68e2:	d009      	beq.n	d68f8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d68e4:	6812      	ldr	r2, [r2, #0]
   d68e6:	42aa      	cmp	r2, r5
   d68e8:	f103 0304 	add.w	r3, r3, #4
   d68ec:	d1f7      	bne.n	d68de <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d68ee:	a801      	add	r0, sp, #4
   d68f0:	f7ff fe2e 	bl	d6550 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d68f4:	2500      	movs	r5, #0
   d68f6:	e00e      	b.n	d6916 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d68f8:	462a      	mov	r2, r5
   d68fa:	4620      	mov	r0, r4
   d68fc:	f7ff ffbc 	bl	d6878 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d6900:	4605      	mov	r5, r0
   d6902:	2800      	cmp	r0, #0
   d6904:	d0f3      	beq.n	d68ee <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d6906:	6863      	ldr	r3, [r4, #4]
   d6908:	2b01      	cmp	r3, #1
   d690a:	d101      	bne.n	d6910 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d690c:	f7ff fd14 	bl	d6338 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6910:	a801      	add	r0, sp, #4
   d6912:	f7ff fe1d 	bl	d6550 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d6916:	4628      	mov	r0, r5
   d6918:	b003      	add	sp, #12
   d691a:	bd30      	pop	{r4, r5, pc}

000d691c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d691c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d691e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6920:	4606      	mov	r6, r0
   d6922:	460c      	mov	r4, r1
   d6924:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6926:	d914      	bls.n	d6952 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d6928:	4290      	cmp	r0, r2
   d692a:	d213      	bcs.n	d6954 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d692c:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d6930:	1a6c      	subs	r4, r5, r1
   d6932:	f1a1 0710 	sub.w	r7, r1, #16
   d6936:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6938:	42af      	cmp	r7, r5
   d693a:	d018      	beq.n	d696e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d693c:	b11c      	cbz	r4, d6946 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d693e:	4629      	mov	r1, r5
   d6940:	4620      	mov	r0, r4
   d6942:	f7fe f821 	bl	d4988 <_ZN6StringC1EOS_>
                end->~T();
   d6946:	4628      	mov	r0, r5
   d6948:	f7fe f82e 	bl	d49a8 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d694c:	3d10      	subs	r5, #16
   d694e:	3c10      	subs	r4, #16
   d6950:	e7f2      	b.n	d6938 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6952:	d00c      	beq.n	d696e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d6954:	42ac      	cmp	r4, r5
   d6956:	d00a      	beq.n	d696e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d6958:	b11e      	cbz	r6, d6962 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d695a:	4621      	mov	r1, r4
   d695c:	4630      	mov	r0, r6
   d695e:	f7fe f813 	bl	d4988 <_ZN6StringC1EOS_>
                p->~T();
   d6962:	4620      	mov	r0, r4
   d6964:	f7fe f820 	bl	d49a8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6968:	3410      	adds	r4, #16
   d696a:	3610      	adds	r6, #16
   d696c:	e7f2      	b.n	d6954 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d696e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6970 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6970:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6972:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6974:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6976:	dd0b      	ble.n	d6990 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6978:	0130      	lsls	r0, r6, #4
   d697a:	f7fd ff7f 	bl	d487c <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d697e:	4604      	mov	r4, r0
   d6980:	b170      	cbz	r0, d69a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6982:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6986:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d698a:	f7ff ffc7 	bl	d691c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d698e:	e000      	b.n	d6992 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6990:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6992:	6828      	ldr	r0, [r5, #0]
   d6994:	f7fd ff7a 	bl	d488c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6998:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d699a:	60ae      	str	r6, [r5, #8]
        return true;
   d699c:	2001      	movs	r0, #1
   d699e:	bd70      	pop	{r4, r5, r6, pc}
    }
   d69a0:	bd70      	pop	{r4, r5, r6, pc}

000d69a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d69a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d69a6:	2300      	movs	r3, #0
   d69a8:	b095      	sub	sp, #84	; 0x54
   d69aa:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d69ac:	2246      	movs	r2, #70	; 0x46
   d69ae:	6003      	str	r3, [r0, #0]
   d69b0:	6043      	str	r3, [r0, #4]
   d69b2:	6083      	str	r3, [r0, #8]
   d69b4:	60c3      	str	r3, [r0, #12]
   d69b6:	6103      	str	r3, [r0, #16]
   d69b8:	6143      	str	r3, [r0, #20]
   d69ba:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d69bc:	9102      	str	r1, [sp, #8]
   d69be:	f8da 1004 	ldr.w	r1, [sl, #4]
   d69c2:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d69c4:	4299      	cmp	r1, r3
   d69c6:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d69c8:	9309      	str	r3, [sp, #36]	; 0x24
   d69ca:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d69cc:	f340 809d 	ble.w	d6b0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d69d0:	a808      	add	r0, sp, #32
   d69d2:	f7ff ffcd 	bl	d6970 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d69d6:	2800      	cmp	r0, #0
   d69d8:	f040 8097 	bne.w	d6b0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d69dc:	e08e      	b.n	d6afc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d69de:	4621      	mov	r1, r4
   d69e0:	a80b      	add	r0, sp, #44	; 0x2c
   d69e2:	f7fd ffd1 	bl	d4988 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d69e6:	a90b      	add	r1, sp, #44	; 0x2c
   d69e8:	a80f      	add	r0, sp, #60	; 0x3c
   d69ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d69ec:	f7fd ffcc 	bl	d4988 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d69f0:	9909      	ldr	r1, [sp, #36]	; 0x24
   d69f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d69f4:	4299      	cmp	r1, r3
   d69f6:	f2c0 80ce 	blt.w	d6b96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d69fa:	3101      	adds	r1, #1
   d69fc:	a808      	add	r0, sp, #32
   d69fe:	f7ff ffb7 	bl	d6970 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6a02:	2800      	cmp	r0, #0
   d6a04:	f040 80c7 	bne.w	d6b96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6a08:	a80f      	add	r0, sp, #60	; 0x3c
   d6a0a:	f7fd ffcd 	bl	d49a8 <_ZN6StringD1Ev>
   d6a0e:	a80b      	add	r0, sp, #44	; 0x2c
   d6a10:	f7fd ffca 	bl	d49a8 <_ZN6StringD1Ev>
   d6a14:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d6a16:	42a7      	cmp	r7, r4
   d6a18:	d1e1      	bne.n	d69de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6a1a:	2600      	movs	r6, #0
   d6a1c:	960b      	str	r6, [sp, #44]	; 0x2c
   d6a1e:	960c      	str	r6, [sp, #48]	; 0x30
   d6a20:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6a22:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6a26:	429e      	cmp	r6, r3
   d6a28:	f280 80a8 	bge.w	d6b7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d6a2c:	0133      	lsls	r3, r6, #4
   d6a2e:	9a08      	ldr	r2, [sp, #32]
   d6a30:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d6a32:	9306      	str	r3, [sp, #24]
        if (!category) {
   d6a34:	2b00      	cmp	r3, #0
   d6a36:	f000 809f 	beq.w	d6b78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d6a3a:	2314      	movs	r3, #20
   d6a3c:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6a3e:	f8cd 901c 	str.w	r9, [sp, #28]
   d6a42:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d6a44:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6a46:	a907      	add	r1, sp, #28
   d6a48:	a806      	add	r0, sp, #24
   d6a4a:	f7ff f9b1 	bl	d5db0 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6a4e:	4607      	mov	r7, r0
   d6a50:	2800      	cmp	r0, #0
   d6a52:	f000 8091 	beq.w	d6b78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d6a56:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d6a58:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6a5a:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d6a5e:	9a07      	ldr	r2, [sp, #28]
   d6a60:	4620      	mov	r0, r4
   d6a62:	f7ff fb91 	bl	d6188 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6a66:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d6a6a:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6a6c:	f1b8 0f00 	cmp.w	r8, #0
   d6a70:	d153      	bne.n	d6b1a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d6a72:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d6a76:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d6a7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6a7e:	970f      	str	r7, [sp, #60]	; 0x3c
   d6a80:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d6a84:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d6a88:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d6a8c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6a90:	6867      	ldr	r7, [r4, #4]
   d6a92:	68a3      	ldr	r3, [r4, #8]
   d6a94:	429f      	cmp	r7, r3
   d6a96:	da4f      	bge.n	d6b38 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d6a98:	9b00      	ldr	r3, [sp, #0]
   d6a9a:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d6a9e:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6aa0:	2214      	movs	r2, #20
   d6aa2:	4353      	muls	r3, r2
   d6aa4:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d6aa8:	fb02 b201 	mla	r2, r2, r1, fp
   d6aac:	f107 0014 	add.w	r0, r7, #20
   d6ab0:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6ab2:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d6ab4:	f7ff fe94 	bl	d67e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d6ab8:	b1a7      	cbz	r7, d6ae4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6aba:	9b03      	ldr	r3, [sp, #12]
   d6abc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d6abe:	f84b 2003 	str.w	r2, [fp, r3]
   d6ac2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d6ac6:	80bb      	strh	r3, [r7, #4]
   d6ac8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d6acc:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6ace:	f8c7 9008 	str.w	r9, [r7, #8]
   d6ad2:	f8c7 900c 	str.w	r9, [r7, #12]
   d6ad6:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6ada:	a911      	add	r1, sp, #68	; 0x44
   d6adc:	f107 0008 	add.w	r0, r7, #8
   d6ae0:	f7ff fe67 	bl	d67b2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d6ae4:	6863      	ldr	r3, [r4, #4]
   d6ae6:	3301      	adds	r3, #1
   d6ae8:	6063      	str	r3, [r4, #4]
   d6aea:	a811      	add	r0, sp, #68	; 0x44
   d6aec:	f7ff fcd6 	bl	d649c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6af0:	f1b8 0f00 	cmp.w	r8, #0
   d6af4:	d011      	beq.n	d6b1a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d6af6:	a80b      	add	r0, sp, #44	; 0x2c
   d6af8:	f7ff fcd0 	bl	d649c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6afc:	a808      	add	r0, sp, #32
   d6afe:	f7ff fce1 	bl	d64c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d6b02:	4628      	mov	r0, r5
   d6b04:	b015      	add	sp, #84	; 0x54
   d6b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6b0a:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6b0e:	f8da 3004 	ldr.w	r3, [sl, #4]
   d6b12:	2714      	movs	r7, #20
   d6b14:	fb07 4703 	mla	r7, r7, r3, r4
   d6b18:	e77d      	b.n	d6a16 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d6b1a:	6823      	ldr	r3, [r4, #0]
   d6b1c:	9a00      	ldr	r2, [sp, #0]
   d6b1e:	2414      	movs	r4, #20
   d6b20:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d6b24:	9b06      	ldr	r3, [sp, #24]
   d6b26:	781b      	ldrb	r3, [r3, #0]
   d6b28:	bb23      	cbnz	r3, d6b74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d6b2a:	f8da 3000 	ldr.w	r3, [sl]
   d6b2e:	9a01      	ldr	r2, [sp, #4]
   d6b30:	4413      	add	r3, r2
   d6b32:	7c1b      	ldrb	r3, [r3, #16]
   d6b34:	80e3      	strh	r3, [r4, #6]
   d6b36:	e01d      	b.n	d6b74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6b38:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6b3a:	2f00      	cmp	r7, #0
   d6b3c:	dd0f      	ble.n	d6b5e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6b3e:	2314      	movs	r3, #20
   d6b40:	fb03 f007 	mul.w	r0, r3, r7
   d6b44:	9303      	str	r3, [sp, #12]
   d6b46:	f7fd fe99 	bl	d487c <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6b4a:	4683      	mov	fp, r0
   d6b4c:	b178      	cbz	r0, d6b6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d6b4e:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6b52:	9b03      	ldr	r3, [sp, #12]
   d6b54:	fb03 1202 	mla	r2, r3, r2, r1
   d6b58:	f7ff fe42 	bl	d67e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d6b5c:	e000      	b.n	d6b60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6b5e:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6b60:	6820      	ldr	r0, [r4, #0]
   d6b62:	f7fd fe93 	bl	d488c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6b66:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d6b6a:	60a7      	str	r7, [r4, #8]
   d6b6c:	e794      	b.n	d6a98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6b6e:	f04f 0801 	mov.w	r8, #1
   d6b72:	e7ba      	b.n	d6aea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d6b74:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6b76:	e766      	b.n	d6a46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6b78:	3601      	adds	r6, #1
   d6b7a:	e753      	b.n	d6a24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d6b7c:	a908      	add	r1, sp, #32
   d6b7e:	4628      	mov	r0, r5
   d6b80:	f7ff fe17 	bl	d67b2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d6b84:	a90b      	add	r1, sp, #44	; 0x2c
   d6b86:	f105 000c 	add.w	r0, r5, #12
   d6b8a:	f7ff fe12 	bl	d67b2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d6b8e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6b92:	762b      	strb	r3, [r5, #24]
   d6b94:	e7af      	b.n	d6af6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6b96:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d6b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6b9a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d6b9e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d6ba2:	4631      	mov	r1, r6
   d6ba4:	f106 0010 	add.w	r0, r6, #16
   d6ba8:	f7ff feb8 	bl	d691c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d6bac:	b11e      	cbz	r6, d6bb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d6bae:	a90f      	add	r1, sp, #60	; 0x3c
   d6bb0:	4630      	mov	r0, r6
   d6bb2:	f7fd fee9 	bl	d4988 <_ZN6StringC1EOS_>
    ++size_;
   d6bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6bb8:	3301      	adds	r3, #1
   d6bba:	9309      	str	r3, [sp, #36]	; 0x24
   d6bbc:	e724      	b.n	d6a08 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d6bc0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6bc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d6bc2:	4604      	mov	r4, r0
   d6bc4:	4b09      	ldr	r3, [pc, #36]	; (d6bec <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d6bc6:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6bca:	4605      	mov	r5, r0
   d6bcc:	460e      	mov	r6, r1
        filter_(level, filters) {
   d6bce:	a801      	add	r0, sp, #4
   d6bd0:	4611      	mov	r1, r2
   d6bd2:	f7fd fb82 	bl	d42da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6bd6:	aa01      	add	r2, sp, #4
   d6bd8:	4631      	mov	r1, r6
   d6bda:	4620      	mov	r0, r4
   d6bdc:	f7ff fee1 	bl	d69a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6be0:	a801      	add	r0, sp, #4
   d6be2:	f7fd fb39 	bl	d4258 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d6be6:	4628      	mov	r0, r5
   d6be8:	b004      	add	sp, #16
   d6bea:	bd70      	pop	{r4, r5, r6, pc}
   d6bec:	000d7dd0 	.word	0x000d7dd0

000d6bf0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6bf2:	460f      	mov	r7, r1
   d6bf4:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6bf6:	492b      	ldr	r1, [pc, #172]	; (d6ca4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6bf8:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6bfa:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6bfc:	4616      	mov	r6, r2
   d6bfe:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6c00:	f001 f80e 	bl	d7c20 <strcmp>
   d6c04:	bb28      	cbnz	r0, d6c52 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d6c06:	2c00      	cmp	r4, #0
   d6c08:	d049      	beq.n	d6c9e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d6c0a:	4629      	mov	r1, r5
   d6c0c:	a801      	add	r0, sp, #4
   d6c0e:	f7ff fddd 	bl	d67cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6c12:	4925      	ldr	r1, [pc, #148]	; (d6ca8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6c14:	2024      	movs	r0, #36	; 0x24
   d6c16:	f000 fe1f 	bl	d7858 <_ZnwjRKSt9nothrow_t>
   d6c1a:	4605      	mov	r5, r0
   d6c1c:	b1b8      	cbz	r0, d6c4e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d6c1e:	a901      	add	r1, sp, #4
   d6c20:	a804      	add	r0, sp, #16
   d6c22:	f7ff fdd3 	bl	d67cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d6c26:	a904      	add	r1, sp, #16
   d6c28:	a807      	add	r0, sp, #28
   d6c2a:	f7fd fb56 	bl	d42da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6c2e:	aa07      	add	r2, sp, #28
   d6c30:	4631      	mov	r1, r6
   d6c32:	4628      	mov	r0, r5
   d6c34:	f7ff ffc4 	bl	d6bc0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6c38:	a807      	add	r0, sp, #28
   d6c3a:	f7fd fb0d 	bl	d4258 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6c3e:	4b1b      	ldr	r3, [pc, #108]	; (d6cac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6c40:	602b      	str	r3, [r5, #0]
   d6c42:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d6c44:	a804      	add	r0, sp, #16
   d6c46:	f7fd fb07 	bl	d4258 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6c4a:	4b19      	ldr	r3, [pc, #100]	; (d6cb0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d6c4c:	602b      	str	r3, [r5, #0]
   d6c4e:	a801      	add	r0, sp, #4
   d6c50:	e01f      	b.n	d6c92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d6c52:	4918      	ldr	r1, [pc, #96]	; (d6cb4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d6c54:	4638      	mov	r0, r7
   d6c56:	f000 ffe3 	bl	d7c20 <strcmp>
   d6c5a:	b9f0      	cbnz	r0, d6c9a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d6c5c:	b1fc      	cbz	r4, d6c9e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d6c5e:	4629      	mov	r1, r5
   d6c60:	a804      	add	r0, sp, #16
   d6c62:	f7ff fdb3 	bl	d67cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6c66:	4910      	ldr	r1, [pc, #64]	; (d6ca8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6c68:	2024      	movs	r0, #36	; 0x24
   d6c6a:	f000 fdf5 	bl	d7858 <_ZnwjRKSt9nothrow_t>
   d6c6e:	4605      	mov	r5, r0
   d6c70:	b170      	cbz	r0, d6c90 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d6c72:	a904      	add	r1, sp, #16
   d6c74:	a807      	add	r0, sp, #28
   d6c76:	f7fd fb30 	bl	d42da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6c7a:	aa07      	add	r2, sp, #28
   d6c7c:	4631      	mov	r1, r6
   d6c7e:	4628      	mov	r0, r5
   d6c80:	f7ff ff9e 	bl	d6bc0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6c84:	a807      	add	r0, sp, #28
   d6c86:	f7fd fae7 	bl	d4258 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6c8a:	4b08      	ldr	r3, [pc, #32]	; (d6cac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6c8c:	602b      	str	r3, [r5, #0]
   d6c8e:	622c      	str	r4, [r5, #32]
   d6c90:	a804      	add	r0, sp, #16
   d6c92:	f7fd fae1 	bl	d4258 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6c96:	4628      	mov	r0, r5
   d6c98:	e002      	b.n	d6ca0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d6c9a:	2000      	movs	r0, #0
   d6c9c:	e000      	b.n	d6ca0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d6c9e:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d6ca0:	b00b      	add	sp, #44	; 0x2c
   d6ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6ca4:	000d80ec 	.word	0x000d80ec
   d6ca8:	000d82b4 	.word	0x000d82b4
   d6cac:	000d8130 	.word	0x000d8130
   d6cb0:	000d8024 	.word	0x000d8024
   d6cb4:	000d80f0 	.word	0x000d80f0

000d6cb8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6cb8:	4b01      	ldr	r3, [pc, #4]	; (d6cc0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6cba:	4a02      	ldr	r2, [pc, #8]	; (d6cc4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6cbc:	601a      	str	r2, [r3, #0]
   d6cbe:	4770      	bx	lr
   d6cc0:	2003e3f4 	.word	0x2003e3f4
   d6cc4:	000d7e2d 	.word	0x000d7e2d

000d6cc8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6cc8:	4b02      	ldr	r3, [pc, #8]	; (d6cd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6cca:	681a      	ldr	r2, [r3, #0]
   d6ccc:	4b02      	ldr	r3, [pc, #8]	; (d6cd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6cce:	601a      	str	r2, [r3, #0]
   d6cd0:	4770      	bx	lr
   d6cd2:	bf00      	nop
   d6cd4:	2003e2c0 	.word	0x2003e2c0
   d6cd8:	2003e3f8 	.word	0x2003e3f8

000d6cdc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6cdc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6cde:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6ce0:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6ce2:	b113      	cbz	r3, d6cea <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6ce4:	2203      	movs	r2, #3
   d6ce6:	4601      	mov	r1, r0
   d6ce8:	4798      	blx	r3
    }
   d6cea:	4620      	mov	r0, r4
   d6cec:	bd10      	pop	{r4, pc}

000d6cee <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6cee:	b510      	push	{r4, lr}
   d6cf0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6cf2:	f7ff fff3 	bl	d6cdc <_ZNSt14_Function_baseD1Ev>
   d6cf6:	4620      	mov	r0, r4
   d6cf8:	bd10      	pop	{r4, pc}
	...

000d6cfc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6cfc:	4803      	ldr	r0, [pc, #12]	; (d6d0c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6cfe:	4a04      	ldr	r2, [pc, #16]	; (d6d10 <_GLOBAL__sub_I_RGB+0x14>)
   d6d00:	4904      	ldr	r1, [pc, #16]	; (d6d14 <_GLOBAL__sub_I_RGB+0x18>)
   d6d02:	2300      	movs	r3, #0
   d6d04:	6083      	str	r3, [r0, #8]
   d6d06:	f000 bd97 	b.w	d7838 <__aeabi_atexit>
   d6d0a:	bf00      	nop
   d6d0c:	2003e3fc 	.word	0x2003e3fc
   d6d10:	2003e32c 	.word	0x2003e32c
   d6d14:	000d6cef 	.word	0x000d6cef

000d6d18 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6d18:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6d1a:	4b0c      	ldr	r3, [pc, #48]	; (d6d4c <serialEventRun+0x34>)
   d6d1c:	b133      	cbz	r3, d6d2c <serialEventRun+0x14>
   d6d1e:	f000 f93d 	bl	d6f9c <_Z16_fetch_usbserialv>
   d6d22:	6803      	ldr	r3, [r0, #0]
   d6d24:	691b      	ldr	r3, [r3, #16]
   d6d26:	4798      	blx	r3
   d6d28:	2800      	cmp	r0, #0
   d6d2a:	dc09      	bgt.n	d6d40 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6d2c:	4b08      	ldr	r3, [pc, #32]	; (d6d50 <serialEventRun+0x38>)
   d6d2e:	b163      	cbz	r3, d6d4a <serialEventRun+0x32>
   d6d30:	f000 f9bc 	bl	d70ac <_Z22__fetch_global_Serial1v>
   d6d34:	6803      	ldr	r3, [r0, #0]
   d6d36:	691b      	ldr	r3, [r3, #16]
   d6d38:	4798      	blx	r3
   d6d3a:	2800      	cmp	r0, #0
   d6d3c:	dc03      	bgt.n	d6d46 <serialEventRun+0x2e>
   d6d3e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6d40:	f3af 8000 	nop.w
   d6d44:	e7f2      	b.n	d6d2c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6d46:	f3af 8000 	nop.w
   d6d4a:	bd08      	pop	{r3, pc}
	...

000d6d54 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6d54:	b508      	push	{r3, lr}
	serialEventRun();
   d6d56:	f7ff ffdf 	bl	d6d18 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6d5a:	f7fd fbd1 	bl	d4500 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6d5e:	4b01      	ldr	r3, [pc, #4]	; (d6d64 <_post_loop+0x10>)
   d6d60:	6018      	str	r0, [r3, #0]
   d6d62:	bd08      	pop	{r3, pc}
   d6d64:	2003e748 	.word	0x2003e748

000d6d68 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6d68:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6d6a:	2300      	movs	r3, #0
   d6d6c:	9300      	str	r3, [sp, #0]
   d6d6e:	461a      	mov	r2, r3
   d6d70:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6d74:	f7fd fd20 	bl	d47b8 <system_ctrl_set_result>
}
   d6d78:	b003      	add	sp, #12
   d6d7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6d80 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6d80:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6d82:	8843      	ldrh	r3, [r0, #2]
   d6d84:	2b0a      	cmp	r3, #10
   d6d86:	d008      	beq.n	d6d9a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6d88:	2b50      	cmp	r3, #80	; 0x50
   d6d8a:	d109      	bne.n	d6da0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6d8c:	4b09      	ldr	r3, [pc, #36]	; (d6db4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6d8e:	681b      	ldr	r3, [r3, #0]
   d6d90:	b13b      	cbz	r3, d6da2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6d92:	b003      	add	sp, #12
   d6d94:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6d98:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6d9a:	f7ff ffe5 	bl	d6d68 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6d9e:	e006      	b.n	d6dae <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6da0:	2300      	movs	r3, #0
   d6da2:	9300      	str	r3, [sp, #0]
   d6da4:	461a      	mov	r2, r3
   d6da6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6daa:	f7fd fd05 	bl	d47b8 <system_ctrl_set_result>
        break;
    }
}
   d6dae:	b003      	add	sp, #12
   d6db0:	f85d fb04 	ldr.w	pc, [sp], #4
   d6db4:	2003e40c 	.word	0x2003e40c

000d6db8 <module_user_init_hook>:

void module_user_init_hook()
{
   d6db8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6dba:	f7fd fb91 	bl	d44e0 <HAL_RNG_GetRandomNumber>
   d6dbe:	4604      	mov	r4, r0
    srand(seed);
   d6dc0:	f000 feee 	bl	d7ba0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6dc4:	4b07      	ldr	r3, [pc, #28]	; (d6de4 <module_user_init_hook+0x2c>)
   d6dc6:	b113      	cbz	r3, d6dce <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6dc8:	4620      	mov	r0, r4
   d6dca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6dce:	2100      	movs	r1, #0
   d6dd0:	4804      	ldr	r0, [pc, #16]	; (d6de4 <module_user_init_hook+0x2c>)
   d6dd2:	f7fd fd4b 	bl	d486c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6dd6:	2100      	movs	r1, #0
   d6dd8:	4803      	ldr	r0, [pc, #12]	; (d6de8 <module_user_init_hook+0x30>)
}
   d6dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6dde:	f7fd bce1 	b.w	d47a4 <system_ctrl_set_app_request_handler>
   d6de2:	bf00      	nop
   d6de4:	00000000 	.word	0x00000000
   d6de8:	000d6d81 	.word	0x000d6d81

000d6dec <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6dec:	4770      	bx	lr

000d6dee <_ZN9IPAddressD0Ev>:
   d6dee:	b510      	push	{r4, lr}
   d6df0:	2118      	movs	r1, #24
   d6df2:	4604      	mov	r4, r0
   d6df4:	f000 fd2e 	bl	d7854 <_ZdlPvj>
   d6df8:	4620      	mov	r0, r4
   d6dfa:	bd10      	pop	{r4, pc}

000d6dfc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6dfe:	7d03      	ldrb	r3, [r0, #20]
   d6e00:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6e02:	b08d      	sub	sp, #52	; 0x34
   d6e04:	460e      	mov	r6, r1
   d6e06:	f100 0704 	add.w	r7, r0, #4
   d6e0a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6e0e:	d002      	beq.n	d6e16 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6e10:	f100 0508 	add.w	r5, r0, #8
   d6e14:	e018      	b.n	d6e48 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6e16:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6e18:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6e1a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6e1e:	232f      	movs	r3, #47	; 0x2f
   d6e20:	462a      	mov	r2, r5
   d6e22:	200a      	movs	r0, #10
   d6e24:	f7fd fc06 	bl	d4634 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6e28:	4628      	mov	r0, r5
   d6e2a:	f000 ff03 	bl	d7c34 <strlen>
   d6e2e:	6833      	ldr	r3, [r6, #0]
   d6e30:	4602      	mov	r2, r0
   d6e32:	68db      	ldr	r3, [r3, #12]
   d6e34:	4629      	mov	r1, r5
   d6e36:	4630      	mov	r0, r6
   d6e38:	4798      	blx	r3
   d6e3a:	e00f      	b.n	d6e5c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6e3c:	b124      	cbz	r4, d6e48 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6e3e:	212e      	movs	r1, #46	; 0x2e
   d6e40:	4630      	mov	r0, r6
   d6e42:	f7fe ff29 	bl	d5c98 <_ZN5Print5printEc>
   d6e46:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6e48:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6e4c:	220a      	movs	r2, #10
   d6e4e:	4630      	mov	r0, r6
   d6e50:	f7fe ff5e 	bl	d5d10 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6e54:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6e56:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6e58:	d1f0      	bne.n	d6e3c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6e5a:	4620      	mov	r0, r4
    }
    return n;
}
   d6e5c:	b00d      	add	sp, #52	; 0x34
   d6e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6e60 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6e60:	b510      	push	{r4, lr}
   d6e62:	4b05      	ldr	r3, [pc, #20]	; (d6e78 <_ZN9IPAddressC1Ev+0x18>)
   d6e64:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6e66:	2211      	movs	r2, #17
   d6e68:	f840 3b04 	str.w	r3, [r0], #4
   d6e6c:	2100      	movs	r1, #0
   d6e6e:	f000 fe8e 	bl	d7b8e <memset>
{
    clear();
}
   d6e72:	4620      	mov	r0, r4
   d6e74:	bd10      	pop	{r4, pc}
   d6e76:	bf00      	nop
   d6e78:	000d818c 	.word	0x000d818c

000d6e7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6e7c:	4603      	mov	r3, r0
   d6e7e:	4a07      	ldr	r2, [pc, #28]	; (d6e9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6e80:	b510      	push	{r4, lr}
   d6e82:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6e86:	f101 0210 	add.w	r2, r1, #16
   d6e8a:	f851 4b04 	ldr.w	r4, [r1], #4
   d6e8e:	f843 4b04 	str.w	r4, [r3], #4
   d6e92:	4291      	cmp	r1, r2
   d6e94:	d1f9      	bne.n	d6e8a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6e96:	780a      	ldrb	r2, [r1, #0]
   d6e98:	701a      	strb	r2, [r3, #0]
}
   d6e9a:	bd10      	pop	{r4, pc}
   d6e9c:	000d818c 	.word	0x000d818c

000d6ea0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6ea0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6ea2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6ea6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6eaa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6eae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6eb2:	2304      	movs	r3, #4
   d6eb4:	6041      	str	r1, [r0, #4]
   d6eb6:	7503      	strb	r3, [r0, #20]
   d6eb8:	bd10      	pop	{r4, pc}

000d6eba <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6eba:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6ebc:	780d      	ldrb	r5, [r1, #0]
   d6ebe:	788b      	ldrb	r3, [r1, #2]
   d6ec0:	784a      	ldrb	r2, [r1, #1]
   d6ec2:	78c9      	ldrb	r1, [r1, #3]
   d6ec4:	9100      	str	r1, [sp, #0]
   d6ec6:	4629      	mov	r1, r5
   d6ec8:	f7ff ffea 	bl	d6ea0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6ecc:	b003      	add	sp, #12
   d6ece:	bd30      	pop	{r4, r5, pc}

000d6ed0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6ed0:	7441      	strb	r1, [r0, #17]
   d6ed2:	4770      	bx	lr

000d6ed4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6ed4:	4770      	bx	lr

000d6ed6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6ed6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6ed8:	2100      	movs	r1, #0
   d6eda:	7c00      	ldrb	r0, [r0, #16]
   d6edc:	f7fd fc22 	bl	d4724 <HAL_USB_USART_Receive_Data>
}
   d6ee0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6ee4:	bf28      	it	cs
   d6ee6:	f04f 30ff 	movcs.w	r0, #4294967295
   d6eea:	bd08      	pop	{r3, pc}

000d6eec <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6eec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6eee:	2101      	movs	r1, #1
   d6ef0:	7c00      	ldrb	r0, [r0, #16]
   d6ef2:	f7fd fc17 	bl	d4724 <HAL_USB_USART_Receive_Data>
}
   d6ef6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6efa:	bf28      	it	cs
   d6efc:	f04f 30ff 	movcs.w	r0, #4294967295
   d6f00:	bd08      	pop	{r3, pc}

000d6f02 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6f02:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6f04:	7c00      	ldrb	r0, [r0, #16]
   d6f06:	f7fd fc05 	bl	d4714 <HAL_USB_USART_Available_Data_For_Write>
}
   d6f0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6f0e:	bd08      	pop	{r3, pc}

000d6f10 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6f10:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6f12:	7c00      	ldrb	r0, [r0, #16]
   d6f14:	f7fd fbf6 	bl	d4704 <HAL_USB_USART_Available_Data>
}
   d6f18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6f1c:	bd08      	pop	{r3, pc}

000d6f1e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6f1e:	7c00      	ldrb	r0, [r0, #16]
   d6f20:	f7fd bc10 	b.w	d4744 <HAL_USB_USART_Flush_Data>

000d6f24 <_ZN9USBSerialD0Ev>:
   d6f24:	b510      	push	{r4, lr}
   d6f26:	2114      	movs	r1, #20
   d6f28:	4604      	mov	r4, r0
   d6f2a:	f000 fc93 	bl	d7854 <_ZdlPvj>
   d6f2e:	4620      	mov	r0, r4
   d6f30:	bd10      	pop	{r4, pc}

000d6f32 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6f32:	b538      	push	{r3, r4, r5, lr}
   d6f34:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6f36:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6f38:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6f3a:	f7fd fbeb 	bl	d4714 <HAL_USB_USART_Available_Data_For_Write>
   d6f3e:	2800      	cmp	r0, #0
   d6f40:	dc01      	bgt.n	d6f46 <_ZN9USBSerial5writeEh+0x14>
   d6f42:	7c60      	ldrb	r0, [r4, #17]
   d6f44:	b128      	cbz	r0, d6f52 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6f46:	4629      	mov	r1, r5
   d6f48:	7c20      	ldrb	r0, [r4, #16]
   d6f4a:	f7fd fbf3 	bl	d4734 <HAL_USB_USART_Send_Data>
   d6f4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6f52:	bd38      	pop	{r3, r4, r5, pc}

000d6f54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6f54:	b510      	push	{r4, lr}
   d6f56:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6f58:	2300      	movs	r3, #0
   d6f5a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6f5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6f60:	60a3      	str	r3, [r4, #8]
   d6f62:	4b05      	ldr	r3, [pc, #20]	; (d6f78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6f64:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6f66:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6f68:	4608      	mov	r0, r1
{
  _serial = serial;
   d6f6a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6f6c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6f6e:	4611      	mov	r1, r2
   d6f70:	f7fd fbb0 	bl	d46d4 <HAL_USB_USART_Init>
}
   d6f74:	4620      	mov	r0, r4
   d6f76:	bd10      	pop	{r4, pc}
   d6f78:	000d81a0 	.word	0x000d81a0

000d6f7c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6f7c:	2200      	movs	r2, #0
   d6f7e:	7c00      	ldrb	r0, [r0, #16]
   d6f80:	f7fd bbb0 	b.w	d46e4 <HAL_USB_USART_Begin>

000d6f84 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d6f84:	7c00      	ldrb	r0, [r0, #16]
   d6f86:	f7fd bbb5 	b.w	d46f4 <HAL_USB_USART_End>

000d6f8a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6f8a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6f8c:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6f8e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6f90:	2100      	movs	r1, #0
   d6f92:	f000 fdfc 	bl	d7b8e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6f96:	4620      	mov	r0, r4
   d6f98:	bd10      	pop	{r4, pc}
	...

000d6f9c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6f9c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6f9e:	4d0e      	ldr	r5, [pc, #56]	; (d6fd8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6fa0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6fa2:	a801      	add	r0, sp, #4
   d6fa4:	f7ff fff1 	bl	d6f8a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6fa8:	6829      	ldr	r1, [r5, #0]
   d6faa:	f011 0401 	ands.w	r4, r1, #1
   d6fae:	d110      	bne.n	d6fd2 <_Z16_fetch_usbserialv+0x36>
   d6fb0:	4628      	mov	r0, r5
   d6fb2:	f7fd f881 	bl	d40b8 <__cxa_guard_acquire>
   d6fb6:	b160      	cbz	r0, d6fd2 <_Z16_fetch_usbserialv+0x36>
   d6fb8:	aa01      	add	r2, sp, #4
   d6fba:	4621      	mov	r1, r4
   d6fbc:	4807      	ldr	r0, [pc, #28]	; (d6fdc <_Z16_fetch_usbserialv+0x40>)
   d6fbe:	f7ff ffc9 	bl	d6f54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6fc2:	4628      	mov	r0, r5
   d6fc4:	f7fd f87d 	bl	d40c2 <__cxa_guard_release>
   d6fc8:	4a05      	ldr	r2, [pc, #20]	; (d6fe0 <_Z16_fetch_usbserialv+0x44>)
   d6fca:	4906      	ldr	r1, [pc, #24]	; (d6fe4 <_Z16_fetch_usbserialv+0x48>)
   d6fcc:	4803      	ldr	r0, [pc, #12]	; (d6fdc <_Z16_fetch_usbserialv+0x40>)
   d6fce:	f000 fc33 	bl	d7838 <__aeabi_atexit>
	return _usbserial;
}
   d6fd2:	4802      	ldr	r0, [pc, #8]	; (d6fdc <_Z16_fetch_usbserialv+0x40>)
   d6fd4:	b007      	add	sp, #28
   d6fd6:	bd30      	pop	{r4, r5, pc}
   d6fd8:	2003e410 	.word	0x2003e410
   d6fdc:	2003e414 	.word	0x2003e414
   d6fe0:	2003e32c 	.word	0x2003e32c
   d6fe4:	000d6ed5 	.word	0x000d6ed5

000d6fe8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6fe8:	4770      	bx	lr

000d6fea <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6fea:	7441      	strb	r1, [r0, #17]
   d6fec:	4770      	bx	lr

000d6fee <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6fee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6ff0:	7c00      	ldrb	r0, [r0, #16]
   d6ff2:	f7fd fb5f 	bl	d46b4 <HAL_USART_Available_Data_For_Write>
}
   d6ff6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ffa:	bd08      	pop	{r3, pc}

000d6ffc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6ffc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6ffe:	7c00      	ldrb	r0, [r0, #16]
   d7000:	f7fd fb38 	bl	d4674 <HAL_USART_Available_Data>
}
   d7004:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7008:	bd08      	pop	{r3, pc}

000d700a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d700a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d700c:	7c00      	ldrb	r0, [r0, #16]
   d700e:	f7fd fb41 	bl	d4694 <HAL_USART_Peek_Data>
}
   d7012:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7016:	bf28      	it	cs
   d7018:	f04f 30ff 	movcs.w	r0, #4294967295
   d701c:	bd08      	pop	{r3, pc}

000d701e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d701e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7020:	7c00      	ldrb	r0, [r0, #16]
   d7022:	f7fd fb2f 	bl	d4684 <HAL_USART_Read_Data>
}
   d7026:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d702a:	bf28      	it	cs
   d702c:	f04f 30ff 	movcs.w	r0, #4294967295
   d7030:	bd08      	pop	{r3, pc}

000d7032 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7032:	7c00      	ldrb	r0, [r0, #16]
   d7034:	f7fd bb36 	b.w	d46a4 <HAL_USART_Flush_Data>

000d7038 <_ZN11USARTSerialD0Ev>:
   d7038:	b510      	push	{r4, lr}
   d703a:	2114      	movs	r1, #20
   d703c:	4604      	mov	r4, r0
   d703e:	f000 fc09 	bl	d7854 <_ZdlPvj>
   d7042:	4620      	mov	r0, r4
   d7044:	bd10      	pop	{r4, pc}

000d7046 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7046:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7048:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d704a:	4604      	mov	r4, r0
   d704c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d704e:	b925      	cbnz	r5, d705a <_ZN11USARTSerial5writeEh+0x14>
   d7050:	7c00      	ldrb	r0, [r0, #16]
   d7052:	f7fd fb2f 	bl	d46b4 <HAL_USART_Available_Data_For_Write>
   d7056:	2800      	cmp	r0, #0
   d7058:	dd05      	ble.n	d7066 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d705a:	4631      	mov	r1, r6
   d705c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d705e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7062:	f7fd baff 	b.w	d4664 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7066:	4628      	mov	r0, r5
   d7068:	bd70      	pop	{r4, r5, r6, pc}
	...

000d706c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d706c:	b510      	push	{r4, lr}
   d706e:	4604      	mov	r4, r0
   d7070:	4608      	mov	r0, r1
   d7072:	4611      	mov	r1, r2
   d7074:	2200      	movs	r2, #0
   d7076:	6062      	str	r2, [r4, #4]
   d7078:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d707c:	60a2      	str	r2, [r4, #8]
   d707e:	4a05      	ldr	r2, [pc, #20]	; (d7094 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7080:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7082:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7084:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7086:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7088:	461a      	mov	r2, r3
   d708a:	f7fd fadb 	bl	d4644 <HAL_USART_Init>
}
   d708e:	4620      	mov	r0, r4
   d7090:	bd10      	pop	{r4, pc}
   d7092:	bf00      	nop
   d7094:	000d81d0 	.word	0x000d81d0

000d7098 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7098:	2300      	movs	r3, #0
   d709a:	7c00      	ldrb	r0, [r0, #16]
   d709c:	f7fd bb12 	b.w	d46c4 <HAL_USART_BeginConfig>

000d70a0 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d70a0:	2200      	movs	r2, #0
   d70a2:	f7ff bff9 	b.w	d7098 <_ZN11USARTSerial5beginEmm>

000d70a6 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d70a6:	7c00      	ldrb	r0, [r0, #16]
   d70a8:	f7fd bad4 	b.w	d4654 <HAL_USART_End>

000d70ac <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d70ac:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d70ae:	4d0c      	ldr	r5, [pc, #48]	; (d70e0 <_Z22__fetch_global_Serial1v+0x34>)
   d70b0:	6829      	ldr	r1, [r5, #0]
   d70b2:	f011 0401 	ands.w	r4, r1, #1
   d70b6:	d111      	bne.n	d70dc <_Z22__fetch_global_Serial1v+0x30>
   d70b8:	4628      	mov	r0, r5
   d70ba:	f7fc fffd 	bl	d40b8 <__cxa_guard_acquire>
   d70be:	b168      	cbz	r0, d70dc <_Z22__fetch_global_Serial1v+0x30>
   d70c0:	4a08      	ldr	r2, [pc, #32]	; (d70e4 <_Z22__fetch_global_Serial1v+0x38>)
   d70c2:	4b09      	ldr	r3, [pc, #36]	; (d70e8 <_Z22__fetch_global_Serial1v+0x3c>)
   d70c4:	4809      	ldr	r0, [pc, #36]	; (d70ec <_Z22__fetch_global_Serial1v+0x40>)
   d70c6:	4621      	mov	r1, r4
   d70c8:	f7ff ffd0 	bl	d706c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d70cc:	4628      	mov	r0, r5
   d70ce:	f7fc fff8 	bl	d40c2 <__cxa_guard_release>
   d70d2:	4a07      	ldr	r2, [pc, #28]	; (d70f0 <_Z22__fetch_global_Serial1v+0x44>)
   d70d4:	4907      	ldr	r1, [pc, #28]	; (d70f4 <_Z22__fetch_global_Serial1v+0x48>)
   d70d6:	4805      	ldr	r0, [pc, #20]	; (d70ec <_Z22__fetch_global_Serial1v+0x40>)
   d70d8:	f000 fbae 	bl	d7838 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d70dc:	4803      	ldr	r0, [pc, #12]	; (d70ec <_Z22__fetch_global_Serial1v+0x40>)
   d70de:	bd38      	pop	{r3, r4, r5, pc}
   d70e0:	2003e4c0 	.word	0x2003e4c0
   d70e4:	2003e4c4 	.word	0x2003e4c4
   d70e8:	2003e43c 	.word	0x2003e43c
   d70ec:	2003e428 	.word	0x2003e428
   d70f0:	2003e32c 	.word	0x2003e32c
   d70f4:	000d6fe9 	.word	0x000d6fe9

000d70f8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d70f8:	2200      	movs	r2, #0
   d70fa:	4611      	mov	r1, r2
   d70fc:	6840      	ldr	r0, [r0, #4]
   d70fe:	f7fd bb9d 	b.w	d483c <network_listening>

000d7102 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7102:	2200      	movs	r2, #0
   d7104:	4611      	mov	r1, r2
   d7106:	6840      	ldr	r0, [r0, #4]
   d7108:	f7fd bba8 	b.w	d485c <network_get_listen_timeout>

000d710c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d710c:	2200      	movs	r2, #0
   d710e:	6840      	ldr	r0, [r0, #4]
   d7110:	f7fd bb9c 	b.w	d484c <network_set_listen_timeout>

000d7114 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7114:	2200      	movs	r2, #0
   d7116:	f081 0101 	eor.w	r1, r1, #1
   d711a:	6840      	ldr	r0, [r0, #4]
   d711c:	f7fd bb86 	b.w	d482c <network_listen>

000d7120 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d7120:	2300      	movs	r3, #0
   d7122:	461a      	mov	r2, r3
   d7124:	4619      	mov	r1, r3
   d7126:	6840      	ldr	r0, [r0, #4]
   d7128:	f7fd bb78 	b.w	d481c <network_off>

000d712c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d712c:	2300      	movs	r3, #0
   d712e:	461a      	mov	r2, r3
   d7130:	4619      	mov	r1, r3
   d7132:	6840      	ldr	r0, [r0, #4]
   d7134:	f7fd bb6a 	b.w	d480c <network_on>

000d7138 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7138:	2200      	movs	r2, #0
   d713a:	4611      	mov	r1, r2
   d713c:	6840      	ldr	r0, [r0, #4]
   d713e:	f7fd bb5d 	b.w	d47fc <network_ready>

000d7142 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7142:	2200      	movs	r2, #0
   d7144:	4611      	mov	r1, r2
   d7146:	6840      	ldr	r0, [r0, #4]
   d7148:	f7fd bb48 	b.w	d47dc <network_connecting>

000d714c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d714c:	2200      	movs	r2, #0
   d714e:	2102      	movs	r1, #2
   d7150:	6840      	ldr	r0, [r0, #4]
   d7152:	f7fd bb4b 	b.w	d47ec <network_disconnect>

000d7156 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7156:	2300      	movs	r3, #0
   d7158:	461a      	mov	r2, r3
   d715a:	6840      	ldr	r0, [r0, #4]
   d715c:	f7fd bb36 	b.w	d47cc <network_connect>

000d7160 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7160:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7162:	4605      	mov	r5, r0
   d7164:	b188      	cbz	r0, d718a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7166:	6804      	ldr	r4, [r0, #0]
   d7168:	b14c      	cbz	r4, d717e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d716a:	68a3      	ldr	r3, [r4, #8]
   d716c:	b11b      	cbz	r3, d7176 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d716e:	2203      	movs	r2, #3
   d7170:	4621      	mov	r1, r4
   d7172:	4620      	mov	r0, r4
   d7174:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7176:	2110      	movs	r1, #16
   d7178:	4620      	mov	r0, r4
   d717a:	f000 fb6b 	bl	d7854 <_ZdlPvj>
   d717e:	4628      	mov	r0, r5
   d7180:	2114      	movs	r1, #20
      }
   d7182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7186:	f000 bb65 	b.w	d7854 <_ZdlPvj>
   d718a:	bd38      	pop	{r3, r4, r5, pc}

000d718c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d718c:	b110      	cbz	r0, d7194 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d718e:	6803      	ldr	r3, [r0, #0]
   d7190:	685b      	ldr	r3, [r3, #4]
   d7192:	4718      	bx	r3
   d7194:	4770      	bx	lr

000d7196 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7196:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7198:	6803      	ldr	r3, [r0, #0]
   d719a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d719c:	b1bb      	cbz	r3, d71ce <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d719e:	6858      	ldr	r0, [r3, #4]
   d71a0:	f7fd fa10 	bl	d45c4 <os_thread_is_current>
   d71a4:	b978      	cbnz	r0, d71c6 <_ZN6ThreadD1Ev+0x30>
   d71a6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d71a8:	7c5a      	ldrb	r2, [r3, #17]
   d71aa:	b912      	cbnz	r2, d71b2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d71ac:	6858      	ldr	r0, [r3, #4]
   d71ae:	f7fd fa11 	bl	d45d4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d71b2:	6823      	ldr	r3, [r4, #0]
   d71b4:	6858      	ldr	r0, [r3, #4]
   d71b6:	f7fd fa15 	bl	d45e4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71ba:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d71bc:	2300      	movs	r3, #0
   d71be:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d71c0:	b128      	cbz	r0, d71ce <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d71c2:	f7ff ffcd 	bl	d7160 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d71c6:	6820      	ldr	r0, [r4, #0]
   d71c8:	b108      	cbz	r0, d71ce <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d71ca:	f7ff ffc9 	bl	d7160 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d71ce:	4620      	mov	r0, r4
   d71d0:	bd10      	pop	{r4, pc}
	...

000d71d4 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d71d4:	b538      	push	{r3, r4, r5, lr}
   d71d6:	4b0c      	ldr	r3, [pc, #48]	; (d7208 <_ZN5spark9MeshClassD1Ev+0x34>)
   d71d8:	6003      	str	r3, [r0, #0]
   d71da:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d71dc:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d71e0:	b108      	cbz	r0, d71e6 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d71e2:	f7fc ff5c 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d71e6:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d71ea:	b135      	cbz	r5, d71fa <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d71ec:	4628      	mov	r0, r5
   d71ee:	f7ff ffd2 	bl	d7196 <_ZN6ThreadD1Ev>
   d71f2:	2104      	movs	r1, #4
   d71f4:	4628      	mov	r0, r5
   d71f6:	f000 fb2d 	bl	d7854 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d71fa:	68a0      	ldr	r0, [r4, #8]
   d71fc:	b108      	cbz	r0, d7202 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d71fe:	f7ff ffc5 	bl	d718c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d7202:	4620      	mov	r0, r4
   d7204:	bd38      	pop	{r3, r4, r5, pc}
   d7206:	bf00      	nop
   d7208:	000d8200 	.word	0x000d8200

000d720c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d720c:	b538      	push	{r3, r4, r5, lr}
   d720e:	4c0d      	ldr	r4, [pc, #52]	; (d7244 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d7210:	4b0d      	ldr	r3, [pc, #52]	; (d7248 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d7212:	6023      	str	r3, [r4, #0]
   d7214:	2500      	movs	r5, #0
   d7216:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7218:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d721c:	6063      	str	r3, [r4, #4]
   d721e:	60a5      	str	r5, [r4, #8]
   d7220:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7224:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7228:	f7fd f9ec 	bl	d4604 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d722c:	4b07      	ldr	r3, [pc, #28]	; (d724c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d722e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d7232:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7234:	4620      	mov	r0, r4
   d7236:	4a06      	ldr	r2, [pc, #24]	; (d7250 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d7238:	4906      	ldr	r1, [pc, #24]	; (d7254 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d723a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d723e:	f000 bafb 	b.w	d7838 <__aeabi_atexit>
   d7242:	bf00      	nop
   d7244:	2003e548 	.word	0x2003e548
   d7248:	000d8268 	.word	0x000d8268
   d724c:	000d8200 	.word	0x000d8200
   d7250:	2003e32c 	.word	0x2003e32c
   d7254:	000d71d5 	.word	0x000d71d5

000d7258 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7258:	2200      	movs	r2, #0
   d725a:	4611      	mov	r1, r2
   d725c:	6840      	ldr	r0, [r0, #4]
   d725e:	f7fd bacd 	b.w	d47fc <network_ready>

000d7262 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7262:	2200      	movs	r2, #0
   d7264:	4611      	mov	r1, r2
   d7266:	6840      	ldr	r0, [r0, #4]
   d7268:	f7fd bae8 	b.w	d483c <network_listening>

000d726c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d726c:	2200      	movs	r2, #0
   d726e:	4611      	mov	r1, r2
   d7270:	6840      	ldr	r0, [r0, #4]
   d7272:	f7fd baf3 	b.w	d485c <network_get_listen_timeout>

000d7276 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7276:	2200      	movs	r2, #0
   d7278:	6840      	ldr	r0, [r0, #4]
   d727a:	f7fd bae7 	b.w	d484c <network_set_listen_timeout>

000d727e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d727e:	2200      	movs	r2, #0
   d7280:	f081 0101 	eor.w	r1, r1, #1
   d7284:	6840      	ldr	r0, [r0, #4]
   d7286:	f7fd bad1 	b.w	d482c <network_listen>

000d728a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d728a:	2300      	movs	r3, #0
   d728c:	461a      	mov	r2, r3
   d728e:	4619      	mov	r1, r3
   d7290:	6840      	ldr	r0, [r0, #4]
   d7292:	f7fd bac3 	b.w	d481c <network_off>

000d7296 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7296:	2300      	movs	r3, #0
   d7298:	461a      	mov	r2, r3
   d729a:	4619      	mov	r1, r3
   d729c:	6840      	ldr	r0, [r0, #4]
   d729e:	f7fd bab5 	b.w	d480c <network_on>

000d72a2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d72a2:	2200      	movs	r2, #0
   d72a4:	4611      	mov	r1, r2
   d72a6:	6840      	ldr	r0, [r0, #4]
   d72a8:	f7fd ba98 	b.w	d47dc <network_connecting>

000d72ac <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d72ac:	2200      	movs	r2, #0
   d72ae:	2102      	movs	r1, #2
   d72b0:	6840      	ldr	r0, [r0, #4]
   d72b2:	f7fd ba9b 	b.w	d47ec <network_disconnect>

000d72b6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d72b6:	2300      	movs	r3, #0
   d72b8:	461a      	mov	r2, r3
   d72ba:	6840      	ldr	r0, [r0, #4]
   d72bc:	f7fd ba86 	b.w	d47cc <network_connect>

000d72c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d72c0:	4b02      	ldr	r3, [pc, #8]	; (d72cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d72c2:	2204      	movs	r2, #4
   d72c4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d72c6:	4a02      	ldr	r2, [pc, #8]	; (d72d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d72c8:	601a      	str	r2, [r3, #0]
   d72ca:	4770      	bx	lr
   d72cc:	2003e718 	.word	0x2003e718
   d72d0:	000d8234 	.word	0x000d8234

000d72d4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d72d4:	2300      	movs	r3, #0
   d72d6:	461a      	mov	r2, r3
   d72d8:	6840      	ldr	r0, [r0, #4]
   d72da:	f7fd ba77 	b.w	d47cc <network_connect>

000d72de <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d72de:	2200      	movs	r2, #0
   d72e0:	2102      	movs	r1, #2
   d72e2:	6840      	ldr	r0, [r0, #4]
   d72e4:	f7fd ba82 	b.w	d47ec <network_disconnect>

000d72e8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d72e8:	2200      	movs	r2, #0
   d72ea:	4611      	mov	r1, r2
   d72ec:	6840      	ldr	r0, [r0, #4]
   d72ee:	f7fd ba75 	b.w	d47dc <network_connecting>

000d72f2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d72f2:	2200      	movs	r2, #0
   d72f4:	4611      	mov	r1, r2
   d72f6:	6840      	ldr	r0, [r0, #4]
   d72f8:	f7fd ba80 	b.w	d47fc <network_ready>

000d72fc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d72fc:	2300      	movs	r3, #0
   d72fe:	461a      	mov	r2, r3
   d7300:	4619      	mov	r1, r3
   d7302:	6840      	ldr	r0, [r0, #4]
   d7304:	f7fd ba82 	b.w	d480c <network_on>

000d7308 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7308:	2300      	movs	r3, #0
   d730a:	461a      	mov	r2, r3
   d730c:	4619      	mov	r1, r3
   d730e:	6840      	ldr	r0, [r0, #4]
   d7310:	f7fd ba84 	b.w	d481c <network_off>

000d7314 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7314:	2200      	movs	r2, #0
   d7316:	f081 0101 	eor.w	r1, r1, #1
   d731a:	6840      	ldr	r0, [r0, #4]
   d731c:	f7fd ba86 	b.w	d482c <network_listen>

000d7320 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7320:	2200      	movs	r2, #0
   d7322:	6840      	ldr	r0, [r0, #4]
   d7324:	f7fd ba92 	b.w	d484c <network_set_listen_timeout>

000d7328 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7328:	2200      	movs	r2, #0
   d732a:	4611      	mov	r1, r2
   d732c:	6840      	ldr	r0, [r0, #4]
   d732e:	f7fd ba95 	b.w	d485c <network_get_listen_timeout>

000d7332 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7332:	2200      	movs	r2, #0
   d7334:	4611      	mov	r1, r2
   d7336:	6840      	ldr	r0, [r0, #4]
   d7338:	f7fd ba80 	b.w	d483c <network_listening>

000d733c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d733c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7340:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7342:	b095      	sub	sp, #84	; 0x54
   d7344:	4616      	mov	r6, r2
   d7346:	460d      	mov	r5, r1
   d7348:	4607      	mov	r7, r0
    IPAddress addr;
   d734a:	f7ff fd89 	bl	d6e60 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d734e:	4621      	mov	r1, r4
   d7350:	2220      	movs	r2, #32
   d7352:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7354:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7356:	f000 fc1a 	bl	d7b8e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d735a:	2340      	movs	r3, #64	; 0x40
   d735c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d735e:	4621      	mov	r1, r4
   d7360:	466b      	mov	r3, sp
   d7362:	aa0c      	add	r2, sp, #48	; 0x30
   d7364:	4630      	mov	r0, r6
   d7366:	f7fd f8a3 	bl	d44b0 <netdb_getaddrinfo>
    if (!r) {
   d736a:	4604      	mov	r4, r0
   d736c:	2800      	cmp	r0, #0
   d736e:	d144      	bne.n	d73fa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7370:	4602      	mov	r2, r0
   d7372:	2101      	movs	r1, #1
   d7374:	6868      	ldr	r0, [r5, #4]
   d7376:	f7fd fa41 	bl	d47fc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d737a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d737c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d737e:	4622      	mov	r2, r4
   d7380:	6868      	ldr	r0, [r5, #4]
   d7382:	f7fd fa3b 	bl	d47fc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7386:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7388:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d738a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d738c:	2e00      	cmp	r6, #0
   d738e:	d034      	beq.n	d73fa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7390:	2900      	cmp	r1, #0
   d7392:	d132      	bne.n	d73fa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7394:	6873      	ldr	r3, [r6, #4]
   d7396:	2b02      	cmp	r3, #2
   d7398:	d002      	beq.n	d73a0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d739a:	2b0a      	cmp	r3, #10
   d739c:	d009      	beq.n	d73b2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d739e:	e02a      	b.n	d73f6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d73a0:	f1b8 0f00 	cmp.w	r8, #0
   d73a4:	d027      	beq.n	d73f6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d73a6:	6971      	ldr	r1, [r6, #20]
   d73a8:	4638      	mov	r0, r7
   d73aa:	3104      	adds	r1, #4
   d73ac:	f7ff fd85 	bl	d6eba <_ZN9IPAddressaSEPKh>
   d73b0:	e020      	b.n	d73f4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d73b2:	f1b9 0f00 	cmp.w	r9, #0
   d73b6:	d01e      	beq.n	d73f6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d73b8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d73ba:	2211      	movs	r2, #17
   d73bc:	a801      	add	r0, sp, #4
   d73be:	f000 fbe6 	bl	d7b8e <memset>
                    a.v = 6;
   d73c2:	2306      	movs	r3, #6
   d73c4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d73c8:	ad01      	add	r5, sp, #4
   d73ca:	f104 0308 	add.w	r3, r4, #8
   d73ce:	3418      	adds	r4, #24
   d73d0:	6818      	ldr	r0, [r3, #0]
   d73d2:	6859      	ldr	r1, [r3, #4]
   d73d4:	462a      	mov	r2, r5
   d73d6:	c203      	stmia	r2!, {r0, r1}
   d73d8:	3308      	adds	r3, #8
   d73da:	42a3      	cmp	r3, r4
   d73dc:	4615      	mov	r5, r2
   d73de:	d1f7      	bne.n	d73d0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d73e0:	a901      	add	r1, sp, #4
   d73e2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d73e4:	ad07      	add	r5, sp, #28
   d73e6:	f7ff fd49 	bl	d6e7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d73ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d73ec:	1d3c      	adds	r4, r7, #4
   d73ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d73f0:	682b      	ldr	r3, [r5, #0]
   d73f2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d73f4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d73f6:	69f6      	ldr	r6, [r6, #28]
   d73f8:	e7c8      	b.n	d738c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d73fa:	9800      	ldr	r0, [sp, #0]
   d73fc:	f7fd f850 	bl	d44a0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7400:	4638      	mov	r0, r7
   d7402:	b015      	add	sp, #84	; 0x54
   d7404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7408 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7408:	4b02      	ldr	r3, [pc, #8]	; (d7414 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d740a:	4a03      	ldr	r2, [pc, #12]	; (d7418 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d740c:	601a      	str	r2, [r3, #0]
   d740e:	2200      	movs	r2, #0
   d7410:	605a      	str	r2, [r3, #4]
   d7412:	4770      	bx	lr
   d7414:	2003e720 	.word	0x2003e720
   d7418:	000d8268 	.word	0x000d8268

000d741c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d741c:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d7420:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d7422:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d7426:	2901      	cmp	r1, #1
   d7428:	4610      	mov	r0, r2
   d742a:	d104      	bne.n	d7436 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d742c:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d7430:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d7434:	e004      	b.n	d7440 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d7436:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d7438:	bf04      	itt	eq
   d743a:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d743e:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d7440:	3b01      	subs	r3, #1
   d7442:	f102 0210 	add.w	r2, r2, #16
   d7446:	d1ec      	bne.n	d7422 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d7448:	4770      	bx	lr

000d744a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d744a:	b40e      	push	{r1, r2, r3}
   d744c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7450:	b087      	sub	sp, #28
   d7452:	af00      	add	r7, sp, #0
   d7454:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d7458:	4605      	mov	r5, r0
   d745a:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d745e:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7460:	4623      	mov	r3, r4
   d7462:	4632      	mov	r2, r6
   d7464:	2110      	movs	r1, #16
   d7466:	f107 0008 	add.w	r0, r7, #8
   d746a:	f7fd fa1f 	bl	d48ac <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d746e:	280f      	cmp	r0, #15
   d7470:	d916      	bls.n	d74a0 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d7472:	f100 0308 	add.w	r3, r0, #8
   d7476:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d747a:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d747c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7480:	4632      	mov	r2, r6
   d7482:	1c41      	adds	r1, r0, #1
   d7484:	4623      	mov	r3, r4
   d7486:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d7488:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d748a:	f7fd fa0f 	bl	d48ac <vsnprintf>
        va_end(args);
        if (n > 0) {
   d748e:	1e02      	subs	r2, r0, #0
   d7490:	dd04      	ble.n	d749c <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d7492:	682b      	ldr	r3, [r5, #0]
   d7494:	4669      	mov	r1, sp
   d7496:	689b      	ldr	r3, [r3, #8]
   d7498:	4628      	mov	r0, r5
   d749a:	4798      	blx	r3
   d749c:	46c5      	mov	sp, r8
   d749e:	e007      	b.n	d74b0 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d74a0:	b130      	cbz	r0, d74b0 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d74a2:	682b      	ldr	r3, [r5, #0]
   d74a4:	4602      	mov	r2, r0
   d74a6:	689b      	ldr	r3, [r3, #8]
   d74a8:	f107 0108 	add.w	r1, r7, #8
   d74ac:	4628      	mov	r0, r5
   d74ae:	4798      	blx	r3
    }
}
   d74b0:	371c      	adds	r7, #28
   d74b2:	46bd      	mov	sp, r7
   d74b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d74b8:	b003      	add	sp, #12
   d74ba:	4770      	bx	lr

000d74bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d74bc:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d74be:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d74c0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d74c2:	689b      	ldr	r3, [r3, #8]
   d74c4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d74c6:	68a3      	ldr	r3, [r4, #8]
   d74c8:	3b01      	subs	r3, #1
   d74ca:	60a3      	str	r3, [r4, #8]
   d74cc:	b92b      	cbnz	r3, d74da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12+0x1e>
            _M_destroy();
   d74ce:	6823      	ldr	r3, [r4, #0]
   d74d0:	4620      	mov	r0, r4
   d74d2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d74d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d74d8:	4718      	bx	r3
   d74da:	bd10      	pop	{r4, pc}

000d74dc <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d74dc:	b513      	push	{r0, r1, r4, lr}
   d74de:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d74e0:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d74e2:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d74e6:	6894      	ldr	r4, [r2, #8]
   d74e8:	4619      	mov	r1, r3
   d74ea:	2201      	movs	r2, #1
   d74ec:	47a0      	blx	r4
}
   d74ee:	b002      	add	sp, #8
   d74f0:	bd10      	pop	{r4, pc}

000d74f2 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d74f2:	6883      	ldr	r3, [r0, #8]
   d74f4:	b1fb      	cbz	r3, d7536 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d74f6:	781a      	ldrb	r2, [r3, #0]
   d74f8:	2a03      	cmp	r2, #3
   d74fa:	d81a      	bhi.n	d7532 <_ZNK5spark9JSONValue4typeEv+0x40>
   d74fc:	e8df f002 	tbb	[pc, r2]
   d7500:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d7504:	2005      	movs	r0, #5
   d7506:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d7508:	6802      	ldr	r2, [r0, #0]
   d750a:	685b      	ldr	r3, [r3, #4]
   d750c:	6852      	ldr	r2, [r2, #4]
   d750e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d7510:	282d      	cmp	r0, #45	; 0x2d
   d7512:	d014      	beq.n	d753e <_ZNK5spark9JSONValue4typeEv+0x4c>
   d7514:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d7518:	2b09      	cmp	r3, #9
   d751a:	d910      	bls.n	d753e <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d751c:	2874      	cmp	r0, #116	; 0x74
   d751e:	d010      	beq.n	d7542 <_ZNK5spark9JSONValue4typeEv+0x50>
   d7520:	2866      	cmp	r0, #102	; 0x66
   d7522:	d00e      	beq.n	d7542 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d7524:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d7528:	4258      	negs	r0, r3
   d752a:	4158      	adcs	r0, r3
   d752c:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d752e:	2006      	movs	r0, #6
   d7530:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d7532:	2000      	movs	r0, #0
   d7534:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d7536:	4618      	mov	r0, r3
   d7538:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d753a:	2004      	movs	r0, #4
   d753c:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d753e:	2003      	movs	r0, #3
   d7540:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d7542:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d7544:	4770      	bx	lr

000d7546 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d7546:	b510      	push	{r4, lr}
   d7548:	4604      	mov	r4, r0
    switch (type()) {
   d754a:	f7ff ffd2 	bl	d74f2 <_ZNK5spark9JSONValue4typeEv>
   d754e:	2802      	cmp	r0, #2
   d7550:	d00d      	beq.n	d756e <_ZNK5spark9JSONValue5toIntEv+0x28>
   d7552:	d316      	bcc.n	d7582 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d7554:	2804      	cmp	r0, #4
   d7556:	d814      	bhi.n	d7582 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d7558:	6822      	ldr	r2, [r4, #0]
   d755a:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d755c:	6850      	ldr	r0, [r2, #4]
   d755e:	685b      	ldr	r3, [r3, #4]
   d7560:	220a      	movs	r2, #10
   d7562:	2100      	movs	r1, #0
   d7564:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d7566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d756a:	f000 bc19 	b.w	d7da0 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d756e:	6822      	ldr	r2, [r4, #0]
   d7570:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d7572:	6852      	ldr	r2, [r2, #4]
   d7574:	685b      	ldr	r3, [r3, #4]
   d7576:	5cd0      	ldrb	r0, [r2, r3]
   d7578:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d757c:	4258      	negs	r0, r3
   d757e:	4158      	adcs	r0, r3
   d7580:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d7582:	2000      	movs	r0, #0
    }
}
   d7584:	bd10      	pop	{r4, pc}

000d7586 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d7586:	b510      	push	{r4, lr}
    if (!n_) {
   d7588:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d758a:	4604      	mov	r4, r0
    if (!n_) {
   d758c:	b15b      	cbz	r3, d75a6 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d758e:	6880      	ldr	r0, [r0, #8]
   d7590:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d7592:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d7594:	3010      	adds	r0, #16
   d7596:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d7598:	6120      	str	r0, [r4, #16]
    --n_;
   d759a:	6163      	str	r3, [r4, #20]
    if (n_) {
   d759c:	b12b      	cbz	r3, d75aa <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d759e:	f7ff ff3d 	bl	d741c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d75a2:	60a0      	str	r0, [r4, #8]
   d75a4:	e001      	b.n	d75aa <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d75a6:	4618      	mov	r0, r3
   d75a8:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d75aa:	2001      	movs	r0, #1
}
   d75ac:	bd10      	pop	{r4, pc}

000d75ae <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d75ae:	b510      	push	{r4, lr}
    write('}');
   d75b0:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d75b2:	4604      	mov	r4, r0
    write('}');
   d75b4:	f7ff ff92 	bl	d74dc <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d75b8:	2301      	movs	r3, #1
   d75ba:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d75bc:	4620      	mov	r0, r4
   d75be:	bd10      	pop	{r4, pc}

000d75c0 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d75c0:	b508      	push	{r3, lr}
    switch (state_) {
   d75c2:	7903      	ldrb	r3, [r0, #4]
   d75c4:	2b01      	cmp	r3, #1
   d75c6:	d002      	beq.n	d75ce <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d75c8:	2b02      	cmp	r3, #2
   d75ca:	d002      	beq.n	d75d2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d75cc:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d75ce:	212c      	movs	r1, #44	; 0x2c
   d75d0:	e000      	b.n	d75d4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d75d2:	213a      	movs	r1, #58	; 0x3a
   d75d4:	f7ff ff82 	bl	d74dc <_ZN5spark10JSONWriter5writeEc>
   d75d8:	bd08      	pop	{r3, pc}

000d75da <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d75da:	b510      	push	{r4, lr}
   d75dc:	4604      	mov	r4, r0
    writeSeparator();
   d75de:	f7ff ffef 	bl	d75c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d75e2:	4620      	mov	r0, r4
   d75e4:	217b      	movs	r1, #123	; 0x7b
   d75e6:	f7ff ff79 	bl	d74dc <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d75ea:	2300      	movs	r3, #0
   d75ec:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d75ee:	4620      	mov	r0, r4
   d75f0:	bd10      	pop	{r4, pc}
	...

000d75f4 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d75f4:	b538      	push	{r3, r4, r5, lr}
   d75f6:	4604      	mov	r4, r0
   d75f8:	460d      	mov	r5, r1
    writeSeparator();
   d75fa:	f7ff ffe1 	bl	d75c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d75fe:	6823      	ldr	r3, [r4, #0]
   d7600:	4904      	ldr	r1, [pc, #16]	; (d7614 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d7602:	68db      	ldr	r3, [r3, #12]
   d7604:	4620      	mov	r0, r4
   d7606:	462a      	mov	r2, r5
   d7608:	4798      	blx	r3
    state_ = NEXT;
   d760a:	2301      	movs	r3, #1
   d760c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d760e:	4620      	mov	r0, r4
   d7610:	bd38      	pop	{r3, r4, r5, pc}
   d7612:	bf00      	nop
   d7614:	000d7fe6 	.word	0x000d7fe6

000d7618 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d7618:	b538      	push	{r3, r4, r5, lr}
   d761a:	4604      	mov	r4, r0
   d761c:	460d      	mov	r5, r1
    writeSeparator();
   d761e:	f7ff ffcf 	bl	d75c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d7622:	6823      	ldr	r3, [r4, #0]
   d7624:	4904      	ldr	r1, [pc, #16]	; (d7638 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d7626:	68db      	ldr	r3, [r3, #12]
   d7628:	4620      	mov	r0, r4
   d762a:	462a      	mov	r2, r5
   d762c:	4798      	blx	r3
    state_ = NEXT;
   d762e:	2301      	movs	r3, #1
   d7630:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d7632:	4620      	mov	r0, r4
   d7634:	bd38      	pop	{r3, r4, r5, pc}
   d7636:	bf00      	nop
   d7638:	000d82a3 	.word	0x000d82a3

000d763c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d763e:	460d      	mov	r5, r1
   d7640:	4617      	mov	r7, r2
    write('"');
   d7642:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d7644:	4604      	mov	r4, r0
   d7646:	442f      	add	r7, r5
    write('"');
   d7648:	f7ff ff48 	bl	d74dc <_ZN5spark10JSONWriter5writeEc>
   d764c:	462a      	mov	r2, r5
    const char* const end = str + size;
   d764e:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d7650:	42ba      	cmp	r2, r7
   d7652:	d038      	beq.n	d76c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d7654:	4616      	mov	r6, r2
   d7656:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d765a:	2d22      	cmp	r5, #34	; 0x22
   d765c:	d003      	beq.n	d7666 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d765e:	2d5c      	cmp	r5, #92	; 0x5c
   d7660:	d001      	beq.n	d7666 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d7662:	2d1f      	cmp	r5, #31
   d7664:	d82d      	bhi.n	d76c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d7666:	6823      	ldr	r3, [r4, #0]
   d7668:	1a52      	subs	r2, r2, r1
   d766a:	689b      	ldr	r3, [r3, #8]
   d766c:	4620      	mov	r0, r4
   d766e:	4798      	blx	r3
            write('\\');
   d7670:	215c      	movs	r1, #92	; 0x5c
   d7672:	4620      	mov	r0, r4
   d7674:	f7ff ff32 	bl	d74dc <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d7678:	2d0c      	cmp	r5, #12
   d767a:	d019      	beq.n	d76b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d767c:	d807      	bhi.n	d768e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d767e:	2d09      	cmp	r5, #9
   d7680:	d00f      	beq.n	d76a2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d7682:	2d0a      	cmp	r5, #10
   d7684:	d012      	beq.n	d76ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d7686:	2d08      	cmp	r5, #8
   d7688:	d114      	bne.n	d76b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d768a:	2162      	movs	r1, #98	; 0x62
   d768c:	e00a      	b.n	d76a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d768e:	2d22      	cmp	r5, #34	; 0x22
   d7690:	d005      	beq.n	d769e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d7692:	2d5c      	cmp	r5, #92	; 0x5c
   d7694:	d003      	beq.n	d769e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d7696:	2d0d      	cmp	r5, #13
   d7698:	d10c      	bne.n	d76b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d769a:	2172      	movs	r1, #114	; 0x72
   d769c:	e002      	b.n	d76a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d769e:	4629      	mov	r1, r5
   d76a0:	e000      	b.n	d76a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d76a2:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d76a4:	4620      	mov	r0, r4
   d76a6:	f7ff ff19 	bl	d74dc <_ZN5spark10JSONWriter5writeEc>
                break;
   d76aa:	e009      	b.n	d76c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d76ac:	216e      	movs	r1, #110	; 0x6e
   d76ae:	e7f9      	b.n	d76a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d76b0:	2166      	movs	r1, #102	; 0x66
   d76b2:	e7f7      	b.n	d76a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d76b4:	6823      	ldr	r3, [r4, #0]
   d76b6:	490a      	ldr	r1, [pc, #40]	; (d76e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d76b8:	68db      	ldr	r3, [r3, #12]
   d76ba:	462a      	mov	r2, r5
   d76bc:	4620      	mov	r0, r4
   d76be:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d76c0:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d76c2:	4632      	mov	r2, r6
   d76c4:	e7c4      	b.n	d7650 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d76c6:	4291      	cmp	r1, r2
   d76c8:	d004      	beq.n	d76d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d76ca:	6823      	ldr	r3, [r4, #0]
   d76cc:	1a52      	subs	r2, r2, r1
   d76ce:	689d      	ldr	r5, [r3, #8]
   d76d0:	4620      	mov	r0, r4
   d76d2:	47a8      	blx	r5
    }
    write('"');
   d76d4:	2122      	movs	r1, #34	; 0x22
   d76d6:	4620      	mov	r0, r4
   d76d8:	f7ff ff00 	bl	d74dc <_ZN5spark10JSONWriter5writeEc>
   d76dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d76de:	bf00      	nop
   d76e0:	000d82ae 	.word	0x000d82ae

000d76e4 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d76e4:	b570      	push	{r4, r5, r6, lr}
   d76e6:	4604      	mov	r4, r0
   d76e8:	460d      	mov	r5, r1
   d76ea:	4616      	mov	r6, r2
    writeSeparator();
   d76ec:	f7ff ff68 	bl	d75c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d76f0:	4620      	mov	r0, r4
   d76f2:	4632      	mov	r2, r6
   d76f4:	4629      	mov	r1, r5
   d76f6:	f7ff ffa1 	bl	d763c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d76fa:	2302      	movs	r3, #2
   d76fc:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d76fe:	4620      	mov	r0, r4
   d7700:	bd70      	pop	{r4, r5, r6, pc}

000d7702 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d7702:	b570      	push	{r4, r5, r6, lr}
   d7704:	4604      	mov	r4, r0
   d7706:	460d      	mov	r5, r1
   d7708:	4616      	mov	r6, r2
    writeSeparator();
   d770a:	f7ff ff59 	bl	d75c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d770e:	4620      	mov	r0, r4
   d7710:	4632      	mov	r2, r6
   d7712:	4629      	mov	r1, r5
   d7714:	f7ff ff92 	bl	d763c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d7718:	2301      	movs	r3, #1
   d771a:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d771c:	4620      	mov	r0, r4
   d771e:	bd70      	pop	{r4, r5, r6, pc}

000d7720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d7720:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7722:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d7724:	6803      	ldr	r3, [r0, #0]
   d7726:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d7728:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d772a:	d00c      	beq.n	d7746 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d772c:	b114      	cbz	r4, d7734 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d772e:	6863      	ldr	r3, [r4, #4]
   d7730:	3301      	adds	r3, #1
   d7732:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d7734:	6828      	ldr	r0, [r5, #0]
   d7736:	b128      	cbz	r0, d7744 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7738:	6843      	ldr	r3, [r0, #4]
   d773a:	3b01      	subs	r3, #1
   d773c:	6043      	str	r3, [r0, #4]
   d773e:	b90b      	cbnz	r3, d7744 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d7740:	f7ff febc 	bl	d74bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d7744:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d7746:	4628      	mov	r0, r5
   d7748:	bd38      	pop	{r3, r4, r5, pc}
	...

000d774c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d774c:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d774e:	2300      	movs	r3, #0
   d7750:	4604      	mov	r4, r0
   d7752:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7754:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d7756:	4810      	ldr	r0, [pc, #64]	; (d7798 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d7758:	60a0      	str	r0, [r4, #8]
   d775a:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d775c:	b1d1      	cbz	r1, d7794 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d775e:	780b      	ldrb	r3, [r1, #0]
   d7760:	2b03      	cmp	r3, #3
   d7762:	d006      	beq.n	d7772 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d7764:	b9b3      	cbnz	r3, d7794 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d7766:	6813      	ldr	r3, [r2, #0]
   d7768:	6858      	ldr	r0, [r3, #4]
   d776a:	684b      	ldr	r3, [r1, #4]
   d776c:	5cc3      	ldrb	r3, [r0, r3]
   d776e:	2b6e      	cmp	r3, #110	; 0x6e
   d7770:	d008      	beq.n	d7784 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d7772:	6813      	ldr	r3, [r2, #0]
   d7774:	6858      	ldr	r0, [r3, #4]
   d7776:	684b      	ldr	r3, [r1, #4]
   d7778:	4403      	add	r3, r0
   d777a:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d777c:	688b      	ldr	r3, [r1, #8]
   d777e:	6849      	ldr	r1, [r1, #4]
   d7780:	1a5b      	subs	r3, r3, r1
   d7782:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d7784:	4611      	mov	r1, r2
   d7786:	4620      	mov	r0, r4
   d7788:	f851 3b04 	ldr.w	r3, [r1], #4
   d778c:	f840 3b04 	str.w	r3, [r0], #4
   d7790:	f7ff ffc6 	bl	d7720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d7794:	4620      	mov	r0, r4
   d7796:	bd10      	pop	{r4, pc}
   d7798:	000d8062 	.word	0x000d8062

000d779c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d779c:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d779e:	b510      	push	{r4, lr}
   d77a0:	4604      	mov	r4, r0
   d77a2:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d77a4:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d77a6:	6083      	str	r3, [r0, #8]
   d77a8:	60c3      	str	r3, [r0, #12]
   d77aa:	6103      	str	r3, [r0, #16]
   d77ac:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d77ae:	b171      	cbz	r1, d77ce <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d77b0:	780b      	ldrb	r3, [r1, #0]
   d77b2:	2b01      	cmp	r3, #1
   d77b4:	d10b      	bne.n	d77ce <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d77b6:	f101 0310 	add.w	r3, r1, #16
   d77ba:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d77bc:	68cb      	ldr	r3, [r1, #12]
   d77be:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d77c0:	4611      	mov	r1, r2
   d77c2:	f851 3b04 	ldr.w	r3, [r1], #4
   d77c6:	f840 3b04 	str.w	r3, [r0], #4
   d77ca:	f7ff ffa9 	bl	d7720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d77ce:	4620      	mov	r0, r4
   d77d0:	bd10      	pop	{r4, pc}

000d77d2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d77d2:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d77d4:	b510      	push	{r4, lr}
   d77d6:	4604      	mov	r4, r0
   d77d8:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d77da:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d77dc:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d77de:	b131      	cbz	r1, d77ee <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d77e0:	4611      	mov	r1, r2
   d77e2:	f851 3b04 	ldr.w	r3, [r1], #4
   d77e6:	f840 3b04 	str.w	r3, [r0], #4
   d77ea:	f7ff ff99 	bl	d7720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d77ee:	4620      	mov	r0, r4
   d77f0:	bd10      	pop	{r4, pc}
	...

000d77f4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d77f4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d77f6:	4c0c      	ldr	r4, [pc, #48]	; (d7828 <_GLOBAL__sub_I_SPI+0x34>)
   d77f8:	4e0c      	ldr	r6, [pc, #48]	; (d782c <_GLOBAL__sub_I_SPI+0x38>)
   d77fa:	4d0d      	ldr	r5, [pc, #52]	; (d7830 <_GLOBAL__sub_I_SPI+0x3c>)
   d77fc:	2100      	movs	r1, #0
   d77fe:	4620      	mov	r0, r4
   d7800:	f7fd f8a2 	bl	d4948 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7804:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7806:	4c0b      	ldr	r4, [pc, #44]	; (d7834 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7808:	4632      	mov	r2, r6
   d780a:	4629      	mov	r1, r5
   d780c:	f000 f814 	bl	d7838 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7810:	2101      	movs	r1, #1
   d7812:	4620      	mov	r0, r4
   d7814:	f7fd f898 	bl	d4948 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7818:	4632      	mov	r2, r6
   d781a:	4629      	mov	r1, r5
   d781c:	4620      	mov	r0, r4
   d781e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7822:	f000 b809 	b.w	d7838 <__aeabi_atexit>
   d7826:	bf00      	nop
   d7828:	2003e728 	.word	0x2003e728
   d782c:	2003e32c 	.word	0x2003e32c
   d7830:	000d4939 	.word	0x000d4939
   d7834:	2003e738 	.word	0x2003e738

000d7838 <__aeabi_atexit>:
   d7838:	460b      	mov	r3, r1
   d783a:	4601      	mov	r1, r0
   d783c:	4618      	mov	r0, r3
   d783e:	f000 b963 	b.w	d7b08 <__cxa_atexit>
	...

000d7844 <_ZSt15get_new_handlerv>:
   d7844:	4b02      	ldr	r3, [pc, #8]	; (d7850 <_ZSt15get_new_handlerv+0xc>)
   d7846:	6818      	ldr	r0, [r3, #0]
   d7848:	f3bf 8f5f 	dmb	sy
   d784c:	4770      	bx	lr
   d784e:	bf00      	nop
   d7850:	2003e74c 	.word	0x2003e74c

000d7854 <_ZdlPvj>:
   d7854:	f7fc bc21 	b.w	d409a <_ZdlPv>

000d7858 <_ZnwjRKSt9nothrow_t>:
   d7858:	b510      	push	{r4, lr}
   d785a:	2800      	cmp	r0, #0
   d785c:	bf14      	ite	ne
   d785e:	4604      	movne	r4, r0
   d7860:	2401      	moveq	r4, #1
   d7862:	4620      	mov	r0, r4
   d7864:	f7fd f80a 	bl	d487c <malloc>
   d7868:	b920      	cbnz	r0, d7874 <_ZnwjRKSt9nothrow_t+0x1c>
   d786a:	f7ff ffeb 	bl	d7844 <_ZSt15get_new_handlerv>
   d786e:	b108      	cbz	r0, d7874 <_ZnwjRKSt9nothrow_t+0x1c>
   d7870:	4780      	blx	r0
   d7872:	e7f6      	b.n	d7862 <_ZnwjRKSt9nothrow_t+0xa>
   d7874:	bd10      	pop	{r4, pc}
	...

000d7878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7878:	4b18      	ldr	r3, [pc, #96]	; (d78dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d787a:	681a      	ldr	r2, [r3, #0]
   d787c:	07d1      	lsls	r1, r2, #31
   d787e:	bf5c      	itt	pl
   d7880:	2201      	movpl	r2, #1
   d7882:	601a      	strpl	r2, [r3, #0]
   d7884:	4b16      	ldr	r3, [pc, #88]	; (d78e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7886:	681a      	ldr	r2, [r3, #0]
   d7888:	07d2      	lsls	r2, r2, #31
   d788a:	bf5c      	itt	pl
   d788c:	2201      	movpl	r2, #1
   d788e:	601a      	strpl	r2, [r3, #0]
   d7890:	4b14      	ldr	r3, [pc, #80]	; (d78e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7892:	681a      	ldr	r2, [r3, #0]
   d7894:	07d0      	lsls	r0, r2, #31
   d7896:	bf5c      	itt	pl
   d7898:	2201      	movpl	r2, #1
   d789a:	601a      	strpl	r2, [r3, #0]
   d789c:	4b12      	ldr	r3, [pc, #72]	; (d78e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d789e:	681a      	ldr	r2, [r3, #0]
   d78a0:	07d1      	lsls	r1, r2, #31
   d78a2:	bf5c      	itt	pl
   d78a4:	2201      	movpl	r2, #1
   d78a6:	601a      	strpl	r2, [r3, #0]
   d78a8:	4b10      	ldr	r3, [pc, #64]	; (d78ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d78aa:	681a      	ldr	r2, [r3, #0]
   d78ac:	07d2      	lsls	r2, r2, #31
   d78ae:	bf5c      	itt	pl
   d78b0:	2201      	movpl	r2, #1
   d78b2:	601a      	strpl	r2, [r3, #0]
   d78b4:	4b0e      	ldr	r3, [pc, #56]	; (d78f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d78b6:	681a      	ldr	r2, [r3, #0]
   d78b8:	07d0      	lsls	r0, r2, #31
   d78ba:	bf5c      	itt	pl
   d78bc:	2201      	movpl	r2, #1
   d78be:	601a      	strpl	r2, [r3, #0]
   d78c0:	4b0c      	ldr	r3, [pc, #48]	; (d78f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d78c2:	681a      	ldr	r2, [r3, #0]
   d78c4:	07d1      	lsls	r1, r2, #31
   d78c6:	bf5c      	itt	pl
   d78c8:	2201      	movpl	r2, #1
   d78ca:	601a      	strpl	r2, [r3, #0]
   d78cc:	4b0a      	ldr	r3, [pc, #40]	; (d78f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d78ce:	681a      	ldr	r2, [r3, #0]
   d78d0:	07d2      	lsls	r2, r2, #31
   d78d2:	bf5c      	itt	pl
   d78d4:	2201      	movpl	r2, #1
   d78d6:	601a      	strpl	r2, [r3, #0]
   d78d8:	4770      	bx	lr
   d78da:	bf00      	nop
   d78dc:	2003e76c 	.word	0x2003e76c
   d78e0:	2003e768 	.word	0x2003e768
   d78e4:	2003e764 	.word	0x2003e764
   d78e8:	2003e760 	.word	0x2003e760
   d78ec:	2003e75c 	.word	0x2003e75c
   d78f0:	2003e758 	.word	0x2003e758
   d78f4:	2003e754 	.word	0x2003e754
   d78f8:	2003e750 	.word	0x2003e750

000d78fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d78fc:	4b24      	ldr	r3, [pc, #144]	; (d7990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d78fe:	681a      	ldr	r2, [r3, #0]
   d7900:	07d0      	lsls	r0, r2, #31
   d7902:	bf5c      	itt	pl
   d7904:	2201      	movpl	r2, #1
   d7906:	601a      	strpl	r2, [r3, #0]
   d7908:	4b22      	ldr	r3, [pc, #136]	; (d7994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d790a:	681a      	ldr	r2, [r3, #0]
   d790c:	07d1      	lsls	r1, r2, #31
   d790e:	bf5c      	itt	pl
   d7910:	2201      	movpl	r2, #1
   d7912:	601a      	strpl	r2, [r3, #0]
   d7914:	4b20      	ldr	r3, [pc, #128]	; (d7998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7916:	681a      	ldr	r2, [r3, #0]
   d7918:	07d2      	lsls	r2, r2, #31
   d791a:	bf5c      	itt	pl
   d791c:	2201      	movpl	r2, #1
   d791e:	601a      	strpl	r2, [r3, #0]
   d7920:	4b1e      	ldr	r3, [pc, #120]	; (d799c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7922:	681a      	ldr	r2, [r3, #0]
   d7924:	07d0      	lsls	r0, r2, #31
   d7926:	bf5c      	itt	pl
   d7928:	2201      	movpl	r2, #1
   d792a:	601a      	strpl	r2, [r3, #0]
   d792c:	4b1c      	ldr	r3, [pc, #112]	; (d79a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d792e:	681a      	ldr	r2, [r3, #0]
   d7930:	07d1      	lsls	r1, r2, #31
   d7932:	bf5c      	itt	pl
   d7934:	2201      	movpl	r2, #1
   d7936:	601a      	strpl	r2, [r3, #0]
   d7938:	4b1a      	ldr	r3, [pc, #104]	; (d79a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d793a:	681a      	ldr	r2, [r3, #0]
   d793c:	07d2      	lsls	r2, r2, #31
   d793e:	bf5c      	itt	pl
   d7940:	2201      	movpl	r2, #1
   d7942:	601a      	strpl	r2, [r3, #0]
   d7944:	4b18      	ldr	r3, [pc, #96]	; (d79a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7946:	681a      	ldr	r2, [r3, #0]
   d7948:	07d0      	lsls	r0, r2, #31
   d794a:	bf5c      	itt	pl
   d794c:	2201      	movpl	r2, #1
   d794e:	601a      	strpl	r2, [r3, #0]
   d7950:	4b16      	ldr	r3, [pc, #88]	; (d79ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7952:	681a      	ldr	r2, [r3, #0]
   d7954:	07d1      	lsls	r1, r2, #31
   d7956:	bf5c      	itt	pl
   d7958:	2201      	movpl	r2, #1
   d795a:	601a      	strpl	r2, [r3, #0]
   d795c:	4b14      	ldr	r3, [pc, #80]	; (d79b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d795e:	681a      	ldr	r2, [r3, #0]
   d7960:	07d2      	lsls	r2, r2, #31
   d7962:	bf5c      	itt	pl
   d7964:	2201      	movpl	r2, #1
   d7966:	601a      	strpl	r2, [r3, #0]
   d7968:	4b12      	ldr	r3, [pc, #72]	; (d79b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d796a:	681a      	ldr	r2, [r3, #0]
   d796c:	07d0      	lsls	r0, r2, #31
   d796e:	bf5c      	itt	pl
   d7970:	2201      	movpl	r2, #1
   d7972:	601a      	strpl	r2, [r3, #0]
   d7974:	4b10      	ldr	r3, [pc, #64]	; (d79b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7976:	681a      	ldr	r2, [r3, #0]
   d7978:	07d1      	lsls	r1, r2, #31
   d797a:	bf5c      	itt	pl
   d797c:	2201      	movpl	r2, #1
   d797e:	601a      	strpl	r2, [r3, #0]
   d7980:	4b0e      	ldr	r3, [pc, #56]	; (d79bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7982:	681a      	ldr	r2, [r3, #0]
   d7984:	07d2      	lsls	r2, r2, #31
   d7986:	bf5c      	itt	pl
   d7988:	2201      	movpl	r2, #1
   d798a:	601a      	strpl	r2, [r3, #0]
   d798c:	4770      	bx	lr
   d798e:	bf00      	nop
   d7990:	2003e79c 	.word	0x2003e79c
   d7994:	2003e798 	.word	0x2003e798
   d7998:	2003e794 	.word	0x2003e794
   d799c:	2003e790 	.word	0x2003e790
   d79a0:	2003e78c 	.word	0x2003e78c
   d79a4:	2003e788 	.word	0x2003e788
   d79a8:	2003e784 	.word	0x2003e784
   d79ac:	2003e780 	.word	0x2003e780
   d79b0:	2003e77c 	.word	0x2003e77c
   d79b4:	2003e778 	.word	0x2003e778
   d79b8:	2003e774 	.word	0x2003e774
   d79bc:	2003e770 	.word	0x2003e770

000d79c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d79c0:	4b24      	ldr	r3, [pc, #144]	; (d7a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d79c2:	681a      	ldr	r2, [r3, #0]
   d79c4:	07d0      	lsls	r0, r2, #31
   d79c6:	bf5c      	itt	pl
   d79c8:	2201      	movpl	r2, #1
   d79ca:	601a      	strpl	r2, [r3, #0]
   d79cc:	4b22      	ldr	r3, [pc, #136]	; (d7a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d79ce:	681a      	ldr	r2, [r3, #0]
   d79d0:	07d1      	lsls	r1, r2, #31
   d79d2:	bf5c      	itt	pl
   d79d4:	2201      	movpl	r2, #1
   d79d6:	601a      	strpl	r2, [r3, #0]
   d79d8:	4b20      	ldr	r3, [pc, #128]	; (d7a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d79da:	681a      	ldr	r2, [r3, #0]
   d79dc:	07d2      	lsls	r2, r2, #31
   d79de:	bf5c      	itt	pl
   d79e0:	2201      	movpl	r2, #1
   d79e2:	601a      	strpl	r2, [r3, #0]
   d79e4:	4b1e      	ldr	r3, [pc, #120]	; (d7a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d79e6:	681a      	ldr	r2, [r3, #0]
   d79e8:	07d0      	lsls	r0, r2, #31
   d79ea:	bf5c      	itt	pl
   d79ec:	2201      	movpl	r2, #1
   d79ee:	601a      	strpl	r2, [r3, #0]
   d79f0:	4b1c      	ldr	r3, [pc, #112]	; (d7a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d79f2:	681a      	ldr	r2, [r3, #0]
   d79f4:	07d1      	lsls	r1, r2, #31
   d79f6:	bf5c      	itt	pl
   d79f8:	2201      	movpl	r2, #1
   d79fa:	601a      	strpl	r2, [r3, #0]
   d79fc:	4b1a      	ldr	r3, [pc, #104]	; (d7a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d79fe:	681a      	ldr	r2, [r3, #0]
   d7a00:	07d2      	lsls	r2, r2, #31
   d7a02:	bf5c      	itt	pl
   d7a04:	2201      	movpl	r2, #1
   d7a06:	601a      	strpl	r2, [r3, #0]
   d7a08:	4b18      	ldr	r3, [pc, #96]	; (d7a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7a0a:	681a      	ldr	r2, [r3, #0]
   d7a0c:	07d0      	lsls	r0, r2, #31
   d7a0e:	bf5c      	itt	pl
   d7a10:	2201      	movpl	r2, #1
   d7a12:	601a      	strpl	r2, [r3, #0]
   d7a14:	4b16      	ldr	r3, [pc, #88]	; (d7a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7a16:	681a      	ldr	r2, [r3, #0]
   d7a18:	07d1      	lsls	r1, r2, #31
   d7a1a:	bf5c      	itt	pl
   d7a1c:	2201      	movpl	r2, #1
   d7a1e:	601a      	strpl	r2, [r3, #0]
   d7a20:	4b14      	ldr	r3, [pc, #80]	; (d7a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7a22:	681a      	ldr	r2, [r3, #0]
   d7a24:	07d2      	lsls	r2, r2, #31
   d7a26:	bf5c      	itt	pl
   d7a28:	2201      	movpl	r2, #1
   d7a2a:	601a      	strpl	r2, [r3, #0]
   d7a2c:	4b12      	ldr	r3, [pc, #72]	; (d7a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7a2e:	681a      	ldr	r2, [r3, #0]
   d7a30:	07d0      	lsls	r0, r2, #31
   d7a32:	bf5c      	itt	pl
   d7a34:	2201      	movpl	r2, #1
   d7a36:	601a      	strpl	r2, [r3, #0]
   d7a38:	4b10      	ldr	r3, [pc, #64]	; (d7a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7a3a:	681a      	ldr	r2, [r3, #0]
   d7a3c:	07d1      	lsls	r1, r2, #31
   d7a3e:	bf5c      	itt	pl
   d7a40:	2201      	movpl	r2, #1
   d7a42:	601a      	strpl	r2, [r3, #0]
   d7a44:	4b0e      	ldr	r3, [pc, #56]	; (d7a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7a46:	681a      	ldr	r2, [r3, #0]
   d7a48:	07d2      	lsls	r2, r2, #31
   d7a4a:	bf5c      	itt	pl
   d7a4c:	2201      	movpl	r2, #1
   d7a4e:	601a      	strpl	r2, [r3, #0]
   d7a50:	4770      	bx	lr
   d7a52:	bf00      	nop
   d7a54:	2003e7cc 	.word	0x2003e7cc
   d7a58:	2003e7c8 	.word	0x2003e7c8
   d7a5c:	2003e7c4 	.word	0x2003e7c4
   d7a60:	2003e7c0 	.word	0x2003e7c0
   d7a64:	2003e7bc 	.word	0x2003e7bc
   d7a68:	2003e7b8 	.word	0x2003e7b8
   d7a6c:	2003e7b4 	.word	0x2003e7b4
   d7a70:	2003e7b0 	.word	0x2003e7b0
   d7a74:	2003e7ac 	.word	0x2003e7ac
   d7a78:	2003e7a8 	.word	0x2003e7a8
   d7a7c:	2003e7a4 	.word	0x2003e7a4
   d7a80:	2003e7a0 	.word	0x2003e7a0

000d7a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7a84:	4b18      	ldr	r3, [pc, #96]	; (d7ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7a86:	681a      	ldr	r2, [r3, #0]
   d7a88:	07d1      	lsls	r1, r2, #31
   d7a8a:	bf5c      	itt	pl
   d7a8c:	2201      	movpl	r2, #1
   d7a8e:	601a      	strpl	r2, [r3, #0]
   d7a90:	4b16      	ldr	r3, [pc, #88]	; (d7aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7a92:	681a      	ldr	r2, [r3, #0]
   d7a94:	07d2      	lsls	r2, r2, #31
   d7a96:	bf5c      	itt	pl
   d7a98:	2201      	movpl	r2, #1
   d7a9a:	601a      	strpl	r2, [r3, #0]
   d7a9c:	4b14      	ldr	r3, [pc, #80]	; (d7af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7a9e:	681a      	ldr	r2, [r3, #0]
   d7aa0:	07d0      	lsls	r0, r2, #31
   d7aa2:	bf5c      	itt	pl
   d7aa4:	2201      	movpl	r2, #1
   d7aa6:	601a      	strpl	r2, [r3, #0]
   d7aa8:	4b12      	ldr	r3, [pc, #72]	; (d7af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7aaa:	681a      	ldr	r2, [r3, #0]
   d7aac:	07d1      	lsls	r1, r2, #31
   d7aae:	bf5c      	itt	pl
   d7ab0:	2201      	movpl	r2, #1
   d7ab2:	601a      	strpl	r2, [r3, #0]
   d7ab4:	4b10      	ldr	r3, [pc, #64]	; (d7af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7ab6:	681a      	ldr	r2, [r3, #0]
   d7ab8:	07d2      	lsls	r2, r2, #31
   d7aba:	bf5c      	itt	pl
   d7abc:	2201      	movpl	r2, #1
   d7abe:	601a      	strpl	r2, [r3, #0]
   d7ac0:	4b0e      	ldr	r3, [pc, #56]	; (d7afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7ac2:	681a      	ldr	r2, [r3, #0]
   d7ac4:	07d0      	lsls	r0, r2, #31
   d7ac6:	bf5c      	itt	pl
   d7ac8:	2201      	movpl	r2, #1
   d7aca:	601a      	strpl	r2, [r3, #0]
   d7acc:	4b0c      	ldr	r3, [pc, #48]	; (d7b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7ace:	681a      	ldr	r2, [r3, #0]
   d7ad0:	07d1      	lsls	r1, r2, #31
   d7ad2:	bf5c      	itt	pl
   d7ad4:	2201      	movpl	r2, #1
   d7ad6:	601a      	strpl	r2, [r3, #0]
   d7ad8:	4b0a      	ldr	r3, [pc, #40]	; (d7b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7ada:	681a      	ldr	r2, [r3, #0]
   d7adc:	07d2      	lsls	r2, r2, #31
   d7ade:	bf5c      	itt	pl
   d7ae0:	2201      	movpl	r2, #1
   d7ae2:	601a      	strpl	r2, [r3, #0]
   d7ae4:	4770      	bx	lr
   d7ae6:	bf00      	nop
   d7ae8:	2003e7ec 	.word	0x2003e7ec
   d7aec:	2003e7e8 	.word	0x2003e7e8
   d7af0:	2003e7e4 	.word	0x2003e7e4
   d7af4:	2003e7e0 	.word	0x2003e7e0
   d7af8:	2003e7dc 	.word	0x2003e7dc
   d7afc:	2003e7d8 	.word	0x2003e7d8
   d7b00:	2003e7d4 	.word	0x2003e7d4
   d7b04:	2003e7d0 	.word	0x2003e7d0

000d7b08 <__cxa_atexit>:
   d7b08:	b510      	push	{r4, lr}
   d7b0a:	4c05      	ldr	r4, [pc, #20]	; (d7b20 <__cxa_atexit+0x18>)
   d7b0c:	4613      	mov	r3, r2
   d7b0e:	b12c      	cbz	r4, d7b1c <__cxa_atexit+0x14>
   d7b10:	460a      	mov	r2, r1
   d7b12:	4601      	mov	r1, r0
   d7b14:	2002      	movs	r0, #2
   d7b16:	f3af 8000 	nop.w
   d7b1a:	bd10      	pop	{r4, pc}
   d7b1c:	4620      	mov	r0, r4
   d7b1e:	bd10      	pop	{r4, pc}
   d7b20:	00000000 	.word	0x00000000

000d7b24 <memcmp>:
   d7b24:	b510      	push	{r4, lr}
   d7b26:	3901      	subs	r1, #1
   d7b28:	4402      	add	r2, r0
   d7b2a:	4290      	cmp	r0, r2
   d7b2c:	d007      	beq.n	d7b3e <memcmp+0x1a>
   d7b2e:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7b32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7b36:	42a3      	cmp	r3, r4
   d7b38:	d0f7      	beq.n	d7b2a <memcmp+0x6>
   d7b3a:	1b18      	subs	r0, r3, r4
   d7b3c:	bd10      	pop	{r4, pc}
   d7b3e:	2000      	movs	r0, #0
   d7b40:	bd10      	pop	{r4, pc}

000d7b42 <memcpy>:
   d7b42:	b510      	push	{r4, lr}
   d7b44:	1e43      	subs	r3, r0, #1
   d7b46:	440a      	add	r2, r1
   d7b48:	4291      	cmp	r1, r2
   d7b4a:	d004      	beq.n	d7b56 <memcpy+0x14>
   d7b4c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7b50:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7b54:	e7f8      	b.n	d7b48 <memcpy+0x6>
   d7b56:	bd10      	pop	{r4, pc}

000d7b58 <memmove>:
   d7b58:	4288      	cmp	r0, r1
   d7b5a:	b510      	push	{r4, lr}
   d7b5c:	eb01 0302 	add.w	r3, r1, r2
   d7b60:	d801      	bhi.n	d7b66 <memmove+0xe>
   d7b62:	1e42      	subs	r2, r0, #1
   d7b64:	e00b      	b.n	d7b7e <memmove+0x26>
   d7b66:	4298      	cmp	r0, r3
   d7b68:	d2fb      	bcs.n	d7b62 <memmove+0xa>
   d7b6a:	1881      	adds	r1, r0, r2
   d7b6c:	1ad2      	subs	r2, r2, r3
   d7b6e:	42d3      	cmn	r3, r2
   d7b70:	d004      	beq.n	d7b7c <memmove+0x24>
   d7b72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7b76:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d7b7a:	e7f8      	b.n	d7b6e <memmove+0x16>
   d7b7c:	bd10      	pop	{r4, pc}
   d7b7e:	4299      	cmp	r1, r3
   d7b80:	d004      	beq.n	d7b8c <memmove+0x34>
   d7b82:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7b86:	f802 4f01 	strb.w	r4, [r2, #1]!
   d7b8a:	e7f8      	b.n	d7b7e <memmove+0x26>
   d7b8c:	bd10      	pop	{r4, pc}

000d7b8e <memset>:
   d7b8e:	4402      	add	r2, r0
   d7b90:	4603      	mov	r3, r0
   d7b92:	4293      	cmp	r3, r2
   d7b94:	d002      	beq.n	d7b9c <memset+0xe>
   d7b96:	f803 1b01 	strb.w	r1, [r3], #1
   d7b9a:	e7fa      	b.n	d7b92 <memset+0x4>
   d7b9c:	4770      	bx	lr
	...

000d7ba0 <srand>:
   d7ba0:	b538      	push	{r3, r4, r5, lr}
   d7ba2:	4b12      	ldr	r3, [pc, #72]	; (d7bec <srand+0x4c>)
   d7ba4:	681c      	ldr	r4, [r3, #0]
   d7ba6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7ba8:	4605      	mov	r5, r0
   d7baa:	b9d3      	cbnz	r3, d7be2 <srand+0x42>
   d7bac:	2018      	movs	r0, #24
   d7bae:	f7fc fe65 	bl	d487c <malloc>
   d7bb2:	f243 330e 	movw	r3, #13070	; 0x330e
   d7bb6:	63a0      	str	r0, [r4, #56]	; 0x38
   d7bb8:	8003      	strh	r3, [r0, #0]
   d7bba:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7bbe:	8043      	strh	r3, [r0, #2]
   d7bc0:	f241 2334 	movw	r3, #4660	; 0x1234
   d7bc4:	8083      	strh	r3, [r0, #4]
   d7bc6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7bca:	80c3      	strh	r3, [r0, #6]
   d7bcc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7bd0:	8103      	strh	r3, [r0, #8]
   d7bd2:	2305      	movs	r3, #5
   d7bd4:	8143      	strh	r3, [r0, #10]
   d7bd6:	230b      	movs	r3, #11
   d7bd8:	8183      	strh	r3, [r0, #12]
   d7bda:	2201      	movs	r2, #1
   d7bdc:	2300      	movs	r3, #0
   d7bde:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7be2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7be4:	2200      	movs	r2, #0
   d7be6:	611d      	str	r5, [r3, #16]
   d7be8:	615a      	str	r2, [r3, #20]
   d7bea:	bd38      	pop	{r3, r4, r5, pc}
   d7bec:	2003e328 	.word	0x2003e328

000d7bf0 <strchr>:
   d7bf0:	b2c9      	uxtb	r1, r1
   d7bf2:	4603      	mov	r3, r0
   d7bf4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7bf8:	b11a      	cbz	r2, d7c02 <strchr+0x12>
   d7bfa:	4291      	cmp	r1, r2
   d7bfc:	d1f9      	bne.n	d7bf2 <strchr+0x2>
   d7bfe:	4618      	mov	r0, r3
   d7c00:	4770      	bx	lr
   d7c02:	2900      	cmp	r1, #0
   d7c04:	bf0c      	ite	eq
   d7c06:	4618      	moveq	r0, r3
   d7c08:	2000      	movne	r0, #0
   d7c0a:	4770      	bx	lr

000d7c0c <strchrnul>:
   d7c0c:	b510      	push	{r4, lr}
   d7c0e:	4604      	mov	r4, r0
   d7c10:	f7ff ffee 	bl	d7bf0 <strchr>
   d7c14:	b918      	cbnz	r0, d7c1e <strchrnul+0x12>
   d7c16:	4620      	mov	r0, r4
   d7c18:	f000 f80c 	bl	d7c34 <strlen>
   d7c1c:	4420      	add	r0, r4
   d7c1e:	bd10      	pop	{r4, pc}

000d7c20 <strcmp>:
   d7c20:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7c24:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7c28:	2a01      	cmp	r2, #1
   d7c2a:	bf28      	it	cs
   d7c2c:	429a      	cmpcs	r2, r3
   d7c2e:	d0f7      	beq.n	d7c20 <strcmp>
   d7c30:	1ad0      	subs	r0, r2, r3
   d7c32:	4770      	bx	lr

000d7c34 <strlen>:
   d7c34:	4603      	mov	r3, r0
   d7c36:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7c3a:	2a00      	cmp	r2, #0
   d7c3c:	d1fb      	bne.n	d7c36 <strlen+0x2>
   d7c3e:	1a18      	subs	r0, r3, r0
   d7c40:	3801      	subs	r0, #1
   d7c42:	4770      	bx	lr

000d7c44 <strncmp>:
   d7c44:	b530      	push	{r4, r5, lr}
   d7c46:	b182      	cbz	r2, d7c6a <strncmp+0x26>
   d7c48:	1e45      	subs	r5, r0, #1
   d7c4a:	3901      	subs	r1, #1
   d7c4c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d7c50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7c54:	42a3      	cmp	r3, r4
   d7c56:	d106      	bne.n	d7c66 <strncmp+0x22>
   d7c58:	43ec      	mvns	r4, r5
   d7c5a:	4414      	add	r4, r2
   d7c5c:	42e0      	cmn	r0, r4
   d7c5e:	d001      	beq.n	d7c64 <strncmp+0x20>
   d7c60:	2b00      	cmp	r3, #0
   d7c62:	d1f3      	bne.n	d7c4c <strncmp+0x8>
   d7c64:	461c      	mov	r4, r3
   d7c66:	1b18      	subs	r0, r3, r4
   d7c68:	bd30      	pop	{r4, r5, pc}
   d7c6a:	4610      	mov	r0, r2
   d7c6c:	bd30      	pop	{r4, r5, pc}

000d7c6e <strrchr>:
   d7c6e:	b538      	push	{r3, r4, r5, lr}
   d7c70:	4603      	mov	r3, r0
   d7c72:	460d      	mov	r5, r1
   d7c74:	b141      	cbz	r1, d7c88 <strrchr+0x1a>
   d7c76:	2400      	movs	r4, #0
   d7c78:	4629      	mov	r1, r5
   d7c7a:	4618      	mov	r0, r3
   d7c7c:	f7ff ffb8 	bl	d7bf0 <strchr>
   d7c80:	b130      	cbz	r0, d7c90 <strrchr+0x22>
   d7c82:	1c43      	adds	r3, r0, #1
   d7c84:	4604      	mov	r4, r0
   d7c86:	e7f7      	b.n	d7c78 <strrchr+0xa>
   d7c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7c8c:	f7ff bfb0 	b.w	d7bf0 <strchr>
   d7c90:	4620      	mov	r0, r4
   d7c92:	bd38      	pop	{r3, r4, r5, pc}

000d7c94 <_strtol_r>:
   d7c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7c98:	4680      	mov	r8, r0
   d7c9a:	4840      	ldr	r0, [pc, #256]	; (d7d9c <_strtol_r+0x108>)
   d7c9c:	f8d0 9000 	ldr.w	r9, [r0]
   d7ca0:	460f      	mov	r7, r1
   d7ca2:	463d      	mov	r5, r7
   d7ca4:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7ca8:	eb09 0004 	add.w	r0, r9, r4
   d7cac:	7840      	ldrb	r0, [r0, #1]
   d7cae:	f000 0008 	and.w	r0, r0, #8
   d7cb2:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d7cb6:	b108      	cbz	r0, d7cbc <_strtol_r+0x28>
   d7cb8:	462f      	mov	r7, r5
   d7cba:	e7f2      	b.n	d7ca2 <_strtol_r+0xe>
   d7cbc:	2c2d      	cmp	r4, #45	; 0x2d
   d7cbe:	d103      	bne.n	d7cc8 <_strtol_r+0x34>
   d7cc0:	1cbd      	adds	r5, r7, #2
   d7cc2:	787c      	ldrb	r4, [r7, #1]
   d7cc4:	2601      	movs	r6, #1
   d7cc6:	e003      	b.n	d7cd0 <_strtol_r+0x3c>
   d7cc8:	2c2b      	cmp	r4, #43	; 0x2b
   d7cca:	bf04      	itt	eq
   d7ccc:	787c      	ldrbeq	r4, [r7, #1]
   d7cce:	1cbd      	addeq	r5, r7, #2
   d7cd0:	b113      	cbz	r3, d7cd8 <_strtol_r+0x44>
   d7cd2:	2b10      	cmp	r3, #16
   d7cd4:	d10a      	bne.n	d7cec <_strtol_r+0x58>
   d7cd6:	e05b      	b.n	d7d90 <_strtol_r+0xfc>
   d7cd8:	2c30      	cmp	r4, #48	; 0x30
   d7cda:	d157      	bne.n	d7d8c <_strtol_r+0xf8>
   d7cdc:	7828      	ldrb	r0, [r5, #0]
   d7cde:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7ce2:	2858      	cmp	r0, #88	; 0x58
   d7ce4:	d14d      	bne.n	d7d82 <_strtol_r+0xee>
   d7ce6:	786c      	ldrb	r4, [r5, #1]
   d7ce8:	2310      	movs	r3, #16
   d7cea:	3502      	adds	r5, #2
   d7cec:	2e00      	cmp	r6, #0
   d7cee:	bf14      	ite	ne
   d7cf0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7cf4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7cf8:	2700      	movs	r7, #0
   d7cfa:	fbbc faf3 	udiv	sl, ip, r3
   d7cfe:	4638      	mov	r0, r7
   d7d00:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7d04:	eb09 0e04 	add.w	lr, r9, r4
   d7d08:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7d0c:	f01e 0f04 	tst.w	lr, #4
   d7d10:	d001      	beq.n	d7d16 <_strtol_r+0x82>
   d7d12:	3c30      	subs	r4, #48	; 0x30
   d7d14:	e00b      	b.n	d7d2e <_strtol_r+0x9a>
   d7d16:	f01e 0e03 	ands.w	lr, lr, #3
   d7d1a:	d01b      	beq.n	d7d54 <_strtol_r+0xc0>
   d7d1c:	f1be 0f01 	cmp.w	lr, #1
   d7d20:	bf0c      	ite	eq
   d7d22:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7d26:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7d2a:	ebce 0404 	rsb	r4, lr, r4
   d7d2e:	42a3      	cmp	r3, r4
   d7d30:	dd10      	ble.n	d7d54 <_strtol_r+0xc0>
   d7d32:	f1b7 3fff 	cmp.w	r7, #4294967295
   d7d36:	d00a      	beq.n	d7d4e <_strtol_r+0xba>
   d7d38:	4550      	cmp	r0, sl
   d7d3a:	d806      	bhi.n	d7d4a <_strtol_r+0xb6>
   d7d3c:	d101      	bne.n	d7d42 <_strtol_r+0xae>
   d7d3e:	4564      	cmp	r4, ip
   d7d40:	dc03      	bgt.n	d7d4a <_strtol_r+0xb6>
   d7d42:	fb03 4000 	mla	r0, r3, r0, r4
   d7d46:	2701      	movs	r7, #1
   d7d48:	e001      	b.n	d7d4e <_strtol_r+0xba>
   d7d4a:	f04f 37ff 	mov.w	r7, #4294967295
   d7d4e:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7d52:	e7d7      	b.n	d7d04 <_strtol_r+0x70>
   d7d54:	1c7b      	adds	r3, r7, #1
   d7d56:	d10c      	bne.n	d7d72 <_strtol_r+0xde>
   d7d58:	2e00      	cmp	r6, #0
   d7d5a:	f04f 0322 	mov.w	r3, #34	; 0x22
   d7d5e:	bf14      	ite	ne
   d7d60:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d7d64:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7d68:	f8c8 3000 	str.w	r3, [r8]
   d7d6c:	b92a      	cbnz	r2, d7d7a <_strtol_r+0xe6>
   d7d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7d72:	b106      	cbz	r6, d7d76 <_strtol_r+0xe2>
   d7d74:	4240      	negs	r0, r0
   d7d76:	b172      	cbz	r2, d7d96 <_strtol_r+0x102>
   d7d78:	b107      	cbz	r7, d7d7c <_strtol_r+0xe8>
   d7d7a:	1e69      	subs	r1, r5, #1
   d7d7c:	6011      	str	r1, [r2, #0]
   d7d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7d82:	2430      	movs	r4, #48	; 0x30
   d7d84:	2b00      	cmp	r3, #0
   d7d86:	d1b1      	bne.n	d7cec <_strtol_r+0x58>
   d7d88:	2308      	movs	r3, #8
   d7d8a:	e7af      	b.n	d7cec <_strtol_r+0x58>
   d7d8c:	230a      	movs	r3, #10
   d7d8e:	e7ad      	b.n	d7cec <_strtol_r+0x58>
   d7d90:	2c30      	cmp	r4, #48	; 0x30
   d7d92:	d0a3      	beq.n	d7cdc <_strtol_r+0x48>
   d7d94:	e7aa      	b.n	d7cec <_strtol_r+0x58>
   d7d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7d9a:	bf00      	nop
   d7d9c:	2003e2c4 	.word	0x2003e2c4

000d7da0 <strtol>:
   d7da0:	4613      	mov	r3, r2
   d7da2:	460a      	mov	r2, r1
   d7da4:	4601      	mov	r1, r0
   d7da6:	4802      	ldr	r0, [pc, #8]	; (d7db0 <strtol+0x10>)
   d7da8:	6800      	ldr	r0, [r0, #0]
   d7daa:	f7ff bf73 	b.w	d7c94 <_strtol_r>
   d7dae:	bf00      	nop
   d7db0:	2003e328 	.word	0x2003e328

000d7db4 <dynalib_user>:
   d7db4:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d7dc4:	00000000                                ....

000d7dc8 <_ZTVN5spark10LogHandlerE>:
	...
   d7dd8:	000d40a5 000d40c9                       .@...@..

000d7de0 <_ZTVN5spark17Serial1LogHandlerE>:
	...
   d7de8:	000d40e1 000d4115 000d5ff5 000d40cb     .@...A..._...@..

000d7df8 <_ZZ5setupE19__PRETTY_FUNCTION__>:
   d7df8:	64696f76 74657320 29287075 2f3a6300     void setup().c:/
   d7e08:	72657355 654e2f73 6d6f6472 7365442f     Users/Nerdom/Des
   d7e18:	706f746b 656c622f 6372732f 656c622f     ktop/ble/src/ble
   d7e28:	6f6e692e 70706100 70704100 6163696c     .ino.app.Applica
   d7e38:	6e6f6974 61747320 64657472 6f54002e     tion started..To
   d7e48:	74006464 78720078 34453600 30303030     dd.tx.rx.6E40000
   d7e58:	35422d33 462d3341 2d333933 39413045     3-B5A3-F393-E0A9
   d7e68:	3035452d 44343245 39414343 45360045     -E50E24DCCA9E.6E
   d7e78:	30303034 422d3230 2d334135 33393346     400002-B5A3-F393
   d7e88:	4130452d 35452d39 34324530 41434344     -E0A9-E50E24DCCA
   d7e98:	36004539 30303445 2d313030 33413542     9E.6E400001-B5A3
   d7ea8:	3933462d 30452d33 452d3941 32453035     -F393-E0A9-E50E2
   d7eb8:	43434434 00453941                       4DCCA9E.

000d7ec0 <_ZTVN5spark13EthernetClassE>:
	...
   d7ec8:	000d491b 000d4911 000d4907 000d48fd     .I...I...I...H..
   d7ed8:	000d48f1 000d48e5 000d48d9 000d48d1     .H...H...H...H..
   d7ee8:	000d48c7 000d48bd 000d733d              .H...H..=s..

000d7ef4 <_ZTV8SPIClass>:
	...
   d7efc:	000d4939 000d493b                       9I..;I..

000d7f04 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d7f0c:	000d4abf 000d4ac5 000d598d 000d4aef     .J...J...Y...J..
   d7f1c:	000d4ac1                                .J..

000d7f20 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d7f28:	000d4ab9 000d4ad3 000d5a99 000d4af3     .J...J...Z...J..
   d7f38:	000d4abb                                .J..

000d7f3c <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d7f44:	000d4ab3 000d4ae1 000d5169 000d4af7     .J...J..iQ...J..
   d7f54:	000d4ab5                                .J..

000d7f58 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d7f58:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.
   d7f68:	69726977 622e676e 5300656c 74726174     wiring.ble.Start
   d7f78:	73696420 65766f63 676e6972 72657320      discovering ser
   d7f88:	65636976 53002e73 74726174 73696420     vices..Start dis
   d7f98:	65766f63 676e6972 61686320 74636172     covering charact
   d7fa8:	73697265 73636974 6168002e 6c625f6c     eristics..hal_bl
   d7fb8:	61675f65 635f7474 6e65696c 69645f74     e_gatt_client_di
   d7fc8:	766f6373 615f7265 735f6c6c 69767265     scover_all_servi
   d7fd8:	28736563 61662029 64656c69 6425203b     ces() failed; %d
   d7fe8:	77654e00 72657020 65687069 206c6172     .New peripheral 
   d7ff8:	6e6e6f63 65746365 00002e64              connected...

000d8004 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d800c:	000d5daf 000d5dd5 000d5d89 000d744b     .]...]...]..Kt..

000d801c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d8024:	000d6529 000d653d 000d5e61 000d5d91     )e..=e..a^...]..

000d8034 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d803c:	000d5dab 000d5df1 000d6441 000d5dff     .]...]..Ad...]..
   d804c:	6e6c0066 006e6600 65646f63 74656400     f.ln.fn.code.det
   d805c:	006c6961 25000a0d 75303130 205d0020     ail....%010u .] 
   d806c:	00202c00 203a2928 005b2000 65646f63     ., .(): . [.code
   d807c:	00203d20 64006925 69617465 3d20736c      = .%i.details =
   d808c:	61620020 53006475 61697265 6553006c      .baud.Serial.Se
   d809c:	6c616972 79740031 70006570 6d617261     rial1.type.param
   d80ac:	646d6300 00646900 00646e68 6d727473     .cmd.id.hnd.strm
   d80bc:	6c696600 766c0074 6461006c 6e614864     .filt.lvl.addHan
   d80cc:	72656c64 6d657200 4865766f 6c646e61     dler.removeHandl
   d80dc:	65007265 486d756e 6c646e61 00737265     er.enumHandlers.
   d80ec:	4e4f534a 65727453 6f4c6d61 6e614867     JSONStreamLogHan
   d80fc:	72656c64 6e6f6e00 72740065 00656361     dler.none.trace.
   d810c:	6f666e69 72617700 7265006e 00726f72     info.warn.error.
   d811c:	696e6170 6c610063 0000006c              panic.all...

000d8128 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d8130:	000d64fd 000d6515 000d5ff5 000d40cb     .d...e..._...@..

000d8140 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d8148:	000d5dad 000d5de3 000d6bf1 000d5d93     .]...]...k...]..
   d8158:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
   d8168:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
   d8178:	63736100 656d6974 00000000              .asctime....

000d8184 <_ZTV9IPAddress>:
	...
   d818c:	000d6dfd 000d6ded 000d6def              .m...m...m..

000d8198 <_ZTV9USBSerial>:
	...
   d81a0:	000d6ed5 000d6f25 000d6f33 000d5c4d     .n..%o..3o..M\..
   d81b0:	000d6f11 000d6ed7 000d6eed 000d6f1f     .o...n...n...o..
   d81c0:	000d6f03 000d6ed1                       .o...n..

000d81c8 <_ZTV11USARTSerial>:
	...
   d81d0:	000d6fe9 000d7039 000d7047 000d5c4d     .o..9p..Gp..M\..
   d81e0:	000d6ffd 000d701f 000d700b 000d7033     .o...p...p..3p..
   d81f0:	000d6feb 000d6fef                       .o...o..

000d81f8 <_ZTVN5spark9MeshClassE>:
	...
   d8200:	000d7157 000d714d 000d7143 000d7139     Wq..Mq..Cq..9q..
   d8210:	000d712d 000d7121 000d7115 000d710d     -q..!q...q...q..
   d8220:	000d7103 000d70f9 000d733d              .q...p..=s..

000d822c <_ZTVN5spark9WiFiClassE>:
	...
   d8234:	000d72b7 000d72ad 000d72a3 000d7259     .r...r...r..Yr..
   d8244:	000d7297 000d728b 000d727f 000d7277     .r...r...r..wr..
   d8254:	000d726d 000d7263 000d733d              mr..cr..=s..

000d8260 <_ZTVN5spark12NetworkClassE>:
	...
   d8268:	000d72d5 000d72df 000d72e9 000d72f3     .r...r...r...r..
   d8278:	000d72fd 000d7309 000d7315 000d7321     .r...s...s..!s..
   d8288:	000d7329 000d7333 000d733d 00302e30     )s..3s..=s..0.0.
   d8298:	736c6166 72740065 25006575 67250075     false.true.%u.%g
   d82a8:	6c756e00 2575006c 00783430              .null.u%04x.

000d82b4 <_ZSt7nothrow>:
	...

000d82b5 <_ctype_>:
   d82b5:	20202000 20202020 28282020 20282828     .         ((((( 
   d82c5:	20202020 20202020 20202020 20202020                     
   d82d5:	10108820 10101010 10101010 10101010      ...............
   d82e5:	04040410 04040404 10040404 10101010     ................
   d82f5:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d8305:	01010101 01010101 01010101 10101010     ................
   d8315:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d8325:	02020202 02020202 02020202 10101010     ................
   d8335:	00000020 00000000 00000000 00000000      ...............
	...

000d83b8 <__sf_fake_stdin>:
	...

000d83d8 <__sf_fake_stdout>:
	...

000d83f8 <__sf_fake_stderr>:
	...
   d8418:	00000043                                         C.

000d841a <link_const_variable_data_end>:
	...

000d841c <link_constructors_location>:
   d841c:	000d4341 	.word	0x000d4341
   d8420:	000d4925 	.word	0x000d4925
   d8424:	000d4971 	.word	0x000d4971
   d8428:	000d5c3d 	.word	0x000d5c3d
   d842c:	000d6cb9 	.word	0x000d6cb9
   d8430:	000d6cc9 	.word	0x000d6cc9
   d8434:	000d6cfd 	.word	0x000d6cfd
   d8438:	000d720d 	.word	0x000d720d
   d843c:	000d72c1 	.word	0x000d72c1
   d8440:	000d7409 	.word	0x000d7409
   d8444:	000d77f5 	.word	0x000d77f5
   d8448:	000d7879 	.word	0x000d7879
   d844c:	000d78fd 	.word	0x000d78fd
   d8450:	000d79c1 	.word	0x000d79c1
   d8454:	000d7a85 	.word	0x000d7a85

000d8458 <link_constructors_end>:
	...
